<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_page().
 */
function alshaya_hnm_preprocess_page(&$variables) {
  // Check if page is panel pages.
  $routematch = \Drupal::routeMatch();

  if ($routematch->getRouteName() === "acq_customer.orders" || $routematch->getRouteName() === 'acq_cart.cart') {
    $variables['#attached']['library'][] = 'alshaya_hnm/convert_to_select2';
  }

  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface) {
    if ($variables['node']->bundle() === 'acq_product') {
      $variables['#attached']['library'][] = 'alshaya_hnm/convert_to_select2';
    }

    // Attach the plp search js library to the promotion product listing page.
    elseif ($variables['node']->bundle() === 'acq_promotion') {
      $variables['#attached']['library'][] = 'alshaya_hnm/plp_search_js';
    }
  }

  // Attach the plp search js library to PLP page.
  if ($routematch->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $routematch->getParameter('taxonomy_term');
    if ($term->bundle() == 'acq_product_category') {
      $variables['#attached']['library'][] = 'alshaya_hnm/plp_search_js';
    }
  }

  // Attach the plp search js library to Search page.
  if ($routematch->getRouteName() == 'view.search.page') {
    $variables['#attached']['library'][] = 'alshaya_hnm/plp_search_js';
  }
}

/**
 * Implements template_preprocess_block().
 */
function alshaya_hnm_preprocess_block(&$variables) {
  // Custom block type helper classes.
  if (isset($variables['elements'], $variables['elements']['#id'])
    && $variables['elements']['#id'] === 'branding') {
    $variables['site_logo'] = theme_get_setting('logo.url');
    $variables['site_name'] = theme_get_setting('name');
  }
}

/**
 * Implements template_view_alter().
 */
function alshaya_hnm_theme_suggestions_views_view_alter(array &$suggestions, &$variables) {
  if ($variables['view']->current_display == "block_product_slider") {
    $suggestions[] = 'views_view__product_slider';
  }
}

/**
 * Implements hook_form_alter().
 */
// @codingStandardsIgnoreLine
function alshaya_hnm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case "views_exposed_form":
      // Adding Place holder on Search.
      if ($form['#id'] == 'views-exposed-form-search-page') {
        $form['keywords']['#attributes']['placeholder'] = t('Search');
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_hnm_theme() {
  return [
    'customer_cart_form' => [
      'render element' => 'form',
      'path' => drupal_get_path('theme', 'alshaya_hnm') . '/templates/form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function alshaya_hnm_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $routmatch = \Drupal::routeMatch();
  if ($routmatch->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $routmatch->getParameter('taxonomy_term');
    if ($term->bundle() == 'acq_product_category') {
      $suggestions[] = 'page__plp';
    }
  }

  // For 404 page.
  if ($routmatch->getRouteName() == 'system.404') {
    $suggestions[] = 'page__404';
  }

  // Check if we are on node page.
  if ($routmatch->getRouteName() == 'entity.node.canonical') {
    $node = Drupal::request()->attributes->get('node');

    // For now we want to update only the department_page template.
    if ($node->bundle() == 'advanced_page' && $node->get('field_use_as_department_page')->value == 1) {
      $suggestions[] = 'page__department';
    }
    elseif ($node->bundle() == 'acq_product') {
      $suggestions[] = 'page__pdp';
    }
    elseif ($node->bundle() == 'acq_promotion') {
      $suggestions[] = 'page__plp';
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'page__front';
  }

  if ($routmatch->getRouteName() == 'alshaya_acm_customer.orders_print'
    || $routmatch->getRouteName() == 'alshaya_acm_customer.print_last_order') {
    $suggestions[] = 'page__orderprint';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_hnm_page_attachments_alter(array &$attachments) {
  // Get current route.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Routes from where we need to remove the 'back_to_top' button.
  $skip_back_to_top_routes = [
    'acq_checkout.form',
  ];

  if (in_array($route_name, $skip_back_to_top_routes)) {
    // If back_to_top library is added to page, remove it.
    if (in_array('back_to_top/back_to_top_js', $attachments['#attached']['library'])) {
      $index = array_search('back_to_top/back_to_top_js', $attachments['#attached']['library']);
      unset($attachments['#attached']['library'][$index]);
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function alshaya_hnm_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Check if the current node is front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'node__advanced_page_front';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function alshaya_hnm_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  // If 'acq_sku' entity with 'product_list' display mode.
  if ($element['#entity_type'] == 'acq_sku' && $element['#view_mode'] == 'product_list') {
    if (isset($element['#field_name'])) {
      // Hide/Remove all images except first.
      if ($element['#field_name'] == 'attr_image') {
        if (!empty($variables['items'])) {
          $variables['items'] = [$variables['items'][0]];
        }
      }

      // Added the currency label.
      if ($element['#field_name'] == 'price') {
        if (!empty($variables['items'])) {
          $price = $variables['items'][0]['content']['#context']['value'];
          $variables['items'][0]['content'] = [
            '#theme' => 'alshaya_acm_price',
            '#price' => $price,
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_user().
 */
function alshaya_hnm_preprocess_user(&$variables) {
  /* @var \Drupal\user\Entity\User $user */
  $user = $variables['user'];
  if ($user) {
    $variables['email'] = $user->get('mail') ? $user->get('mail')->getValue()[0]['value'] : '';

    // We always initialise the variable to get no notices.
    $variables['contact_number'] = '';
    $variables['privilege_card'] = '';

    if (isset($user->field_mobile_number)) {
      if ($mobile_number = $user->get('field_mobile_number')->getValue()) {
        $variables['contact_number'] = \Drupal::service('mobile_number.util')->getFormattedMobileNumber($mobile_number[0]['value']);
      }
    }

    // Check if loyalty module is enabled.
    if (\Drupal::moduleHandler()->moduleExists('alshaya_loyalty')) {
      // Get loyalty settings.
      $loyalty_settings = alshaya_loyalty_get_validation_settings();

      // Check if site has loyalty enabled in config.
      if ($loyalty_settings['enable_disable_loyalty']) {

        // Check if we have some value stored for the user.
        if ($privilege_card = $user->get('field_privilege_card_number')->getValue()) {
          $variables['privilege_card'] = alshaya_loyalty_format_card_number($privilege_card[0]['value'], TRUE);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_hnm_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'account') {
    // Get the current path.
    $current_path_Uri = \Drupal::request()->getRequestUri();
    $items = $variables['items'];
    foreach ($items as $item) {
      // If path is current_path, add active class.
      if ($item['url']->toString() == $current_path_Uri) {
        $attributes = $item['url']->getOption('attributes');
        $attributes['class'][] = 'is-active';
        $item['url']->setOption('attributes', $attributes);
      }
    }
  }
}

/**
 * Implements hook_preprocess_mimemail_messages().
 */
function alshaya_hnm_preprocess_mimemail_messages(&$variables) {
  $user = user_load_by_mail($variables['recipient']);
  if ($user) {
    $lang = $user->getPreferredLangcode();
  }
  else {
    $lang = \Drupal::currentUser()->getPreferredLangcode();
  }

  // Get logo based on user preferred language.
  $email_logo = alshaya_master_get_email_logo('alshaya_hnm', $lang);
  if (empty($email_logo['logo_url'])) {
    $email_logo['logo_url'] = file_create_url($email_logo['logo_path']);
  }
  $variables['email_logo'] = $email_logo['logo_url'];

  // Add website footer block information with UUID as this is the unique id
  // with different env.
  $uuid = '340b823b-e16c-457a-bc03-4a096f8ae171';
  // Get copyright block based on language.
  $copyright_block = \Drupal::entityManager()->loadEntityByUuid('block_content', $uuid);
  $block_view = \Drupal::entityManager()->getViewBuilder('block_content')->view($copyright_block, 'full', $lang);
  $variables['email_footer'] = $block_view;
  $variables['lang'] = $lang;

  // Social links for email template.
  $menu_tree = \Drupal::menuTree();
  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('social-links');
  $menus = $menu_tree->load('social-links', $parameters);
  foreach ($menus as $menu) {
    $title = $menu->link->getTitle();
    $links[strtolower($title)] = $menu->link->getUrlObject()->setAbsolute(TRUE)->toString();
  }
  $variables['links'] = $links;
}

/**
 * Implements hook_js_alter().
 */
function alshaya_hnm_js_alter(&$javascript) {
  unset($javascript['themes/custom/alshaya_white_label/menu.js']);
}
