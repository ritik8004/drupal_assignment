<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\alshaya_user\Form\UserCommunicationPreference;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_html().
 */
function alshaya_white_label_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
  }
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
  // Update the meta to include noscalable for iphone.
  $html_head = &$variables['page']['#attached']['html_head'];
  foreach ($html_head as $index => $val) {
    if ($val[1] == 'viewport') {
      $html_head[$index][0]['#attributes']['content'] .= ', user-scalable=no';
    }
  }

  $current_route = \Drupal::routeMatch();
  // If store finder glossary view.
  if ($current_route->getRouteName() == 'view.stores_finder.page_2') {
    $variables['attributes']['class'][] = 'store-finder-view';
  }

  // Add class for page PLP.
  if ($current_route->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $current_route->getParameter('taxonomy_term');
    if ($term->bundle() == 'acq_product_category') {
      $variables['attributes']['class'][] = 'plp-page-only';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function alshaya_white_label_preprocess_page(&$variables) {
  // Check if page is panel pages.
  $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($route_options['parameters']['page_manager_page'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-panel');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-standard');
  }
}

/**
 * Implements template_preprocess_block().
 */
function alshaya_white_label_preprocess_block(&$variables) {
  // Custom block type helper classes.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = Html::cleanCssIdentifier('block--' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
  }
  elseif ($variables['elements']['#id'] === 'keywordsearchblock') {
    $variables['attributes']['class'][] = 'block-views-exposed-filter-blocksearch-page';
  }

  if ($variables['plugin_id'] === 'basket_horizontal_recommendation') {
    $variables['attributes']['class'][] = 'horizontal-crossell';
  }
}

/**
 * Implements template_view_alter().
 */
function alshaya_white_label_theme_suggestions_views_view_alter(array &$suggestions, &$variables) {
  if ($variables['view']->current_display == "block_product_slider") {
    $suggestions[] = 'views_view__product_slider';
  }
}

/**
 * Implements template_view_grid_alter().
 */
function alshaya_white_label_theme_suggestions_views_view_grid_alter(array &$suggestions, &$variables) {
  if ($variables['view']->id() == 'address_book') {
    $suggestions[] = "views_view_grid__address_book";
  }
}

/**
 * Implements template_view_unformatted_alter().
 */
function alshaya_white_label_theme_suggestions_views_view_unformatted_alter(array &$suggestions, &$variables) {
  if ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_1') {
    // If store finder list view.
    $suggestions[] = "views_view_unformatted__store_list";
    $variables['load_more_button'] = [
      '#title' => t('Load More'),
      '#type' => 'link',
      '#url' => Url::fromUserInput('#'),
    ];
  }
  elseif ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_2') {
    // If store finder glossary view.
    $suggestions[] = "views_view_unformatted__store_glossary";
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function alshaya_white_label_preprocess_views_view_field__stores_finder__page_1__field_store_open_hours(&$variables) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function alshaya_white_label_preprocess_views_view_field__stores_finder__page_3__field_store_open_hours(&$variables) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function alshaya_white_label_preprocess_views_view_field__stores_finder__attachment_1__field_store_open_hours(&$variables) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_field().
 */
function alshaya_white_label_preprocess_field__node__field_store_open_hours__store(&$variables) {
  if ($lat_lng = $variables['element']['#object']->get('field_latitude_longitude')) {
    $variables['lat_lng'] = $lat_lng[0];
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * For the address field of store content type.
 */
function alshaya_white_label_preprocess_field__node__field_store_address__store(&$variables) {
  if (!empty($variables['items'])) {
    // Adding 'raw' filter for the html tags that show up.
    foreach ($variables['items'] as &$item) {
      $item['content']['#template'] = '{{ value|replace({"\n": "<br>"})|raw }}';
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function alshaya_white_label_preprocess_node(&$variables) {
  // Helper variables for multiple nodes.
  if (!empty($variables['elements']['#entity_type'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('entity--type-' . $variables['elements']['#entity_type']);
  }

  $variables['is_front'] = ($variables['view_mode'] == 'full' && \Drupal::service('path.matcher')->isFrontPage()) ? TRUE : FALSE;

  if ($variables['node']->bundle() == 'advanced_page') {
    $node = $variables['node']->toArray();
    // Check and set the "show_right_sidebar" variable, to show or hide sidebar.
    // This is a workaround, because of https://www.drupal.org/node/2864220.
    if (count($node['field_related_info']) >= 1) {
      $paragraph = Paragraph::load($node['field_related_info'][0]['target_id'])->toArray();
      if (!empty($paragraph['field_banner']) || !empty($paragraph['field_body']) || !empty($paragraph['field_title'])) {
        $variables['show_right_sidebar'] = TRUE;
      }
    }
  }
  elseif ($variables['node']->bundle() == 'acq_product' && $variables['elements']['#view_mode'] == 'product_list') {
    // Hide the node title on product list/search page.
    $variables['label'] = NULL;
  }
  elseif ($variables['node']->bundle() === 'acq_product') {
    $variables['attributes']['data-nid'] = $variables['node']->id();
  }

}

/**
 * Implements hook_form_alter().
 */
function alshaya_white_label_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'acq_checkout.form') {
    $suggestions[] = "form__checkout_form";
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
function alshaya_white_label_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $form['#theme'] = ['node_edit_form'];
  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type'       => 'container',
    '#group'      => 'advanced',
    '#weight'     => -100,
    'published'   => [
      '#type'       => 'html_tag',
      '#tag'        => 'h3',
      '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
      '#access'     => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed'     => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'entity-meta__last-saved',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author'      => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'author',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()
        ->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_form_alter().
 */
function alshaya_white_label_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case "views_exposed_form":
      // Adding Place holder on Search.
      if ($form['#id'] == 'views-exposed-form-search-page') {
        $form['keywords']['#attributes']['placeholder'] = t('search item or keyword');
      }
      break;

    case "user_login_form":
      $form['#attached']['library'][] = 'alshaya_white_label/unmask_password';
      break;

    case "change_pwd_form":
      $form['#attached']['library'][] = 'alshaya_white_label/unmask_password';
      break;

    case "user_register_form":
      if (\Drupal::moduleHandler()->moduleExists('alshaya_loyalty')) {
        if (isset($form['privilege_card_wrapper'])) {
          $prefix = $form['privilege_card_wrapper']['#prefix'];
          $suffix = $form['privilege_card_wrapper']['#suffix'];
          $prefix .= '<div class="privilege-card-wrapper">';
          $prefix .= '<div class="privilege-card-wrapper-title">' . t('Privilege card number (Optional)') . '</div>';
          $form['privilege_card_wrapper']['#prefix'] = $prefix;
          $form['privilege_card_wrapper']['#suffix'] = '</div>' . $suffix;
          $form['privilege_card_wrapper']['#title'] = t('Enter card details');
          $form['privilege_card_wrapper']['privilege_card_number']['#title'] = t('Privilege Card Number (optional)');
          $form['privilege_card_wrapper']['privilege_card_number2']['#title'] = t('Privilege Card Number');
        }
      }
      $form['#attached']['library'][] = 'alshaya_white_label/unmask_password';
      break;

    case "webform_submission_alshaya_contact_form":
      $form['#attached']['library'][] = 'alshaya_white_label/autosize_textarea';
      $form['elements']['message']['#rows'] = 1;
      $form['elements']['message']['#attributes']['maxlength'] = 220;
      break;
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_white_label_theme() {
  return [
    'customer_cart_form' => [
      'render element' => 'form',
      'path' => drupal_get_path('theme', 'alshaya_white_label') . '/templates/form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function alshaya_white_label_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $routmatch = \Drupal::routeMatch();
  if ($routmatch->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $routmatch->getParameter('taxonomy_term');
    if ($term->bundle() == 'acq_product_category') {
      $suggestions[] = 'page__plp';
    }
  }

  // For 404 page.
  if ($routmatch->getRouteName() == 'system.404') {
    $suggestions[] = 'page__404';
  }

  // Check if we are on node page.
  if ($routmatch->getRouteName() == 'entity.node.canonical') {
    $node = Drupal::request()->attributes->get('node');

    // For now we want to update only the department_page template.
    if ($node->bundle() == 'department_page') {
      $suggestions[] = 'page__department';
    }
    elseif ($node->bundle() == 'acq_product') {
      $suggestions[] = 'page__pdp';
    }
    elseif ($node->bundle() == 'acq_promotion') {
      $suggestions[] = 'page__plp';
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'page__front';
  }

  if ($routmatch->getRouteName() == 'alshaya_acm_customer.orders_print'
    || $routmatch->getRouteName() == 'alshaya_acm_customer.print_last_order') {
    $suggestions[] = 'page__orderprint';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_white_label_page_attachments_alter(array &$attachments) {
  // Get current route.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Routes from where we need to remove the 'back_to_top' button.
  $skip_back_to_top_routes = [
    'acq_checkout.form',
  ];

  if (in_array($route_name, $skip_back_to_top_routes)) {
    // If back_to_top library is added to page, remove it.
    if (in_array('back_to_top/back_to_top_js', $attachments['#attached']['library'])) {
      $index = array_search('back_to_top/back_to_top_js', $attachments['#attached']['library']);
      unset($attachments['#attached']['library'][$index]);
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function alshaya_white_label_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Check if the current node is front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'node__advanced_page_front';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function alshaya_white_label_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  // If 'acq_sku' entity with 'product_list' display mode.
  if ($element['#entity_type'] == 'acq_sku' && $element['#view_mode'] == 'product_list') {
    if (isset($element['#field_name'])) {
      // Hide/Remove all images except first.
      if ($element['#field_name'] == 'attr_image') {
        if (!empty($variables['items'])) {
          $variables['items'] = [$variables['items'][0]];
        }
      }

      // Added the currency label.
      if ($element['#field_name'] == 'price') {
        if (!empty($variables['items'])) {
          $price = $variables['items'][0]['content']['#context']['value'];
          $variables['items'][0]['content'] = [
            '#theme' => 'alshaya_acm_price',
            '#price' => $price,
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_user().
 */
function alshaya_white_label_preprocess_user(&$variables) {
  /* @var \Drupal\user\Entity\User $user */
  $user = $variables['user'];
  if ($user) {
    $mobile_util = \Drupal::getContainer()->get('mobile_number.util');
    $variables['email'] = $user->get('mail') ? $user->get('mail')->getValue()[0]['value'] : '';
    $variables['contact_number'] = UserCommunicationPreference::formatMobileNumber($mobile_util, $user, 1, TRUE);
    $privilege_card = $user->get('field_privilege_card_number') ? (!empty($user->get('field_privilege_card_number')->getValue()) ? $user->get('field_privilege_card_number')->getValue()[0]['value'] : '') : '';
    $variables['privilege_card'] = $privilege_card ? alshaya_loyalty_format_card_number($privilege_card, TRUE) : '';

    $module_handler = \Drupal::moduleHandler();
    if ($module_handler->moduleExists('alshaya_loyalty')) {
      // Get loyalty settings.
      $loyalty_settings = alshaya_loyalty_get_validation_settings();
      // If site has loyalty 'off'.
      if (!$loyalty_settings['enable_disable_loyalty']) {
        $variables['privilege_card'] = '';
      }
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_white_label_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'account') {
    // Get the current path.
    $current_path = \Drupal::routeMatch()->getRouteObject()->getPath();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      // If path is current_path, add active class.
      if ($item['url']->getRouteName() == 'user.page') {
        if (substr($current_path, 0, 6) === '/user/' || substr($current_path, 0, 9) === '/profile/') {
          $attributes = $item['url']->getOption('attributes');
          $attributes['class'][] = 'is-active';
          $item['url']->setOption('attributes', $attributes);
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function alshaya_white_label_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $routmatch = \Drupal::service('path.matcher');
  if ($routmatch->isFrontPage() && $variables['elements']['#plugin_id'] == 'system_branding_block') {
    $suggestions[] = "block__system_branding__home_block";
  }
}

/**
 * Implements THEMENAME_preprocess().
 */
function alshaya_white_label_preprocess(&$variables, $hook) {
  global $base_url;
  $variables['site_base_path'] = $base_url . '/';
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function alshaya_white_label_preprocess_views_view_unformatted__store_list(&$variables) {
  // If store finder's list view.
  if ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_1') {
    if (!empty($variables['rows'])) {
      foreach ($variables['rows'] as $key => $row) {
        /* @var \Drupal\node\Entity\Node $store_node */
        $store_node = $row['content']['#row']->_entity;
        $store_node = \Drupal::service('entity.repository')->getTranslationFromContext($store_node);
        if ($latitude_longitude = $store_node->get('field_latitude_longitude')) {
          $lat_lang_value = $latitude_longitude->getValue();
          $variables['rows'][$key]['lat_long'] = $lat_lang_value[0];
          $variables['rows'][$key]['nid'] = $store_node->id();
          $variables['rows'][$key]['title'] = $store_node->label();
          $variables['rows'][$key]['counter'] = $key + 1;
        }
      }
    }
  }
}

/**
 * Implements THEMENAME_preprocess_input().
 */
function alshaya_white_label_preprocess_input(&$variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    if ($element['#attributes']['data-twig-suggestion'] == 'userregisterformpassword') {
      // Get password tooltip content from config.
      $tooltip = \Drupal::config('alshaya_user.settings')
        ->get('password_tooltip.value');
      $variables['password_tooltip'] = $tooltip;
    }
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function alshaya_white_label_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    if ($element['#attributes']['data-twig-suggestion'] == 'userregisterformpassword') {
      $suggestions[] = 'input__' . $element['#attributes']['data-twig-suggestion'];
    }
    if ($element['#attributes']['data-twig-suggestion'] == 'addtocart') {
      $suggestions[] = 'input__add_to_cart';
    }
    if ($element['#attributes']['data-twig-suggestion'] == 'secure-checkout') {
      $suggestions[] = 'input__secure_checkout';
    }
    if ($element['#attributes']['data-twig-suggestion'] == 'newsletter') {
      $suggestions[] = 'input__newsletter_submit';
    }
  }
}

/**
 * Implements hook_preprocess_mimemail_messages().
 */
function alshaya_white_label_preprocess_mimemail_messages(&$variables) {
  $email_logo = alshaya_master_get_email_logo('alshaya_white_label');
  if (empty($email_logo['logo_url'])) {
    $email_logo['logo_url'] = file_create_url($email_logo['logo_path']);
  }
  $variables['email_logo'] = $email_logo['logo_url'];

  // Add website footer block information with UUID as this is the unique id
  // with different env.
  $block = \Drupal::service('plugin.manager.block')->createInstance('block_content:340b823b-e16c-457a-bc03-4a096f8ae171');
  $block_view = $block->build();
  $variables['email_footer'] = $block_view;
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function alshaya_white_label_preprocess_maintenance_page(&$variables) {
  $config = \Drupal::config('alshaya_master.maintenanace_404_settings');
  $maintenance_text = $config->get('maintenance_mode_rich_message');
  $image = $config->get('maintenance_mode_image');
  $variables['maintenance_text'] = $maintenance_text['value'];
  $variables['maintenance_image'] = '';
  if (!empty($image)) {
    if ($file = file_load($image)) {
      $variables['maintenance_image'] = file_create_url($file->getFileUri());
    }
  }
}

/**
 * Implements hook_preprocess_page__404().
 */
function alshaya_white_label_preprocess_page__404(&$variables) {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $config = \Drupal::config('alshaya_master.maintenanace_404_settings');
  $text_404 = $config->get('404_message');
  $image = $config->get('404_image.' . $langcode);
  $variables['message_404'] = $text_404['value'];
  $variables['image_404'] = '';
  if (!empty($image)) {
    if ($file = file_load($image)) {
      $variables['image_404'] = file_create_url($file->getFileUri());
    }
  }
}

/**
 * Implements hook_preprocess_facets_summary_item_list().
 */
function alshaya_white_label_preprocess_facets_summary_item_list(&$variables) {
  // Move clear-all link item to the end of the array & attach clear-all class.
  if (count($variables['items']) > 0) {
    $variables['items'][0]['attributes']->addClass('clear-all');
    $clear_all_item = $variables['items'][0];
    array_splice($variables['items'], 0, 1);
    $variables['items'][] = $clear_all_item;
  }
}

/**
 * Implements template_preprocess_form().
 */
function alshaya_white_label_preprocess_form(&$variables) {
  if ($variables['element']['#id'] === 'views-exposed-form-search-page') {
    $variables['attributes']['class'][] = 'views-exposed-form-search-page';
  }
  elseif (isset($variables['element']['field_address'])) {
    $variables['#attached']['library'][] = 'alshaya_white_label/convert_to_select2';
  }
}
