<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_html().
 */
function alshaya_white_label_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
  }
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
  // Update the meta to include noscalable for iphone.
  $html_head = &$variables['page']['#attached']['html_head'];
  foreach ($html_head as $index => $val) {
    if ($val[1] == 'viewport') {
      $html_head[$index][0]['#attributes']['content'] .= ', user-scalable=no';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function alshaya_white_label_preprocess_page(&$variables) {
  // Check if page is panel pages.
  $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($route_options['parameters']['page_manager_page'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-panel');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-standard');
  }
}

/**
 * Implements template_preprocess_block().
 */
function alshaya_white_label_preprocess_block(&$variables) {
  // Custom block type helper classes.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = Html::cleanCssIdentifier('block--' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
  }
}

/**
 * Implements template_view_alter().
 */
function alshaya_white_label_theme_suggestions_views_view_alter(array &$suggestions, &$variables) {
  if ($variables['view']->current_display == "block_product_slider") {
    $suggestions[] = 'views_view__product_slider';
  }
}

/**
 * Implements template_view_grid_alter().
 */
function alshaya_white_label_theme_suggestions_views_view_grid_alter(array &$suggestions, &$variables) {
  $routmatch = \Drupal::routeMatch();
  if ($routmatch->getRouteName() == 'entity.profile.type.address_book.user_profile_form') {
    $suggestions[] = "views_view_grid__address_book";
  }
}

/**
 * Implements template_view_unformatted_alter().
 */
function alshaya_white_label_theme_suggestions_views_view_unformatted_alter(array &$suggestions, &$variables) {
  if ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_3') {
    // If store finder list view.
    $suggestions[] = "views_view_unformatted__store_list";
  }
  elseif ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_2') {
    // If store finder glossary view.
    $suggestions[] = "views_view_unformatted__store_glossay_list";
  }
}

/**
 * Implements template_preprocess_profile().
 */
function alshaya_white_label_preprocess_profile__address_book(&$variables) {
  /* @var \Drupal\profile\Entity\Profile $profile */
  $profile = $variables['content']['field_address']['#object'];

  if ($profile) {
    $values = $profile->get('field_address')->getValue();
    $telephone = $profile->get('field_telephone')->getValue();
    $variables['delivery_to'] = '';
    $variables['delivery_address'] = '';
    $variables['contact_no'] = '';
  }

  // Contact info.
  if (isset($telephone[0]) && !empty($telephone[0]['value'])) {
    $variables['contact_no'] = $telephone[0]['value'];
  }

  if (isset($values[0])) {
    // If name is available.
    if (isset($values[0]['given_name']) && !empty($values[0]['given_name'])) {
      $variables['delivery_to'] = $values[0]['given_name'] . ' ' . $values[0]['family_name'];
    }

    // Get country list.
    $country_list = \Drupal::service('address.country_repository')->getList();

    // Address info.
    $variables['delivery_address'] = [
      'organization' => $values[0]['organization'],
      'address_line1' => $values[0]['address_line1'],
      'address_line2' => $values[0]['address_line2'],
      'postal_code' => $values[0]['postal_code'],
      'sorting_code' => $values[0]['sorting_code'],
      'dependent_locality' => $values[0]['dependent_locality'],
      'locality' => $values[0]['locality'],
      'administrative_area' => $values[0]['administrative_area'],
      'country' => $country_list[$values[0]['country_code']],
    ];

    // If profile is default profile.
    $variables['is_default_profile'] = $profile->isDefault() ?: '';

    // Operation links.
    $variables['edit_operation'] = '';
    $variables['delete_operation'] = '';
    $variables['set_default_operation'] = '';
    $current_user = \Drupal::currentUser();

    // Current language.
    $current_language = \Drupal::languageManager()->getCurrentLanguage();

    // Edit operation.
    if ($profile->access('update') && $profile->hasLinkTemplate('edit-form')) {
      $variables['edit_operation'] = [
        'title' => t('Edit'),
        'url' => $profile->urlInfo('edit-form', [
          'query' => [
            'destination' => Url::fromRoute("entity.profile.type.address_book.user_profile_form", ["user" => $current_user->id(), "profile_type" => "address_book"])->toString(),
          ],
          'language' => $current_language,
        ]),
      ];
    }

    // Delete operation.
    if ($profile->access('delete') && $profile->hasLinkTemplate('delete-form')) {
      $variables['delete_operation'] = [
        'title' => t('Delete'),
        'url' => $profile->urlInfo('delete-form', [
          'attributes' => [
            'class' => ['use-ajax'],
            'data-dialog-type' => 'modal',
            'data-dialog-options' => Json::encode(['width' => '341']),
          ],
          'language' => $current_language,
        ]),
      ];
    }

    // Primary address operation.
    if (!$profile->isDefault()) {
      $variables['set_default_operation'] = [
        'title' => t('Primary address'),
        'url' => $profile->toUrl('set-default', [
          'query' => [
            'destination' => Url::fromRoute("entity.profile.type.address_book.user_profile_form", ["user" => $current_user->id(), "profile_type" => "address_book"])->toString(),
          ],
        ]),
        'parameter' => $profile,
      ];
    }
  }

  $variables['#attached']['library'][] = 'modal/modal';
  $variables['#attached']['library'][] = 'core/drupal.ajax';
}

/**
 * Implements hook_preprocess_links__dropbutton__operations().
 */
function alshaya_white_label_preprocess_links__dropbutton__operations(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Unset/Remove operation links for address_book page.
  if ($route_name == 'entity.profile.type.address_book.user_profile_form' || $route_name == 'entity.profile.type.address_book.user_profile_form.add' || $route_name == 'entity.profile.edit_form') {
    unset($variables['links']);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function alshaya_white_label_preprocess_node(&$variables) {
  // Helper variables for multiple nodes.
  if (!empty($variables['elements']['#entity_type'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('entity--type-' . $variables['elements']['#entity_type']);
  }

  $variables['is_front'] = ($variables['view_mode'] == 'full' && \Drupal::service('path.matcher')->isFrontPage()) ? TRUE : FALSE;

  if ($variables['node']->bundle() == 'advanced_page') {
    $node = $variables['node']->toArray();
    // Check and set the "show_right_sidebar" variable, to show or hide sidebar.
    // This is a workaround, because of https://www.drupal.org/node/2864220.
    if (count($node['field_related_info']) >= 1) {
      $paragraph = Paragraph::load($node['field_related_info'][0]['target_id'])->toArray();
      if (!empty($paragraph['field_banner']) || !empty($paragraph['field_body']) || !empty($paragraph['field_title'])) {
        $variables['show_right_sidebar'] = TRUE;
      }
    }
  }
  elseif ($variables['node']->bundle() == 'acq_product' && $variables['elements']['#view_mode'] == 'product_list') {
    // Hide the node title on product list/search page.
    $variables['label'] = NULL;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
function alshaya_white_label_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $form['#theme'] = ['node_edit_form'];
  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type'       => 'container',
    '#group'      => 'advanced',
    '#weight'     => -100,
    'published'   => [
      '#type'       => 'html_tag',
      '#tag'        => 'h3',
      '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
      '#access'     => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed'     => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'entity-meta__last-saved',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author'      => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'author',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()
        ->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_form_alter().
 */
function alshaya_white_label_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case "views_exposed_form":
      // Adding Place holder on Search.
      if ($form['#id'] == 'views-exposed-form-search-page') {
        $form['keywords']['#attributes']['placeholder'] = t('search item or keyword');
      }
      break;

    case "user_login_form":
      $form['#attached']['library'] = ['alshaya_white_label/unmask_password'];
      break;

    case "change_pwd_form":
      $form['#attached']['library'] = ['alshaya_white_label/unmask_password'];
      break;

    case "user_register_form":
      if (\Drupal::moduleHandler()->moduleExists('alshaya_loyalty')) {
        $prefix = '<div class="privilege-card-wrapper">';
        $prefix .= '<div class="privilege-card-wrapper-title">' . t('Already a privilege club card member?') . '</div>';
        $form['privilege_card_wrapper']['#prefix'] = $prefix;
        $form['privilege_card_wrapper']['#suffix'] = '</div>';
        $form['privilege_card_wrapper']['#title'] = t('Enter card details');
        $form['privilege_card_wrapper']['privilege_card_number']['#title'] = t('Privilege Card Number (optional)');
        $form['privilege_card_wrapper']['privilege_card_number2']['#title'] = t('Privilege Card Number');
      }
      $form['#attached']['library'] = ['alshaya_white_label/unmask_password'];
      break;

    case "webform_submission_alshaya_contact_form":
      $form['#attached']['library'] = ['alshaya_white_label/autosize_textarea'];
      $form['elements']['message']['#rows'] = 1;
      $form['elements']['message']['#attributes']['maxlength'] = 220;
      break;
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_white_label_theme() {
  return [
    'customer_cart_form' => [
      'render element' => 'form',
      'path' => drupal_get_path('theme', 'alshaya_white_label') . '/templates/form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function alshaya_white_label_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $routmatch = \Drupal::routeMatch();
  if ($routmatch->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $routmatch->getParameter('taxonomy_term');
    if ($term->bundle() == 'acq_product_category') {
      $suggestions[] = 'page__plp';
    }
  }

  // Check if we are on node page.
  if ($routmatch->getRouteName() == 'entity.node.canonical') {
    $node = Drupal::request()->attributes->get('node');

    // For now we want to update only the department_page template.
    if ($node->bundle() == 'department_page') {
      $suggestions[] = 'page__department';
    }

    if ($node->bundle() == 'acq_product') {
      $suggestions[] = 'page__pdp';
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'page__front';
  }

  if ($routmatch->getRouteName() == 'alshaya_acm_customer.orders_print'
    || $routmatch->getRouteName() == 'alshaya_acm_customer.print_last_order') {
    $suggestions[] = 'page__orderprint';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_white_label_page_attachments_alter(array &$attachments) {
  // Get current route.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Routes from where we need to remove the 'back_to_top' button.
  $skip_back_to_top_routes = [
    'acq_checkout.form',
  ];

  if (in_array($route_name, $skip_back_to_top_routes)) {
    // If back_to_top library is added to page, remove it.
    if (in_array('back_to_top/back_to_top_js', $attachments['#attached']['library'])) {
      $index = array_search('back_to_top/back_to_top_js', $attachments['#attached']['library']);
      unset($attachments['#attached']['library'][$index]);
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function alshaya_white_label_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Check if the current node is front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'node__advanced_page_front';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function alshaya_white_label_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  // If 'acq_sku' entity with 'product_list' display mode.
  if ($element['#entity_type'] == 'acq_sku' && $element['#view_mode'] == 'product_list') {
    if (isset($element['#field_name'])) {
      // Hide/Remove all images except first.
      if ($element['#field_name'] == 'attr_image') {
        if (!empty($variables['items'])) {
          $variables['items'] = [$variables['items'][0]];
        }
      }

      // Added the currency label.
      if ($element['#field_name'] == 'price') {
        if (!empty($variables['items'])) {
          $price = $variables['items'][0]['content']['#context']['value'];
          $variables['items'][0]['content'] = [
            '#theme' => 'alshaya_acm_price',
            '#price' => $price,
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function alshaya_white_label_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();

  // If user/uid (My Account) page.
  if ($route_match->getRouteName() == 'entity.user.canonical') {
    /* @var \Drupal\user\Entity\User $user */
    $user = $route_match->getParameter('user');
    if ($user) {
      $variables['title'] = [
        '#markup' => t('My Account'),
      ];
    }
  }
  elseif ($route_match->getRouteName() == 'entity.user.edit_form') {
    $user = $route_match->getParameter('user');
    if ($user) {
      $variables['title'] = [
        '#markup' => t('Contact Details'),
      ];
    }
  }

  // Change page title if address book page.
  if ($route_match->getRouteName() == 'entity.profile.type.address_book.user_profile_form') {
    $variables['title'] = [
      '#markup' => t('Address Book'),
    ];
  }

  // Change page title for change password form.
  if ($route_match->getRouteName() == 'change_pwd_page.change_password_form') {
    $variables['title'] = [
      '#markup' => t('change password'),
    ];
  }
}

/**
 * Implements hook_preprocess_user().
 */
function alshaya_white_label_preprocess_user(&$variables) {
  /* @var \Drupal\user\Entity\User $user */
  $user = $variables['user'];
  if ($user) {
    $variables['email'] = $user->get('mail') ? $user->get('mail')->getValue()[0]['value'] : '';
    $variables['contact_number'] = $user->get('field_mobile_number') ? (!empty($user->get('field_mobile_number')->getValue()) ? $user->get('field_mobile_number')->getValue()[0]['value'] : '') : '';
    $variables['privilege_card'] = $user->get('field_privilege_card_number') ? (!empty($user->get('field_privilege_card_number')->getValue()) ? $user->get('field_privilege_card_number')->getValue()[0]['value'] : '') : '';
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_white_label_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'account') {
    // Get the current path.
    $current_path = \Drupal::routeMatch()->getRouteObject()->getPath();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      // If path is current_path, add active class.
      if ($item['url']->getRouteName() == 'user.page') {
        if (substr($current_path, 0, 6) === '/user/' || substr($current_path, 0, 9) === '/profile/') {
          $attributes = $item['url']->getOption('attributes');
          $attributes['class'][] = 'is-active';
          $item['url']->setOption('attributes', $attributes);
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function alshaya_white_label_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $routmatch = \Drupal::service('path.matcher');
  if ($routmatch->isFrontPage() && $variables['elements']['#plugin_id'] == 'system_branding_block') {
    $suggestions[] = "block__system_branding__home_block";
  }
}

/**
 * Implements THEMENAME_preprocess().
 */
function alshaya_white_label_preprocess(&$variables, $hook) {
  global $base_url;
  $variables['site_base_path'] = $base_url . '/';
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function alshaya_white_label_preprocess_views_view_unformatted__store_list(&$variables) {
  // If store finder's list view.
  if ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_3') {
    if (!empty($variables['rows'])) {
      foreach ($variables['rows'] as $key => $row) {
        if ($latitude_longitude = $row['content']['#row']->_entity->get('field_latitude_longitude')) {
          $lat_lang_value = $latitude_longitude->getValue();
          $variables['rows'][$key]['lat_long'] = $lat_lang_value[0];
          $variables['rows'][$key]['nid'] = $row['content']['#row']->_entity->id();
        }
      }
    }
    $variables['store_map'] = views_embed_view('stores_finder', 'block_1');
  }
}
