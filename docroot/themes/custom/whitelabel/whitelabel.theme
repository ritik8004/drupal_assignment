<?php

/**
 * @file
 * Functions to support theming in the whitelabel theme.
 */

use Drupal\block\Entity\Block;

/**
 * Implements hook_library_info_alter().
 */
function whitelabel_library_info_alter(&$libraries, $extension) {
  $language_manager = \Drupal::service('language_manager');
  $language = $language_manager->getCurrentLanguage();
  $direction = $language->getDirection();

  if ($extension === 'victoria_secret' && $direction === 'rtl') {
    foreach ($libraries as $library_name => $library_value) {
      if (!empty($library_value['css'])) {
        foreach ($library_value['css'] as $css_type => $css_files) {
          foreach ($library_value['css'][$css_type] as $file_name => $file_options) {
            if (strpos($file_name, '.ltr.css')) {
              $file_name_rtl = str_replace(".ltr.css", ".rtl.css", $file_name);
              unset($libraries[$library_name]['css'][$css_type][$file_name_rtl]);
              $libraries[$library_name]['css'][$css_type][$file_name_rtl] = [$file_options];
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function whitelabel_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'custom_logo_block':
      $variables['site_logo'] = '';
      if ($variables['content']['site_logo']['#access']) {
        $variables['site_link'] = $variables['content']['target_link']['#url'];
        $variables['site_logo_title'] = $variables['content']['target_link']['#title'];
      }
      break;

    case 'system_menu_block':
      if ($variables['elements']['#id'] == 'main_navigation_level2') {
        $variables['content']['#attributes']['class'][] = 'navigation__sub-menu';
        $variables['content']['#attached']['library'][] = 'whitelabel/menu-sub-navigation';
      }
      elseif ($variables['elements']['#id'] == 'main_navigation') {
        $variables['content']['#attributes']['class'][] = 'menu-logo-navigation';
        $variables['content']['#attached']['library'][] = 'whitelabel/menu-logo-navigation';
      }
  }
}

/**
 * Implements hook_preprocess_link().
 */
function whitelabel_preprocess_links__language_block(&$variables) {
  $language_manager = \Drupal::service('language_manager');
  $language = $language_manager->getCurrentLanguage();
  $language_id = $language->getId();

  foreach ($variables['links'] as $link => $link_data) {
    if ($link === $language_id) {
      $variables['links'][$link]['attributes']['class'][] = 'is-hidden';
    }
    else {
      $variables['links'][$link]['attributes']['class'][] = 'is-active';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function whitelabel_preprocess_page(&$variables) {
  $route = \Drupal::routeMatch();
  $route_name = $route->getRouteName();

  switch ($route_name) {
    case 'alshaya_master.home':
      $variables['attributes']['class'][] = 'page-home';
      break;

    case 'view.stores_finder.page_2':
      $variables['attributes']['class'][] = 'page-store-finder';
      break;
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $node_bundle = $node->bundle();
    $variables['attributes']['class'][] = str_replace('_', '-', 'node-' . $node_bundle);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function whitelabel_preprocess_node(&$variables) {
  $node_bundle = $variables['node']->bundle();
  $view_mode = $variables['view_mode'];
  switch ($node_bundle) {
    case 'advanced_page':
      $variables['content']['field_promo_blocks']['#attributes']['class'][] = 'field-promo-block';
      break;
  }

  if ($node_bundle === 'product' && $view_mode === 'search_result') {
    $variables['share_label'] = t('Share');
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function whitelabel_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $machine_name = $variables['elements']['#id'];
  $base_plugin_id = $variables['elements']['#base_plugin_id'];
  $suggestions[] = 'block__' . $machine_name;

  switch ($base_plugin_id) {
    case 'alshaya_stores_finder':
      $block_region = Block::load($machine_name)->getRegion();
      if (strpos($block_region, 'footer') !== FALSE) {
        $suggestions[] = 'block__alshaya_stores_finder_footer';
      }
      break;

    case 'system_menu_block':
      $plugin_id = $variables['elements']['#plugin_id'];
      $label = $variables['elements']['#configuration']['label'];

      if ($plugin_id == 'system_menu_block:main' && strpos($label, 'Main navigation') !== FALSE) {
        $level = $variables['elements']['#configuration']['level'];
        if ($level == 1) {
          $suggestions[] = 'block__alshaya_main_menu_1';
          break;
        }
        elseif ($level == 2) {
          $suggestions[] = 'block__alshaya_main_menu_2';
          break;
        }
      }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function whitelabel_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  switch ($view_id) {
    case 'stores_finder':
      if ($variables['view']->current_display == 'page_2') {
        $suggestions[] = 'views_view__store_finder_glossary';
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function whitelabel_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  switch ($view_id) {
    case 'stores_finder':
      if ($variables['view']->current_display == 'page_2') {
        $suggestions[] = 'views_view_unformatted__store_finder_glossary';
      }
      elseif ($variables['view']->current_display == 'page_1') {
        $suggestions[] = "views_view_unformatted__store_list";
      }
      break;

    case 'product_list':
      $suggestions[] = 'views_view_unformatted__product_list';
      break;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function whitelabel_preprocess_field__node__field_store_open_hours__store(&$variables) {
  if ($lat_lng = $variables['element']['#object']->get('field_latitude_longitude')) {
    $variables['lat_lng'] = $lat_lng[0];
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function whitelabel_preprocess_views_view_field__stores_finder__page_1__field_store_open_hours(&$variables) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function whitelabel_preprocess_views_view_field__stores_finder__page_3__field_store_open_hours(&$variables) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function whitelabel_preprocess_views_view_field__stores_finder__attachment_1__field_store_open_hours(&$variables) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function whitelabel_preprocess_views_view_unformatted__store_list(&$variables) {
  // If store finder's list view.
  if ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_1') {
    if (!empty($variables['rows'])) {
      foreach ($variables['rows'] as $key => $row) {
        /* @var \Drupal\node\Entity\Node $store_node */
        $store_node = $row['content']['#row']->_entity;
        $store_node = \Drupal::service('entity.repository')->getTranslationFromContext($store_node);
        if ($latitude_longitude = $store_node->get('field_latitude_longitude')) {
          $lat_lang_value = $latitude_longitude->getValue();
          $variables['rows'][$key]['lat_long'] = $lat_lang_value[0];
          $variables['rows'][$key]['nid'] = $store_node->id();
          $variables['rows'][$key]['title'] = $store_node->label();
          $variables['rows'][$key]['counter'] = $key + 1;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function whitelabel_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'] = 'page--title';
}

/**
 * Implements hook_theme_preprocess_form_element().
 */
function whitelabel_preprocess_form_element(array &$variables) {
  $element = $variables['element'];
  $variables['is_default_form'] = FALSE;
  if ($element['#type'] == 'checkbox') {
    $variables['is_checkbox'] = TRUE;
  }
  else {
    $variables['is_checkbox'] = FALSE;
  }

  // Remove generic input if form elements hidden.
  $classes = $variables['element']['#attributes']['class'];
  if (isset($classes)) {
    foreach ($classes as $class) {
      if (strpos($class, 'hidden') !== FALSE) {
        $variables['is_default_form'] = TRUE;
      }
    }
  }
  // Remove generic input styles on the following form elements.
  if ($variables['element']['#attributes']['id'] === 'edit-geolocation-geocoder-google-places-api') {
    $variables['is_default_form'] = TRUE;
  }
}

/**
 * Implements hook_form_alter().
 */
function whitelabel_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login_form' || $form_id == 'user_register_form') {
    $form['actions']['submit']['#attributes']['class'][] = 'button--form-submit';
  }
}
