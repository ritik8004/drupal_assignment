<?php

/**
 * @file
 * Functions to support theming in the whitelabel theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_css_alter().
 */
function whitelabel_css_alter(&$css, $assets) {
  $language_manager = \Drupal::service('language_manager');
  $language = $language_manager->getCurrentLanguage();
  $direction = $language->getDirection();

  // We don't do anything for ltr languages.
  if ($direction == 'ltr') {
    return;
  }

  foreach ($css as $name => $data) {
    if (strpos($name, '.ltr.') && isset($data['data'])) {
      $data['data'] = str_replace('.ltr.', '.rtl.', $data['data']);
      $css[str_replace('.ltr.', '.rtl.', $name)] = $data;
      unset($css[$name]);
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function whitelabel_page_attachments_alter(&$attachments) {
  $language_manager = \Drupal::service('language_manager');
  $language = $language_manager->getCurrentLanguage();
  $direction = $language->getDirection();

  // If language direction is ltr, we attach an empty library
  // so we are sure the list of libraries differs from rtl pages.
  // It is required as AssetResolver::getCssAssets() which
  // transforms the attached libraries in css files and uses
  // the libraries key to generate a cache ID. As we are overriding
  // the css files for rtl languages, we must be sure the list
  // of libraries differs depending on the language direction
  // so the cache ID is different.
  if ($direction == 'ltr') {
    $attachments['#attached']['library'][] = 'whitelabel/ltr';
  }
}

/**
 * Implements hook_preprocess_block().
 */
function whitelabel_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'custom_logo_block':
      $variables['site_logo'] = '';
      if ($variables['content']['site_logo']['#access']) {
        $variables['site_link'] = $variables['content']['target_link']['#url'];
        $variables['site_logo_title'] = $variables['content']['target_link']['#title'];
      }
      break;

    case 'system_menu_block':
      if ($variables['elements']['#id'] == 'main_navigation') {
        $variables['content']['#attributes']['twig_suggestion'] = 'menu-main-main';
        $variables['content']['#attributes']['class'][] = 'menu-logo-navigation';
        $variables['content']['#attached']['library'][] = 'whitelabel/menu-logo-navigation';
      }
      break;

    case 'custom_child_menu_block':
      $variables['content']['#attributes']['twig_suggestion'] = 'menu-main-sub';
      $variables['content']['#attributes']['class'][] = 'navigation__sub-menu burger-sub-menu';
      $variables['content']['#attached']['library'][] = 'whitelabel/menu-sub-navigation';
      break;
  }

  $elements_id = $variables['elements']['#id'] ?? '';
  $block_content = NULL;
  if (str_contains($elements_id, 'block_content')) {
    $block_content = $variables['content']['#block_content'];
    $machine_name = $block_content->get('machine_name')->value;
  }
  else {
    $machine_name = $elements_id;
  }

  $link_options = [];
  $lang_code = NULL;
  if (in_array($machine_name, ['todaysoffer', 'today_s_offer'])) {
    $lang = \Drupal::languageManager()->getCurrentLanguage();
    $lang_code = $lang->getId();
    $link_options = ['language' => $lang];
    $variables['#cache']['contexts'][] = 'session';
  }

  $element = [];
  if ($machine_name == 'todaysoffer') {

    if ($variables['content']) {
      // Make label a link to redirect to today's offer page on mobile.
      $label = $variables['label'];
      $element['label'] = [
        '#type' => 'link',
        '#title' => $label,
        '#url' => Url::fromUri('internal:/todays-offer', $link_options),
        '#options' => [
          'attributes' => [
            'class' => ['mobile-link'],
          ],
        ],
      ];

      // Change default label with link.
      $variables['label'] = [
        '#markup' => \Drupal::service('renderer')->render($element),
      ];
    }
  }

  if ($machine_name == 'today_s_offer') {
    if ($variables['content']) {
      // If the block is added to block reference paragraph type.
      if ($machine_name != $block_content) {
        // Get the referer path.
        $referrer_path = parse_url(\Drupal::request()->headers->get('referer'))['path'];
        $referrer_path = preg_replace('/^(\/' . $lang_code . ')(.*)/g', '', $referrer_path);
        $empty = !empty($referrer_path) ? $referrer_path : 'home';

        // Create the back link.
        $element['back'] = [
          '#type' => 'link',
          '#title' => t('Back'),
          '#url' => Url::fromUri('internal:/' . $empty, $link_options),
          '#options' => [
            'attributes' => [
              'class' => ['mobile-back-link'],
            ],
          ],
        ];
      }
    }
  }

  // Check if the page is front or not.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception) {
    $variables['is_front'] = FALSE;
  }
  // Ensure the cache varies correctly (new in Drupal 8.3).
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Implements hook_preprocess_link().
 */
function whitelabel_preprocess_links__language_block(&$variables) {
  $language_manager = \Drupal::service('language_manager');
  $language = $language_manager->getCurrentLanguage();
  $language_id = $language->getId();

  foreach ($variables['links'] as $link => $link_data) {
    if ($link === $language_id) {
      $variables['links'][$link]['attributes']['class'][] = 'is-hidden';
    }
    else {
      $variables['links'][$link]['attributes']['class'][] = 'is-active';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function whitelabel_preprocess_page(&$variables) {
  $route = \Drupal::routeMatch();
  $route_name = $route->getRouteName();

  switch ($route_name) {
    case 'alshaya_master.home':
      $variables['attributes']['class'][] = 'page-home';
      break;

    case 'view.stores_finder.page_2':
      $variables['attributes']['class'][] = 'page-store-finder';
      break;
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $node_bundle = $node->bundle();
    $variables['attributes']['class'][] = str_replace('_', '-', 'node-' . $node_bundle);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function whitelabel_preprocess_node(&$variables) {
  $node_bundle = $variables['node']->bundle();
  $view_mode = $variables['view_mode'];
  switch ($node_bundle) {
    case 'advanced_page':
      $variables['content']['field_promo_blocks']['#attributes']['class'][] = 'field-promo-block';
      // Remove wrapper html for banner, slider, delivery banner
      // if they are empty.
      if (empty($variables['content']['field_banner']['#items'])) {
        unset($variables['content']['field_banner']);
      }
      if (empty($variables['content']['field_slider']['#items'])) {
        unset($variables['content']['field_slider']);
      }
      if (empty($variables['content']['field_delivery_banner']['#items'])) {
        unset($variables['content']['field_delivery_banner']);
      }
      break;
  }

  if ($node_bundle === 'product' && $view_mode === 'search_result') {
    $variables['share_label'] = t('share');
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function whitelabel_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!isset($variables['elements']['#id'])) {
    return;
  }

  $machine_name = $variables['elements']['#id'];
  $base_plugin_id = $variables['elements']['#base_plugin_id'];
  $suggestions[] = 'block__' . $machine_name;

  switch ($base_plugin_id) {
    case 'alshaya_stores_finder':
      $block_region = Block::load($machine_name)->getRegion();
      if (str_contains($block_region, 'footer')) {
        $suggestions[] = 'block__alshaya_stores_finder_footer';
      }
      break;

    case 'system_menu_block':
      $plugin_id = $variables['elements']['#plugin_id'];
      $label = $variables['elements']['#configuration']['label'];

      if ($plugin_id == 'system_menu_block:main' && str_contains($label, 'Main navigation')) {
        $level = $variables['elements']['#configuration']['level'];
        if ($level == 1) {
          $suggestions[] = 'block__alshaya_main_menu_1';
          break;
        }
        break;
      }

    case 'custom_child_menu_block':
      $level = $variables['elements']['#configuration']['level'];
      if ($level == 2) {
        $suggestions[] = 'block__alshaya_main_menu_2';
        break;
      }
      break;
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function whitelabel_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  switch ($view_id) {
    case 'stores_finder':
      if ($variables['view']->current_display == 'page_2') {
        $suggestions[] = 'views_view__store_finder_glossary';
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function whitelabel_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  switch ($view_id) {
    case 'stores_finder':
      if ($variables['view']->current_display == 'page_2') {
        $suggestions[] = 'views_view_unformatted__store_finder_glossary';
      }
      elseif ($variables['view']->current_display == 'page_1') {
        $suggestions[] = "views_view_unformatted__store_list";
      }
      break;

    case 'product_list':
      $suggestions[] = 'views_view_unformatted__product_list';
      break;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function whitelabel_preprocess_field__node__field_store_open_hours__store(&$variables) {
  if ($lat_lng = $variables['element']['#object']->get('field_latitude_longitude')) {
    $variables['lat_lng'] = $lat_lng[0];
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function whitelabel_preprocess_views_view_field__stores_finder__page_1__field_store_open_hours(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function whitelabel_preprocess_views_view_field__stores_finder__page_3__field_store_open_hours(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function whitelabel_preprocess_views_view_field__stores_finder__attachment_1__field_store_open_hours(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['row']->_entity;
  $node = \Drupal::service('entity.repository')->getTranslationFromContext($node);
  $output = $node->field_store_open_hours->view('default');
  $variables['output'] = $output;
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function whitelabel_preprocess_views_view_unformatted__store_list(&$variables) {
  // If store finder's list view.
  if ($variables['view']->id() == 'stores_finder' && $variables['view']->current_display == 'page_1') {
    if (!empty($variables['rows'])) {
      foreach ($variables['rows'] as $key => $row) {
        /** @var \Drupal\node\Entity\Node $store_node */
        $store_node = $row['content']['#row']->_entity;
        $store_node = \Drupal::service('entity.repository')->getTranslationFromContext($store_node);
        if ($latitude_longitude = $store_node->get('field_latitude_longitude')) {
          $lat_lang_value = $latitude_longitude->getValue();
          $variables['rows'][$key]['lat_long'] = $lat_lang_value[0];
          $variables['rows'][$key]['nid'] = $store_node->id();
          $variables['rows'][$key]['title'] = $store_node->label();
          $variables['rows'][$key]['counter'] = $key + 1;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function whitelabel_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'] = 'page--title';
}

/**
 * Implements hook_theme_preprocess_form_element().
 */
function whitelabel_preprocess_form_element(array &$variables) {
  $element = $variables['element'];
  $variables['is_default_form'] = FALSE;
  if ($element['#type'] == 'checkbox') {
    $variables['is_checkbox'] = TRUE;
  }
  else {
    $variables['is_checkbox'] = FALSE;
  }

  // Remove generic input if form elements hidden.
  if (!empty($variables['element']['#attributes'])) {
    $classes = $variables['element']['#attributes']['class'];
    if (isset($classes)) {
      foreach ($classes as $class) {
        if (str_contains($class, 'hidden')) {
          $variables['is_default_form'] = TRUE;
        }
      }
    }

    // Remove generic input styles on the following form elements.
    if (!empty($variables['element']['#attributes']['id']) && $variables['element']['#attributes']['id'] === 'edit-geolocation-geocoder-google-places-api') {
      $variables['is_default_form'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
// phpcs:ignore
function whitelabel_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form' || $form_id == 'user_register_form') {
    $form['actions']['submit']['#attributes']['class'][] = 'button--form-submit';
  }
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function whitelabel_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes'])) {
    if (isset($variables['attributes']['twig_suggestion'])) {
      if ($variables['attributes']['twig_suggestion'] === 'menu-main-main') {
        $suggestions[] = 'menu__main_main';
      }
      elseif ($variables['attributes']['twig_suggestion'] === 'menu-main-sub') {
        $suggestions[] = 'menu__main_sub';
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function whitelabel_preprocess_html(&$variables) {
  // Update the meta to include noscalable for iphone.
  $html_head = &$variables['page']['#attached']['html_head'];
  foreach ($html_head as $index => $val) {
    if ($val[1] == 'viewport') {
      $html_head[$index][0]['#attributes']['content'] .= ', user-scalable=no';
    }
  }

  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path_alias.manager')
    ->getAliasByPath($path), '/');
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && !str_starts_with($alias_class, 'node')) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
  // Update the meta to include noscalable for iphone.
  $html_head = &$variables['page']['#attached']['html_head'];
  foreach ($html_head as $index => $val) {
    if ($val[1] == 'viewport') {
      $html_head[$index][0]['#attributes']['content'] .= ', user-scalable=no';
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function whitelabel_preprocess_paragraph(&$variables) {
  if ($variables['elements']['#paragraph']->getType() == 'promo_block') {
    // Get the promo block display config for twig file.
    $para_config = \Drupal::config('alshaya_paragraphs.paragraphs_custom_config');
    $variables['promo_link'] = $para_config->get('promo_block_display');
    if ($variables['promo_link'] == 1) {
      // Set variable to make whole promo block clickable.
      if ($variables['elements']['field_promo_block_button'][0]['#paragraph']) {
        $button_link = $variables['elements']['field_promo_block_button'][0]['#paragraph']->get('field_button_link')->getValue();
        $variables['button_link'] = Url::fromUri($button_link[0]['uri'])->toString();
      }
    }
  }
  elseif ($variables['elements']['#paragraph']->getType() == 'promo_block_button') {
    // Get the promo block display config for twig file.
    $para_config = \Drupal::config('alshaya_paragraphs.paragraphs_custom_config');
    $variables['promo_link'] = $para_config->get('promo_block_display');
    if ($variables['promo_link'] == 1) {
      // Get button text and set as markup.
      $variables['button_text']['#markup'] = $variables['elements']['field_button_link'][0]['#title'];
    }
  }
}
