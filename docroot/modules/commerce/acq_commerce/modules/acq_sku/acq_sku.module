<?php

/**
 * @file
 * Acquia Commerce product module file.
 *
 * Provides base hooks to the product functionality of Acquia Commerce
 * connector.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function acq_sku_theme($existing, $type, $theme, $path) {
  return [
    'acq_sku' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function acq_sku_preprocess_acq_sku(&$variables) {
  /** @var Drupal\acq_commerce\SKUInterface $sku */
  $sku = $variables['elements']['#acq_sku'];

  $variables['sku_entity'] = $sku;
  $variables['sku_url'] = $sku->toUrl();
  $variables['sku'] = [];

  foreach (Element::children($variables['elements']) as $key) {
    $variables['sku'][$key] = $variables['elements'][$key];
  }
}

/**
 * Function to allow custom modules to add base fields for acq_sku entity type.
 *
 * @param array $fields
 *   An associative array containing field_machine_name as key and following
 *   data in value:
 *   - parent: (Required) Parent key in the array where to look for data.
 *   - label: (Required) Label to be used for admin forms and display.
 *   - description: Description of the field to be used in admin forms.
 *   - cardinality: Number of values allowed to be stored.
 *   - type: Type of the field.
 *   - weight: Default weight of the field in form and display.
 *   - configurable: Whether the field is part of configurable options.
 *   - visible_view: Whether the field should be visible while viewing content.
 *   - visible_form: Whether the field should be visible in form.
 *   - serialize: (Optional) Should the data be stored as serialized.
 */
function acq_sku_add_base_fields(array $fields) {
  // Get the fields from config.
  $configFactory = \Drupal::configFactory()->getEditable('acq_sku.base_field_additions');
  $additionalFields = $configFactory->getRawData();

  // Initialise with array if required.
  $additionalFields = empty($additionalFields) || !is_array($additionalFields) ? [] : $additionalFields;

  foreach ($fields as $machine_name => $field) {
    // Confirm we have minimum required data available to create the fields.
    if (empty($field['label'])) {
      throw new \Exception('Field Label cannot be empty.');
    }

    // Check if the field is already available in config.
    if (isset($additionalFields[$machine_name])) {
      throw new \Exception('Field machine name used already.');
    }

    // Add the field to storedFields so we store them to config.
    $additionalFields[$machine_name] = $field;
  }

  // Store the fields in config.
  $configFactory->setData($additionalFields)->save();

  // Apply entity updates.
  \Drupal::service("entity.definition_update_manager")->applyUpdates();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function acq_sku_theme_suggestions_acq_sku(array $variables) {
  $suggestions = [];
  $sku = $variables['elements']['#acq_sku'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'acq_sku__' . $sanitized_view_mode;
  $suggestions[] = 'acq_sku__' . $sku->bundle();
  $suggestions[] = 'acq_sku__' . $sku->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'acq_sku__' . $sku->id();
  $suggestions[] = 'acq_sku__' . $sku->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Helper function to get cache id for sku stock.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU Entity object.
 *
 * @return string
 *   Cache id.
 */
function acq_sku_get_stock_cache_id(SKU $sku_entity) {
  return 'stock:' . $sku_entity->language()->getId() . ':' . $sku_entity->id();
}

/**
 * Checks the stock for the given sku.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU Entity object.
 *
 * @return array|mixed
 *   Available stock detail.
 *
 * @throws \Exception
 */
function acq_sku_get_sku_stock(SKU $sku_entity, $reset = FALSE) {
  try {
    // Cache id.
    $cid = acq_sku_get_stock_cache_id($sku_entity);

    $cache = \Drupal::cache('stock')->get($cid);

    // If information is cached.
    if (!$reset && !empty($cache)) {
      $stock = $cache->data;
    }
    else {
      /** @var \Drupal\acq_commerce\Conductor\APIWrapper $api_wrapper */
      $api_wrapper = \Drupal::service('acq_commerce.api');

      // Update API context to match the store id with requested langcode.
      $api_wrapper->updateStoreContext(acq_commerce_get_store_id_from_langcode($sku_entity->language()->getId()));

      // Get the stock.
      $stock = $api_wrapper->skuStockCheck($sku_entity->getSku());

      // If cache multiplier is zero we don't cache the stock.
      if ($cache_multiplier = \Drupal::config('acq_sku.settings')->get('stock_cache_multiplier')) {
        $default_cache_lifetime = $stock['quantity'] ? $stock['quantity'] * $cache_multiplier : $cache_multiplier;
        $max_cache_lifetime = \Drupal::config('acq_sku.settings')->get('stock_cache_max_lifetime');

        // Calculate the timestamp when we want the cache to expire.
        $stock_cache_lifetime = max($default_cache_lifetime, $max_cache_lifetime);
        $expire = $stock_cache_lifetime + \Drupal::time()->getRequestTime();

        // Set the stock in cache.
        \Drupal::cache('stock')->set($cid, $stock, $expire);
      }
    }
  }
  catch (ConductorException $e) {
    // Log the stock error, do not throw error if stock info is missing.
    \Drupal::logger('acq_sku')->emergency('Unable to get the stock for @sku : @message', ['@sku' => $sku_entity->getSku(), '@message' => $e->getMessage()]);
  }

  return $stock;
}
