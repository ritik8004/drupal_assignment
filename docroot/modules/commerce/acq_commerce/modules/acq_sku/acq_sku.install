<?php

/**
 * @file
 * Contains install hooks for acq_sku.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\acq_sku\ConductorCategorySyncHelper;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_update_N().
 *
 * Adding a custom table "product_attribute_options_missing".
 */
function acq_sku_update_8027() {
  $schema = acq_sku_schema();
  if (\Drupal::database()->schema()->tableExists('product_attribute_options_missing')) {
    \Drupal::database()->schema()->dropTable('product_attribute_options_missing');
  }
  \Drupal::database()->schema()->createTable('product_attribute_options_missing', $schema['product_attribute_options_missing']);
}

/**
 * Implements hook_update_N().
 *
 * Make crosssell, upsell, related fields non-translatable.
 */
function acq_sku_update_8026() {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = ['crosssell', 'upsell', 'related'];
  foreach ($fields as $field) {
    // Update fields definition.
    $storage_definition = $manager->getFieldStorageDefinition($field, 'acq_sku');
    $storage_definition->setTranslatable(FALSE);
    $manager->updateFieldStorageDefinition($storage_definition);
  }
}

/**
 * Set non_cli_image_download.
 */
function acq_sku_update_8025() {
  $config = \Drupal::configFactory()->getEditable('acq_sku.settings');
  $config->set('non_cli_image_download', 0)->save();
}

/**
 * Implements hook_update_N().
 *
 * Adding index 'acq_sku_sku_defaultlangcode' on acq_sku_field_data table.
 */
function acq_sku_update_8024() {
  $index = 'acq_sku_sku_defaultlangcode';
  $data = _acq_sku_indexes()[$index];
  if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
    \Drupal::database()
      ->schema()
      ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Creates new table 'category_sync_process' for category push mode sync.
 */
function acq_sku_update_8023() {
  $schema = acq_sku_schema();

  \Drupal::database()
    ->schema()
    ->createTable(
      ConductorCategorySyncHelper::TABLE_NAME,
      $schema[ConductorCategorySyncHelper::TABLE_NAME]
    );
}

/**
 * Implements hook_update_N().
 *
 * Update description for field_category_include_menu.
 */
function acq_sku_update_8022() {
  $field_config = FieldConfig::loadByName('taxonomy_term', 'acq_product_category', 'field_category_include_menu');
  $field_config->setDescription('Check to display this term in main menu.');
  $field_config->save();
}

/**
 * Implements hook_update_N().
 *
 * Make field_acq_sku_promotions non-translatable.
 */
function acq_sku_update_8021() {
  $field_storage = FieldStorageConfig::loadByName('acq_sku', 'field_acq_sku_promotions');
  $field_storage->setTranslatable(FALSE);
  $field_storage->save();

  $field = FieldConfig::loadByName('acq_sku', 'configurable', 'field_acq_sku_promotions');
  $field->setTranslatable(FALSE);
  $field->save();
}

/**
 * Implements hook_update_N().
 *
 * Remove stock status and quantity fields from sku views.
 */
function acq_sku_update_8020() {
  $config = \Drupal::configFactory()->getEditable('views.view.manage_skus');
  $fields = $config->get("display.default.display_options.fields");
  unset($fields['stock_status'], $fields['stock_quantity']);
  $config->set("display.default.display_options.fields", $fields);
  $config->save(TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Manage stock through separate module acq_sku_stock.
 */
function acq_sku_update_8018() {
  \Drupal::service('module_installer')->install(['acq_sku_stock']);

  $db = \Drupal::database();

  // Copy existing stock data from SKU entity to new table.
  $query = $db->select('acq_sku_field_data', 'sku');
  $query->fields('sku', ['sku', 'stock']);
  $result = $query->execute()->fetchAllAssoc('sku');

  // To start with we will let everything be handled by quantity only.
  foreach ($result as $row) {
    $db->merge('acq_sku_stock')
      ->key(['sku' => $row->sku])
      ->fields([
        'quantity' => $row->stock,
        'status' => 1,
      ])
      ->execute();
  }

  // Apply updates to remove stock field.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Implements hook_update_N().
 *
 * Make field_configured_skus non-translatable.
 */
function acq_sku_update_8017() {
  $field_storage = FieldStorageConfig::loadByName('acq_sku', 'field_configured_skus');
  $field_storage->setTranslatable(FALSE);
  $field_storage->save();

  $field = FieldConfig::loadByName('acq_sku', 'configurable', 'field_configured_skus');
  $field->setTranslatable(FALSE);
  $field->save();
}

/**
 * Implements hook_update_N().
 *
 * Make price, final_price and special_price non-translatable.
 */
function acq_sku_update_8016() {
  \Drupal::entityDefinitionUpdateManager()->applyUpdates();
}

/**
 * Implements hook_update_N().
 *
 * Remove join index on acq_sku__attributes.
 */
function acq_sku_update_8015() {
  \Drupal::database()->schema()->dropIndex('acq_sku__attributes', 'acq_sku__attr_join');
  \Drupal::database()->schema()->dropIndex('acq_sku__attributes', 'acq_sku__attr_where');

  // Add back index on attributes_value.
  $index_attributes_value = [
    'fields' => [
      ['attributes_value', 128],
    ],
    'spec' => [
      'fields' => [
        'attributes_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  \Drupal::database()->schema()->addIndex('acq_sku__attributes', 'acq_sku__attr_where', $index_attributes_value['fields'], $index_attributes_value['spec']);
}

/**
 * Implements hook_update_N().
 *
 * Add attribute set as parent key for attribute_weights.
 */
function acq_sku_update_8008() {
  $config = \Drupal::configFactory()->getEditable('acq_sku.configurable_form_settings');
  $config->set('attribute_weights', ['default' => $config->get('attribute_weights')]);
  $config->save(TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Adding index on 'acq_sku__field_configured_skus' table for performance.
 */
function acq_sku_update_8007() {
  $index = 'acq_sku__field_configured_skus';
  $data = _acq_sku_indexes()[$index];
  if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
    \Drupal::database()
      ->schema()
      ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Add field to store commerce category status.
 */
function acq_sku_update_8006() {
  $config_path = drupal_get_path('module', 'acq_sku') . '/config/install/';

  $storage_yaml = Yaml::parse(file_get_contents($config_path . 'field.storage.taxonomy_term.field_commerce_status.yml'));

  // Some issue with array conversion in allowed values, we handle
  // exception with workaround for now. We'll re-save it later.
  $storage_yaml['settings']['allowed_values'] = [];

  // Create field storage config.
  FieldStorageConfig::create($storage_yaml)->save();

  // Reload config from yaml.
  $storage_yaml = Yaml::parse(file_get_contents($config_path . 'field.storage.taxonomy_term.field_commerce_status.yml'));

  // Update config in DB.
  \Drupal::configFactory()->getEditable('field.storage.taxonomy_term.field_commerce_status')->setData($storage_yaml)->save();

  // Load field storage config and save again.
  $field_storage = FieldStorageConfig::loadByName($storage_yaml['entity_type'], $storage_yaml['field_name']);
  $field_storage->save();

  // Save the Field Config.
  $field_yaml = Yaml::parse(file_get_contents($config_path . 'field.field.taxonomy_term.acq_product_category.field_commerce_status.yml'));
  FieldConfig::create($field_yaml)->save();
}

/**
 * Implements hook_update_N().
 *
 * Add additional indexes to improve performance.
 */
function acq_sku_update_8005() {
  foreach (_acq_sku_indexes() as $index => $data) {
    if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
      \Drupal::database()
        ->schema()
        ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add additional indexes to improve performance.
 */
function acq_sku_update_8004() {
  foreach (_acq_sku_indexes() as $index => $data) {
    if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
      \Drupal::database()
        ->schema()
        ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
    }
  }
}

/**
 * Implements hook_update_N().
 */
function acq_sku_update_8003() {
  $config_path = drupal_get_path('module', 'acq_sku') . '/config/install/acq_sku.configurable_form_settings.yml';
  $data = Yaml::parse(file_get_contents($config_path));
  \Drupal::configFactory()->getEditable('acq_sku.configurable_form_settings')->setData($data)->save(TRUE);
}

/**
 * Implements hook_update_N().
 */
function acq_sku_update_8002() {
  // Apply updates to add stock field.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  $config_yaml = Yaml::parse(file_get_contents(drupal_get_path('module', 'acq_sku') . '/config/install/rest.resource.acq_productstocksync.yml'));

  \Drupal::configFactory()
    ->getEditable('rest.resource.acq_productstocksync')
    ->setData($config_yaml)
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add index for SKU and langcode on acq_sku_field_data table.
 */
function acq_sku_update_8001() {
  // Done in 8004 again.
}

/**
 * Implements hook_install().
 */
function acq_sku_install() {
  foreach (_acq_sku_indexes() as $index => $data) {
    if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
      \Drupal::database()
        ->schema()
        ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
    }
  }
}

/**
 * Function to get indexes to be added for SKU related tables.
 *
 * @return array
 *   Array containing indexes to be added for SKU related tables.
 */
function _acq_sku_indexes() {
  $indexes = [];

  // Add index for first 30 character of SKU on acq_sku_field_data table.
  $indexes['acq_sku_field_sku'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['sku', 64],
    ],
    'spec' => [
      'fields' => [
        'sku' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  // Add index for field_skus on node__field_skus table.
  $indexes['node__field_skus'] = [
    'table' => 'node__field_skus',
    'fields' => [
      ['field_skus_value', 64],
    ],
    'spec' => [
      'fields' => [
        'field_skus_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  // Add index for SKU and langcode on acq_sku_field_data table.
  $indexes['acq_sku_sku_langcode'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['sku', 64],
      ['langcode', 10],
    ],
    'spec' => [
      'fields' => [
        'sku' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
        'langcode' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  $indexes['acq_sku__attr_where'] = [
    'table' => 'acq_sku__attributes',
    'fields' => [
      ['attributes_value', 128],
    ],
    'spec' => [
      'fields' => [
        'attributes_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  // Add index for 'field_skus on acq_sku__field_configured_skus' table.
  $indexes['acq_sku__field_configured_skus'] = [
    'table' => 'acq_sku__field_configured_skus',
    'fields' => [
      ['field_configured_skus_value', 64],
    ],
    'spec' => [
      'fields' => [
        'field_configured_skus_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  $indexes['acq_sku_sku_defaultlangcode'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      'sku',
      'default_langcode',
    ],
    'spec' => [
      'fields' => [
        'sku' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
        'default_langcode' => [
          'type' => 'tinyint',
          'length' => 4,
          'default' => '',
        ],
      ],
    ],
  ];

  // Allow other modules to add/alter indexes.
  \Drupal::moduleHandler()->alter('acq_sku_indexes', $indexes);

  return $indexes;
}

/**
 * Implements hook_schema().
 */
function acq_sku_schema() {
  $schema = [];

  $schema[ConductorCategorySyncHelper::TABLE_NAME] = [
    'description' => 'Stores acm category ids for push mode category sync.',
    'fields' => [
      'category_acm_id' => [
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Category acm id.',
      ],
    ],
    'unique keys' => [
      'unique' => ['category_acm_id'],
    ],
  ];

  $schema['product_attribute_options_missing'] = [
    'description' => 'Storing the sku on missing attribute.',
    'fields' => [
      'sku' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 100,
        'default' => '',
      ],
      'attribute_code' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
        'default' => '',
      ],
      'option_id' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 100,
        'default' => '',
      ],
      'field_key' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
        'default' => '',
      ],
    ],
    'unique keys' => [
      'sku_attribute_code_option_id' => [
        'sku',
        'attribute_code',
        'option_id',
      ],
    ],
  ];

  return $schema;
}
