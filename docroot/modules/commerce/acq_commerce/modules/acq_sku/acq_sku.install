<?php

/**
 * @file
 * Contains install hooks for acq_sku.
 */

use Drupal\node\Entity\Node;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_update_N().
 *
 * Manage stock through separate module acq_sku_stock.
 */
function acq_sku_update_8018() {
  \Drupal::service('module_installer')->install(['acq_sku_stock']);
}

/**
 * Implements hook_update_N().
 *
 * Make field_configured_skus non-translatable.
 */
function acq_sku_update_8017() {
  $field_storage = FieldStorageConfig::loadByName('acq_sku', 'field_configured_skus');
  $field_storage->setTranslatable(FALSE);
  $field_storage->save();

  $field = FieldConfig::loadByName('acq_sku', 'configurable', 'field_configured_skus');
  $field->setTranslatable(FALSE);
  $field->save();
}

/**
 * Implements hook_update_N().
 *
 * Make price, final_price and special_price non-translatable.
 */
function acq_sku_update_8016() {
  \Drupal::entityDefinitionUpdateManager()->applyUpdates();
}

/**
 * Implements hook_update_N().
 *
 * Remove join index on acq_sku__attributes
 */
function acq_sku_update_8015() {
  \Drupal::database()->schema()->dropIndex('acq_sku__attributes', 'acq_sku__attr_join');
  \Drupal::database()->schema()->dropIndex('acq_sku__attributes', 'acq_sku__attr_where');

  // Add back index on attributes_value.
  $index_attributes_value= [
    'fields' => [
      ['attributes_value', 128],
    ],
    'spec' => [
      'fields' => [
        'attributes_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  \Drupal::database()->schema()->addIndex('acq_sku__attributes', 'acq_sku__attr_where', $index_attributes_value['fields'], $index_attributes_value['spec']);
}

/**
 * Implements hook_update_N().
 *
 * Add attribute set as parent key for attribute_weights.
 */
function acq_sku_update_8008() {
  $config = \Drupal::configFactory()->getEditable('acq_sku.configurable_form_settings');
  $config->set('attribute_weights', ['default' => $config->get('attribute_weights')]);
  $config->save(TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Adding index on 'acq_sku__field_configured_skus' table for performance.
 */
function acq_sku_update_8007() {
  $index = 'acq_sku__field_configured_skus';
  $data = _acq_sku_indexes()[$index];
  if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
    \Drupal::database()
      ->schema()
      ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Add field to store commerce category status.
 */
function acq_sku_update_8006() {
  $config_path = drupal_get_path('module', 'acq_sku') . '/config/install/';

  $storage_yaml = Yaml::parse(file_get_contents($config_path . 'field.storage.taxonomy_term.field_commerce_status.yml'));

  // Some issue with array conversion in allowed values, we handle
  // exception with workaround for now. We'll re-save it later.
  $storage_yaml['settings']['allowed_values'] = [];

  // Create field storage config.
  FieldStorageConfig::create($storage_yaml)->save();

  // Reload config from yaml.
  $storage_yaml = Yaml::parse(file_get_contents($config_path . 'field.storage.taxonomy_term.field_commerce_status.yml'));

  // Update config in DB.
  \Drupal::configFactory()->getEditable('field.storage.taxonomy_term.field_commerce_status')->setData($storage_yaml)->save();

  // Load field storage config and save again.
  $field_storage = FieldStorageConfig::loadByName($storage_yaml['entity_type'], $storage_yaml['field_name']);
  $field_storage->save();

  // Save the Field Config.
  $field_yaml = Yaml::parse(file_get_contents($config_path . 'field.field.taxonomy_term.acq_product_category.field_commerce_status.yml'));
  FieldConfig::create($field_yaml)->save();
}

/**
 * Implements hook_update_N().
 *
 * Add additional indexes to improve performance.
 */
function acq_sku_update_8005() {
  foreach (_acq_sku_indexes() as $index => $data) {
    if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
      \Drupal::database()
        ->schema()
        ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add additional indexes to improve performance.
 */
function acq_sku_update_8004() {
  foreach (_acq_sku_indexes() as $index => $data) {
    if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
      \Drupal::database()
        ->schema()
        ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
    }
  }
}

/**
 * Implements hook_update_N().
 */
function acq_sku_update_8003() {
  $config_path = drupal_get_path('module', 'acq_sku') . '/config/install/acq_sku.configurable_form_settings.yml';
  $data = Yaml::parse(file_get_contents($config_path));
  \Drupal::configFactory()->getEditable('acq_sku.configurable_form_settings')->setData($data)->save(TRUE);
}

/**
 * Implements hook_update_N().
 */
function acq_sku_update_8002() {
  // Apply updates to add stock field.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  $config_yaml = Yaml::parse(file_get_contents(drupal_get_path('module', 'acq_sku') . '/config/install/rest.resource.acq_productstocksync.yml'));

  \Drupal::configFactory()
    ->getEditable('rest.resource.acq_productstocksync')
    ->setData($config_yaml)
    ->save();

  // Set stock mode to pull by default.
  \Drupal::configFactory()
    ->getEditable('acq_sku.settings')
    ->set('stock_mode', 'pull')
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add index for SKU and langcode on acq_sku_field_data table.
 */
function acq_sku_update_8001() {
  // Done in 8004 again.
}

/**
 * Implements hook_install().
 */
function acq_sku_install() {
  Node::create([
    'type' => 'page',
    'title' => 'Store',
    'langcode' => 'en',
    'uid' => '1',
    'status' => 1,
    'path' => '/store',
    'body' => [
      'value' => '<p>Welcome to our store</p>',
      'format' => 'rich_text',
    ],
  ])->save();

  MenuLinkContent::create([
    'title' => 'Store',
    'link' => ['uri' => 'internal:/store'],
    'menu_name' => 'main',
    'weight' => 0,
  ])->save();

  foreach (_acq_sku_indexes() as $index => $data) {
    if (!\Drupal::database()->schema()->indexExists($data['table'], $index)) {
      \Drupal::database()
        ->schema()
        ->addIndex($data['table'], $index, $data['fields'], $data['spec']);
    }
  }
}

/**
 * Function to get indexes to be added for SKU related tables.
 *
 * @return array
 *   Array containing indexes to be added for SKU related tables.
 */
function _acq_sku_indexes() {
  $indexes = [];

  // Add index for first 30 character of SKU on acq_sku_field_data table.
  $indexes['acq_sku_field_sku'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['sku', 64],
    ],
    'spec' => [
      'fields' => [
        'sku' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  // Add index for field_skus on node__field_skus table.
  $indexes['node__field_skus'] = [
    'table' => 'node__field_skus',
    'fields' => [
      ['field_skus_value', 64],
    ],
    'spec' => [
      'fields' => [
        'field_skus_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  // Add index for SKU and langcode on acq_sku_field_data table.
  $indexes['acq_sku_sku_langcode'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['sku', 64],
      ['langcode', 10],
    ],
    'spec' => [
      'fields' => [
        'sku' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
        'langcode' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  $indexes['acq_sku__attr_where'] = [
    'table' => 'acq_sku__attributes',
    'fields' => [
      ['attributes_value', 128],
    ],
    'spec' => [
      'fields' => [
        'attributes_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  // Add index for 'field_skus on acq_sku__field_configured_skus' table.
  $indexes['acq_sku__field_configured_skus'] = [
    'table' => 'acq_sku__field_configured_skus',
    'fields' => [
      ['field_configured_skus_value', 64],
    ],
    'spec' => [
      'fields' => [
        'field_configured_skus_value' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];

  return $indexes;
}
