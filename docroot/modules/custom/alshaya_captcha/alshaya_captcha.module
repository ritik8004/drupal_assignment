<?php

/**
 * @file
 * Module file.
 */

use Drupal\captcha\Entity\CaptchaPoint;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_captcha_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['alshaya_captcha'];
    unset($implementations['alshaya_captcha']);
    $implementations['alshaya_captcha'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_captcha_form_captcha_point_edit_form_alter(array &$form, FormStateInterface $form_state) {
  // Add delay attempts setting to 'captcha_entity' edit form.
  _alshaya_captcha_delay_attempt_element($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_captcha_form_captcha_point_add_form_alter(array &$form, FormStateInterface $form_state) {
  // Add delay attempts setting to 'captcha_entity' add form.
  _alshaya_captcha_delay_attempt_element($form, $form_state);
}

/**
 * Adds delay attempts settings to 'captcha_point' entity.
 *
 * @param array $form
 *   Form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state instance.
 */
function _alshaya_captcha_delay_attempt_element(array &$form, FormStateInterface $form_state) {
  /* @var \Drupal\captcha\Entity\CaptchaPoint $captcha_point */
  $captcha_point = $form_state->getFormObject()->getEntity();
  $form['captcha_delay_attempts'] = [
    '#type' => 'number',
    '#title' => t('Delay attempts'),
    '#description' => t('Number of attempts after which captcha will show up. This setting will not work if value is empty or 0.'),
    '#default_value' => $captcha_point->getThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts') ?: 0,
  ];

  $form['#entity_builders'][] = 'alshaya_captcha_form_captcha_point_add_form_builder';
}

/**
 * Entity builder for the captcha point configuration entity.
 */
function alshaya_captcha_form_captcha_point_add_form_builder($entity_type, CaptchaPoint $captcha_point, &$form, FormStateInterface $form_state) {
  // Save the captcha delay attempts value for the field.
  if ($form_state->getValue('captcha_delay_attempts')) {
    $captcha_point->setThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts', $form_state->getValue('captcha_delay_attempts'));
    return;
  }

  $captcha_point->unsetThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts');
}

/**
 * Implements hook_form_alter().
 */
function alshaya_captcha_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Whether captcha enabled on form on not.
  $captcha = isset($form['captcha'])?: FALSE;

  // If captcha enabled on form.
  if ($captcha) {

    /* @var \Drupal\captcha\Entity\CaptchaPoint $captcha_point */
    $captcha_point = \Drupal::entityTypeManager()
      ->getStorage('captcha_point')
      ->load($form_id);

    // Flood threshold value for the form.
    $flood_threshold = $captcha_point->getThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts');

    // If there is threshold value mentioned in field.
    if (!empty($flood_threshold) && $flood_threshold > 0) {
      // Flood event name.
      $flood_event = 'alshaya_captcha_' . $form['#id'];

      // Set flood variable.
      $flood = $form_state->get('flood') ?: \Drupal::flood();
      if (!$form_state->get('flood')) {
        $form_state->set('flood', $flood);
      }

      // If flood not exceeds threshold.
      if ($flood->isAllowed($flood_event, $flood_threshold)) {
        unset($form['captcha']);
        $form['#validate'][] = '_alshaya_captcha_form_validate';
      }

      $form['#submit'][] = '_alshaya_captcha_form_submit';
    }
  }

  // User Login form.
  if ($form_id == 'user_login_form') {
    // Add a Validate handler, which runs first.
    array_unshift($form['#validate'], 'alshaya_captcha_clear_flood_event');
  }
}

/**
 * Unblocks the user if he is blocked by Drupal flood.
 *
 * This validation should run before the validateFinal in userLoginForm.
 */
function alshaya_captcha_clear_flood_event(array &$form, FormStateInterface $form_state) {
  // Get flood settings.
  $config = \Drupal::configFactory()->get('user.flood');

  // Account Object.
  $account = user_load_by_name($form_state->getValue('name'));

  // Flood event to look for.
  $event = 'user.failed_login_user';

  if ($account) {
    // Create identifier string.
    if ($config->get('uid_only')) {
      // Register flood events based on the uid only, so they apply for any
      // IP address. This is the most secure option.
      $identifier = $account->id();
    }
    else {
      // The default identifier is a combination of uid and IP address. This
      // is less secure but more resistant to denial-of-service attacks that
      // could lock out all users with public user names.
      $identifier = $account->id() . '-' . Drupal::request()->getClientIp();
    }

    $flood = \Drupal::service('flood');

    // Check if flood has blocked the user yet.
    $is_Allowed = $flood->isAllowed($event, $config->get('user_limit'), $config->get('user_window'), $identifier);
    if (!$is_Allowed) {
      // We clear only one flood event instead of emptying all.
      $flood_id = \Drupal::database()->select('flood', 'f')
        ->fields('f', ['fid'])
        ->condition('event', $event)
        ->condition('identifier', $identifier)
        ->condition('timestamp', REQUEST_TIME - $config->get('user_window'), '>')
        ->orderBy('fid')
        ->range(0, 1)
        ->execute()
        ->fetchField();

      // Clear the oldest event.
      \Drupal::database()->delete('flood')
        ->condition('event', $event)
        ->condition('identifier', $identifier)
        ->condition('fid', $flood_id)
        ->execute();
    }
  }
}

/**
 * Form validation handler to fill the flood.
 */
function _alshaya_captcha_form_validate(&$form, FormStateInterface $form_state) {
  // If there is any error, then register flood.
  if ($form_state->getErrors()) {
    $flood = $form_state->get('flood');
    $flood->register('alshaya_captcha_' . $form['#id']);
  }
}

/**
 * Form submit handler to clear the flood.
 */
function _alshaya_captcha_form_submit(&$form, FormStateInterface $form_state) {
  // If successful, clear flood.
  $flood = $form_state->get('flood');
  $flood->clear('alshaya_captcha_' . $form['#id']);
}
