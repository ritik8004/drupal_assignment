<?php

/**
 * @file
 * Module file.
 */

use Drupal\captcha\Entity\CaptchaPoint;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_captcha_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['alshaya_captcha'];
    unset($implementations['alshaya_captcha']);
    $implementations['alshaya_captcha'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_captcha_form_captcha_point_edit_form_alter(array &$form, FormStateInterface $form_state) {
  // Add delay attempts setting to 'captcha_entity' edit form.
  _alshaya_captcha_delay_attempt_element($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_captcha_form_captcha_point_add_form_alter(array &$form, FormStateInterface $form_state) {
  // Add delay attempts setting to 'captcha_entity' add form.
  _alshaya_captcha_delay_attempt_element($form, $form_state);
}

/**
 * Adds delay attempts settings to 'captcha_point' entity.
 *
 * @param array $form
 *   Form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state instance.
 */
function _alshaya_captcha_delay_attempt_element(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\captcha\Entity\CaptchaPoint $captcha_point */
  $captcha_point = $form_state->getFormObject()->getEntity();
  $form['captcha_delay_attempts'] = [
    '#type' => 'number',
    '#title' => t('Delay attempts'),
    '#description' => t('Number of attempts after which captcha will show up. This setting will not work if value is empty or 0.'),
    '#default_value' => $captcha_point->getThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts') ?: 0,
  ];

  $form['#entity_builders'][] = 'alshaya_captcha_form_captcha_point_add_form_builder';
}

/**
 * Entity builder for the captcha point configuration entity.
 */
function alshaya_captcha_form_captcha_point_add_form_builder($entity_type, CaptchaPoint $captcha_point, &$form, FormStateInterface $form_state) {
  // Save the captcha delay attempts value for the field.
  if ($form_state->getValue('captcha_delay_attempts')) {
    $captcha_point->setThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts', $form_state->getValue('captcha_delay_attempts'));
    return;
  }

  $captcha_point->unsetThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts');
}

/**
 * Implements hook_form_alter().
 */
function alshaya_captcha_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Whether captcha enabled on form on not.
  $captcha = isset($form['captcha']) ?: FALSE;

  // If captcha enabled on form.
  if ($captcha) {

    /** @var \Drupal\captcha\Entity\CaptchaPoint $captcha_point */
    $captcha_point = \Drupal::entityTypeManager()
      ->getStorage('captcha_point')
      ->load($form_id);

    // Flood threshold value for the form.
    $flood_threshold = $captcha_point->getThirdPartySetting('alshaya_captcha', 'captcha_delay_attempts');

    // If there is threshold value mentioned in field.
    if (!empty($flood_threshold) && $flood_threshold > 0) {
      // Flood event name.
      $flood_event = 'alshaya_captcha_' . $form['#id'];

      // Set flood variable.
      $flood = $form_state->get('flood') ?: \Drupal::flood();
      if (!$form_state->get('flood')) {
        $form_state->set('flood', $flood);
      }

      // If flood not exceeds threshold.
      if ($flood->isAllowed($flood_event, $flood_threshold - 1)) {
        unset($form['captcha']);
        $form['#validate'][] = '_alshaya_captcha_form_validate';
      }
      else {
        $form['#validate'][] = '_alshaya_captcha_form_after_threshold_validate';
      }

      $form['#submit'][] = '_alshaya_captcha_form_submit';
    }
    else {
      // Validation for the captcha which shows without any delay.
      $form['#validate'][] = '_alshaya_captcha_form_no_delay_captcha_validate';
    }
  }
}

/**
 * Form validation handler to fill the flood.
 */
function _alshaya_captcha_form_validate(&$form, FormStateInterface $form_state) {
  // If there is any error, then register flood.
  if ($form_state->getErrors()) {
    $flood = $form_state->get('flood');
    $flood->register('alshaya_captcha_' . $form['#id']);
  }
}

/**
 * Form submit handler to clear the flood.
 */
function _alshaya_captcha_form_submit(&$form, FormStateInterface $form_state) {
  // If successful, clear flood.
  $flood = $form_state->get('flood');
  $flood->clear('alshaya_captcha_' . $form['#id']);
  $flood->clear('alshaya_captcha_' . $form['#id'] . '_captcha_fail_message');
}

/**
 * Form validation handler to remove captcha error if not required.
 */
function _alshaya_captcha_form_after_threshold_validate(&$form, FormStateInterface $form_state) {
  // If there is any error.
  if ($errors = $form_state->getErrors()) {
    // Get flood instance and flood event name.
    $flood = $form_state->get('flood');
    $flood_event = 'alshaya_captcha_' . $form['#id'] . '_captcha_fail_message';
    if ($flood->isAllowed($flood_event, 1)) {
      $flood->register($flood_event);
      // Remove/Unset any captcha error message if any (only for first fail).
      if (isset($errors['captcha_response'])) {
        $form_state->clearErrors();
        unset($errors['captcha_response']);
        foreach ($errors as $field_name => $error) {
          $form_state->setErrorByName($field_name, $error);
        }
      }
    }
    else {
      if (isset($errors['captcha_response'])) {
        _alshaya_captcha_form_no_delay_captcha_validate($form, $form_state);
      }
    }
  }
}

/**
 * Validation handler for the captcha where captcha shows without any delay.
 */
function _alshaya_captcha_form_no_delay_captcha_validate(&$form, FormStateInterface $form_state) {
  if ($errors = $form_state->getErrors()) {
    if (isset($errors['captcha_response'])) {
      // If captcha response is empty (user didn't use the captcha).
      // phpcs:ignore
      if (empty($_POST['g-recaptcha-response'])) {
        $errors['captcha_response'] = t('Please fill the captcha.');
      }

      $form['captcha']['#suffix'] = '<div class="form-item--error-message captcha-inline-error">' . $errors['captcha_response'] . '</div>';
    }
  }
}
