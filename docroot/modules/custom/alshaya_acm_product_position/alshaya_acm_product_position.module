<?php

/**
 * @file
 * Module file for Alshaya ACM Product Position.
 */

use Drupal\alshaya_acm_product_position\Form\AlshayaPlpSortSettingsForm;
use Drupal\alshaya_custom\AlshayaDynamicConfigValueBase;
use Drupal\alshaya_search_api\EventSubscriber\AlshayaSearchApiProductProcessedEventSubscriber;
use Drupal\Core\TypedData\Exception\MissingDataException as MissingDataExceptionAlias;
use Drupal\field\Entity\FieldConfig;
use Drupal\search_api\Query\ConditionInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\search_api\Query\ConditionGroupInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\views\Views;
use Drupal\Views\ViewExecutable;

/**
 * Implements hook_search_api_db_query_alter().
 */
function alshaya_acm_product_position_search_api_db_query_alter(SelectInterface &$db_query, QueryInterface $query) {
  if ($query->hasTag('views_alshaya_product_list') || $query->hasTag('category_product_list')) {
    $sorts =& $query->getSorts();

    // Get and set sort order from the views config.
    $views_storage = Views::getView('alshaya_product_list')->storage;
    $views_sort = $views_storage->getDisplay('block_1')['display_options']['sorts'];

    // Get all available sorting options as per sorting done by admin
    // (intersection of sort options in views and sort options from config).
    $sort_options = _alshaya_acm_product_position_sorted_available_options($views_sort);

    // Get default sort option, first one from available sorted sort options.
    $default_sort = reset($sort_options);
    [$default_sort_key, $default_sort_order] = explode(' ', $default_sort);

    // Prepare flag to check if default sort option is sort by position or not.
    $default_sort_is_nid = ($default_sort_key == 'nid');

    // For the rest endpoint.
    // Tag added in CategoryProductListResource::prepareAndExecuteQuery().
    if ($query->hasTag('category_product_list')) {
      // @todo Find a way to use the class constant here.
      // Module alshaya_mobile_app is not dependency of current one.
      // Get requested sort option for mobile app.
      // phpcs:ignore
      $exposed_input = $_REQUEST['sort'] ?? '';

      // If no sorting option provided, we add the default sort here.
      // Case where sort by position is default, it will be handled below.
      if (empty($exposed_input) && !$default_sort_is_nid) {
        $sorts[$default_sort_key] = $default_sort_order;
      }
    }
    // For web get the requested sort option.
    else {
      // phpcs:ignore
      $exposed_input = $_REQUEST['sort_bef_combine'] ?? '';
    }

    $sort_by_position = FALSE;

    // If requested sort option is position, set the flag to TRUE.
    if (str_starts_with($exposed_input, 'nid')) {
      $sort_by_position = TRUE;
    }
    // If no sort option requested and default sorting is by position, set the
    // flag to TRUE.
    elseif (empty($exposed_input) && $default_sort_is_nid) {
      $sort_by_position = TRUE;
    }

    // Check if sort by position flag is true. If not we don't want to do
    // execute any code after this condition.
    if (!$sort_by_position) {
      // For mobile app add sorts at the end to remove duplicates.
      // This is done in views for web.
      if ($query->hasTag('category_product_list')) {
        if (empty($sorts['name_1'])) {
          $sorts['name_1'] = QueryInterface::SORT_ASC;
        }

        $sorts['original_nid'] = QueryInterface::SORT_DESC;
        $sorts['nid'] = QueryInterface::SORT_ASC;
      }

      return;
    }

    // Find the tid.
    $tid = NULL;
    $conditions = $query->getConditionGroup()->getConditions();
    foreach ($conditions as $condition) {
      if ($condition) {
        $query_conditions = $condition instanceof ConditionGroupInterface
          ? $condition->getConditions()[0]
          : $condition;
        if ($query_conditions instanceof ConditionInterface && $query_conditions->getField() == 'tid') {
          $tid = $query_conditions->getValue();
          // First tid in the array is always the current tid.
          $tid = is_array($tid) ? $tid[0] : $tid;
          break;
        }
      }
    }

    if ($tid) {
      // Remove all query sorts, we will sort in db_query.
      $sorts = [];

      $db_query->leftJoin('acq_sku_position', 'acq_sku_position', '(t.original_nid = acq_sku_position.nid AND acq_sku_position.tid = :tid AND acq_sku_position.position_type = :position_type)', [
        ':tid' => $tid,
        ':position_type' => 'position',
      ]);

      // If no position found for product, set the default position.
      $db_query->addExpression('IFNULL(acq_sku_position.position, 99999999)', 'no_position');

      // First order by stock (always).
      $db_query->addField('t', 'stock');
      $db_query->orderBy('t.stock', QueryInterface::SORT_DESC);

      // Order by position.
      $db_query->orderBy('no_position', QueryInterface::SORT_ASC);

      // Order by name if two products have same position (to avoid duplicity).
      $db_query->addField('t', 'name_1');
      $db_query->orderBy('t.name_1', QueryInterface::SORT_ASC);

      // Order by original nid desc (last in first) and then by nid (which will
      // have different values for split listing) for products with same name to
      // avoid random results.
      $db_query->addField('t', 'original_nid');
      $db_query->orderBy('t.original_nid', QueryInterface::SORT_DESC);
      $db_query->addField('t', 'nid');
      $db_query->orderBy('t.nid', QueryInterface::SORT_ASC);
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function alshaya_acm_product_position_views_pre_build(ViewExecutable $view) {
  if ($view->id() != 'alshaya_product_list') {
    return;
  }

  $filters = $view->getExposedInput();
  if (empty($filters['sort_bef_combine'])) {
    // We allow administrators to override the order of sorting options.
    // Here we try to set the default sort order based on config when there
    // is nothing in exposed input.
    if (is_array($view->sort) && !empty($view->sort)) {
      $sorts = $view->sort;
      $sort_options = _alshaya_acm_product_position_sorted_available_options($sorts);
      $filters['sort_bef_combine'] = reset($sort_options);
      $view->setExposedInput($filters);
    }
  }

  // Nid is used for position sort, this is hard coded so we use it directly.
  if (isset($filters['sort_bef_combine']) && str_starts_with($filters['sort_bef_combine'], 'nid')) {
    if ($tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $view->element['#cache']['tags'][] = 'search_api_list:product:sort_position:' . $tid;
    }
  }
}

/**
 * Implements hook_acq_sku_position_sync_category_term_processed().
 */
function alshaya_acm_product_position_acq_sku_position_sync_category_term_processed($term) {
  // Invalidate cache tags for categories processed during position sync.
  $tag = AlshayaSearchApiProductProcessedEventSubscriber::CACHE_TAG_PREFIX . $term->tid;
  \Drupal::logger('alshaya_acm_product_position')->notice('Queueing cache tag for invalidation @tag', [
    '@tag' => $tag,
  ]);
  // Queue cache tag for invalidation.
  _alshaya_performance_queue_cache_tag_for_invalidation($tag);
}

/**
 * Implements hook_form_alter().
 */
function alshaya_acm_product_position_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $plp_forms = [
    'views-exposed-form-alshaya-product-list-block-1',
    'views-exposed-form-alshaya-product-list-block-2',
    'views-exposed-form-alshaya-product-list-block-3',
  ];

  if (isset($form['#id']) && in_array($form['#id'], $plp_forms)) {
    $form['#cache']['tags'][] = 'views-exposed-form-alshaya-product-list';
    // Best seller descending option removed.
    if (isset($form['sort_bef_combine']['#options']['nid DESC'])) {
      unset($form['sort_bef_combine']['#options']['nid DESC']);
    }

    // New In ascending option removed.
    if (isset($form['sort_bef_combine']['#options']['created ASC'])) {
      unset($form['sort_bef_combine']['#options']['created ASC']);
    }

    // Disable sort options if not enabled.
    $enabled_sorts = _alshaya_acm_product_position_get_config();
    if (!$enabled_sorts) {
      $form['#access'] = FALSE;
    }
    else {
      // We loop through all the sort options and check if it is available in
      // config. If not available, we remove them.
      foreach ($form['sort_bef_combine']['#options'] as $key => $option) {
        $field_name = trim(trim($key, ' DESC'), ' ASC');

        if (!in_array($field_name, $enabled_sorts)) {
          unset($form['sort_bef_combine']['#options'][$key]);
        }
      }

      $labels = \Drupal::service('alshaya_acm_product_position.sort_labels')
        ->getSortOptionsLabels();
      array_walk($form['sort_bef_combine']['#options'], function (&$value, $key) use ($labels) {
        $value = !empty($labels[$key]) ? $labels[$key] : '';
      });

      $form['sort_bef_combine']['#options'] = array_filter($form['sort_bef_combine']['#options']);

      // Re-order select options based on the config position.
      $form['sort_bef_combine']['#options'] =
        \Drupal::service('alshaya_acm_product_position.sort_options')
          ->sortGivenOptions($form['sort_bef_combine']['#options']);

      // Set the first option as the default value.
      $default_sort_option = key($form['sort_bef_combine']['#options']);
      $form['sort_bef_combine']['#default_value'] = $default_sort_option;
      $applied_sort_option = $form_state->getUserInput();
      // This to avoid illegal choice if we disable 'position' option as view
      // passes 'nid' in #value. So if user has not selected any sort option,
      // means its page load, then the first option will be used for #value,
      // otherwise the user selected value will be used.
      $sort_bef_combine = !empty($applied_sort_option['sort_bef_combine']) ? $applied_sort_option['sort_bef_combine'] : NULL;
      $form['sort_bef_combine']['#value'] = !empty($sort_bef_combine) && isset($form['sort_bef_combine']['#options'][$sort_bef_combine]) ? $sort_bef_combine : $default_sort_option;
    }
  }
}

/**
 * Function to get sort options config.
 *
 * @param bool $label
 *   (Optional) True to get label else returns enabled options.
 *
 * @return array
 *   Array of enabled options / label of options.
 */
function _alshaya_acm_product_position_get_config($label = FALSE) {
  $position = \Drupal::config('alshaya_acm_product_position.settings');
  if ($label) {
    return AlshayaDynamicConfigValueBase::schemaArrayToKeyValue((array) $position->get('sort_options_labels'));
  }
  return $position->get('sort_options');
}

/**
 * Wrapper function to get sorted and enabled + available sort options.
 *
 * @param array $sorts
 *   Sort options in views.
 *
 * @return array
 *   Sorted and enabled + available sort options.
 */
function _alshaya_acm_product_position_sorted_available_options(array $sorts) {
  $labels = \Drupal::service('alshaya_acm_product_position.sort_labels')
    ->getSortOptionsLabels();

  // Remove the ones not enabled in view's sorting options.
  foreach ($labels as $key => $sort_option) {
    $sort_field = explode(' ', $key)[0];
    if (!isset($sorts[$sort_field])) {
      unset($labels[$key]);
    }
  }

  $labels = \Drupal::service('alshaya_acm_product_position.sort_options')
    ->sortGivenOptions($labels);
  return array_keys($labels);
}

/**
 * Implements hook_local_tasks_alter().
 */
function alshaya_acm_product_position_local_tasks_alter(&$local_tasks) {
  // Change config translation local task hierarchy.
  if (isset($local_tasks['config_translation.local_tasks:config_translation.item.overview.alshaya_acm_product_position.plp_sort_settings_admin_form'])) {
    $local_tasks['config_translation.local_tasks:config_translation.item.overview.alshaya_acm_product_position.plp_sort_settings_admin_form']['parent_id'] = 'alshaya_acm_product_position.plp_sort_settings_admin_form';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_product_position_form_taxonomy_term_acq_product_category_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Get entity from form state object.
  $taxonomy_term = $form_state->getFormObject()->getEntity();

  // Check if the current form is term form.
  if (!$taxonomy_term instanceof Term) {
    return;
  }

  $form['sort_options_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => ['plp-sorting-options-wrapper'],
    ],
    '#weight' => 9,
  ];

  // Display sort options table only when the sorting option value is override.
  $form['sort_options_wrapper']['sort_options'] = [
    '#type' => 'table',
    '#header' => [
      t('Enable/Disable'),
      t('Name'),
      t('Weight'),
    ],
    '#tabledrag' => [
      [
        'action' => 'order',
        'relationship' => 'sibling',
        'group' => 'plp_sort_options-order-weight',
      ],
    ],
    '#states' => [
      'visible' => [
        'select[name="field_sorting_options"]' => ['value' => 'override'],
      ],
    ],
  ];

  $config = \Drupal::config('alshaya_acm_product_position.settings');
  // Get the sort options and arrange it by weight.
  // phpcs:disable
  $sort_options = !empty($taxonomy_term->get('field_sorting_order')->getString())
    ? unserialize($taxonomy_term->get('field_sorting_order')->getString())
    : $config->get('sort_options');
  // phpcs:enable

  AlshayaPlpSortSettingsForm::arrangeOptionsByWeight(
    $form['sort_options_wrapper']['sort_options'],
    $config->get('available_sort_options'),
    $sort_options
  );

  $form['sort_options_label_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => ['plp-sorting-options-label-wrapper'],
    ],
    '#weight' => 36,
  ];

  // Display sort options table only when the sorting option value is override.
  $form['sort_options_label_wrapper']['sort_options_label'] = [
    '#type' => 'table',
    '#header' => [
      t('Name'),
      t('Labels'),
    ],
    '#states' => [
      'visible' => [
        'select[name="field_sorting_labels"]' => ['value' => 'override'],
      ],
    ],
  ];

  // Get the sort options and arrange it by weight.
  // phpcs:disable
  $labels = !empty($taxonomy_term->get('field_sort_options_labels')->getString())
    ? unserialize($taxonomy_term->get('field_sort_options_labels')->getString())
    : \Drupal::service('alshaya_acm_product_position.sort_labels')->rawSortOptionsLabels();
  // phpcs:enable

  foreach ($labels as $key => $title) {
    $form['sort_options_label_wrapper']['sort_options_label'][$key]['plain_text'] = [
      '#plain_text' => $key,
    ];
    $form['sort_options_label_wrapper']['sort_options_label'][$key]['label'] = [
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#title_display' => 'invisible',
      '#default_value' => $title,
    ];
  }

  // Form submit handler.
  $form['#validate'][] = 'alshaya_acm_product_position_term_validate';
  $form['actions']['submit']['#submit'][] = 'alshaya_acm_product_position_term_submit';
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function alshaya_acm_product_position_field_group_build_pre_render_alter(&$element) {
  // Arrange custom field sort_options_wrapper inside group_plp_sorting_options.
  if (!empty($element)
      && $element['#entity_type'] == 'taxonomy_term'
      && $element['vid']['#value'] == 'acq_product_category'
  ) {
    foreach (['sort_options_wrapper', 'sort_options_label_wrapper'] as $field) {
      $element['#group_children'][$field] = 'group_plp_sorting_options';
      $element["group_taxonomy_fields"]['group_plp_content']['group_plp_sorting_options'][$field] = $element[$field];
      $element['#fieldgroups']['group_plp_sorting_options']->children[] = $field;
      unset($element[$field]);
    }
  }
}

/**
 * Validation function for term add / edit form.
 */
function alshaya_acm_product_position_term_validate(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\menu_link_content\Form\MenuLinkContentForm $menu_link */
  if (!empty($form_state->getValue('field_sorting_options')) && $form_state->getValue('field_sorting_options')[0]['value'] == 'override') {
    $sort_options = $form_state->getValue('sort_options');
    if (!empty($sort_options)) {

      // Sort the options based on weight.
      uasort($sort_options, [
        AlshayaPlpSortSettingsForm::class,
        'weightArraySort',
      ]);

      $result = [];
      // Prepare sort option array for saving in config.
      foreach ($sort_options as $key => $sort_option) {
        $result[$key] = $sort_option['enable'] ? $key : 0;
      }

      $form_state->setValue('field_sorting_order', [['value' => serialize($result)]]);
    }
  }
  else {
    $form_state->setValue('field_sorting_order', [['value' => '']]);
  }

  /** @var \Drupal\menu_link_content\Form\MenuLinkContentForm $menu_link */
  if (!empty($form_state->getValue('field_sorting_labels')) && $form_state->getValue('field_sorting_labels')[0]['value'] == 'override') {
    $sort_options_labels = array_map(fn($item) => $item['label'], $form_state->getValue('sort_options_label'));
    if (!empty($sort_options_labels)) {
      $form_state->setValue('field_sort_options_labels', [['value' => serialize($sort_options_labels)]]);
    }
  }
  else {
    $form_state->setValue('field_sort_options_labels', [['value' => '']]);
  }
}

/**
 * Submit callback to invalidate tags.
 */
function alshaya_acm_product_position_term_submit(array &$form, FormStateInterface $form_state) {
  \Drupal::service('cache_tags.invalidator')->invalidateTags([
    'search_api_list:product',
    'config:block.block.exposedformalshaya_product_listblock_1',
  ]);
}

/**
 * Implements hook_acq_sku_commerce_category_alter().
 */
function alshaya_acm_product_position_acq_sku_commerce_category_alter(TermInterface $term, array &$category, $parent) {
  // Save field_sorting_options default value for all existing & new terms that
  // are being created programmatically.
  foreach (['field_sorting_options', 'field_sorting_labels'] as $field_name) {
    if (!empty($term->get($field_name)->getString())) {
      continue;
    }

    $temp_store = \Drupal::service('tempstore.private')->get('alshaya_commerce_category_sync');
    $field_default_value = $temp_store->get($field_name);
    if (empty($field_default_value)) {
      $field = FieldConfig::loadByName('taxonomy_term', 'acq_product_category', $field_name);
      $field_default_value = $field->getDefaultValue($term);
    }

    if (!empty($field_default_value)) {
      $term->set($field_name, $field_default_value);
    }
  }
}

/**
 * Implements hook_acq_sku_position_sync_alter().
 */
function alshaya_acm_product_position_acq_sku_position_sync_alter(array &$terms) {
  $plp_sort_config = \Drupal::configFactory()->get('alshaya_acm_product_position.settings');
  if (!empty($terms) && ($plp_sort_config->get('skip_sync_missing_position_sort'))) {
    $plp_sort_available_options = $plp_sort_config->get('available_sort_options');
    $plp_sort_position_key = array_search('Position', $plp_sort_available_options);

    /** @var \Drupal\alshaya_acm_product_position\AlshayaPlpSortOptionsBase $alshaya_plp_sort_manager */
    $alshaya_plp_sort_manager = \Drupal::service('alshaya_acm_product_position.sort_options');

    foreach ($terms as $key => $term) {
      try {
        $term_object = Term::load($term->tid);

        // Fetch overrides(if any) set for the term.
        $options = $alshaya_plp_sort_manager->getPlpSortConfigForTerm($term_object);

        // Pull options config from site level config if no override is set.
        if (!$options) {
          $options = $plp_sort_config->get('sort_options');
        }

        // Filter out empty array items.
        $options = array_filter($options);

        if (!in_array($plp_sort_position_key, array_keys($options))) {
          unset($terms[$key]);
          \Drupal::logger('alshaya_acm_product')->notice('Skipping position sync for category id: @cat_id as it has no sort criteria set for position.', [
            '@cat_id' => $term->tid,
          ]);
        }
      }
      catch (MissingDataExceptionAlias) {
        \Drupal::logger('alshaya_acm_product')->error('Error checking sort config for category @cat_id.', [
          '@cat_id' => $term->tid,
        ]);
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_acm_product_position_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'acq_sku_position_sync_alter') {
    // Make sure acq_sku_position_sync_alter provided by this module runs at the
    // end of other implementations.
    $group = $implementations['alshaya_acm_product_position'];
    unset($implementations['alshaya_acm_product_position']);
    $implementations['alshaya_acm_product_position'] = $group;
  }
}
