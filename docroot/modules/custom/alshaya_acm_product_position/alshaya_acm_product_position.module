<?php

/**
 * @file
 * Module file for Alshaya ACM Product Position.
 */

use Drupal\alshaya_custom\AlshayaDynamicConfigValueBase;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\views\Views;
use Drupal\Views\ViewExecutable;

/**
 * Implements hook_search_api_db_query_alter().
 */
function alshaya_acm_product_position_search_api_db_query_alter(SelectInterface &$db_query, QueryInterface $query) {
  if ($query->hasTag('views_alshaya_product_list')) {
    $sorts =& $query->getSorts();

    // Get the default sort which is always the first config value.
    $default_sort = current(_alshaya_acm_product_position_get_config());
    // This to check if user has selected sort from drop down or the page load.
    $exposed_input = !empty($_POST['sort_bef_combine']) ? $_POST['sort_bef_combine'] : NULL;
    // If position(nid) is set as the default sort.
    if ($default_sort != 'nid' && empty($exposed_input)) {
      // Removing the nid default sort as coming from views config.
      unset($sorts['nid']);
      // Get and set sort order from the views config.
      $views_storage = Views::getView('alshaya_product_list')->storage;
      $views_sort = $views_storage->getDisplay('block_1')['display_options']['sorts'];

      $sorts[$default_sort] = $views_sort[$default_sort]['order'];
      return;
    }

    // Check if nid is there in sorts, we are using it for position.
    if (!isset($sorts['nid'])) {
      return;
    }

    // Remove all query sorts, we will sort in db_query.
    $sorts = [];

    // Find the tid.
    $tid = NULL;
    $conditions = $query->getConditionGroup()->getConditions();
    foreach ($conditions as $condition) {
      if ($condition) {
        $query_conditions = $condition->getConditions();
        if ($query_conditions[0]->getField() == 'tid') {
          $tid = $query_conditions[0]->getValue();
          // First tid in the array is always the current tid.
          $tid = is_array($tid) ? $tid[0] : $tid;
          break;
        }
      }
    }

    if ($tid) {
      $db_query->leftJoin('acq_sku_position', 'acq_sku_position', '(t.nid = acq_sku_position.nid AND acq_sku_position.tid = :tid AND acq_sku_position.position_type = :position_type)', [
        ':tid' => $tid,
        ':position_type' => 'position',
      ]);

      // If no position found for product, set the default position.
      $db_query->addExpression('IFNULL(acq_sku_position.position, 99999999)', 'no_position');

      // First order by stock (always).
      $db_query->orderBy('stock', QueryInterface::SORT_DESC);

      // Order by position.
      $db_query->orderBy('no_position', QueryInterface::SORT_ASC);

      // Order by name if two products have same position (to avoid duplicity).
      $db_query->orderBy('t.name_1', QueryInterface::SORT_ASC);
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function alshaya_acm_product_position_views_pre_build(ViewExecutable $view) {
  if ($view->id() != 'alshaya_product_list') {
    return;
  }

  $filters = $view->getExposedInput();
  if (empty($filters['sort_bef_combine'])) {
    // Get sorts.
    if (is_array($view->sort) && !empty($sorts = array_keys($view->sort))) {
      $enabled_sorts = _alshaya_acm_product_position_get_config();
      if ($enabled_sorts) {
        $default_sort = FALSE;
        foreach ($sorts as $sort) {
          if (isset($enabled_sorts[$sort])) {
            $default_sort = $sort . ' ASC';
            break;
          }
        }

        if ($default_sort) {
          $filters['sort_bef_combine'] = $default_sort;
        }

        $view->setExposedInput($filters);
      }
    }
  }

  // Nid is used for position sort, this is hard coded so we use it directly.
  if (isset($filters['sort_bef_combine']) && strpos($filters['sort_bef_combine'], 'nid') === 0) {
    $view->element['#cache']['tags'][] = 'search_api_list:product:sort_position';
  }
}

/**
 * Implements hook_acq_sku_position_sync_finished().
 */
function alshaya_acm_product_position_acq_sku_position_sync_finished() {
  // Invalidate the cache tag for product index pages using position sort.
  $tags = ["search_api_list:product:sort_position"];
  Cache::invalidateTags($tags);
}

/**
 * Implements hook_form_alter().
 */
function alshaya_acm_product_position_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $plp_forms = [
    'views-exposed-form-alshaya-product-list-block-1',
    'views-exposed-form-alshaya-product-list-block-2',
  ];

  if (isset($form['#id']) && in_array($form['#id'], $plp_forms)) {
    // Best seller descending option removed.
    if (isset($form['sort_bef_combine']['#options']['nid DESC'])) {
      unset($form['sort_bef_combine']['#options']['nid DESC']);
    }

    // New In ascending option removed.
    if (isset($form['sort_bef_combine']['#options']['created ASC'])) {
      unset($form['sort_bef_combine']['#options']['created ASC']);
    }

    // Disable sort options if not enabled.
    $enabled_sorts = _alshaya_acm_product_position_get_config();
    if (!$enabled_sorts) {
      $form['#access'] = FALSE;
    }
    else {
      // We loop through all the sort options and check if it is available in
      // config. If not available, we remove them.
      foreach ($form['sort_bef_combine']['#options'] as $key => $option) {
        $field_name = trim(trim($key, ' DESC'), ' ASC');

        if (!in_array($field_name, $enabled_sorts)) {
          unset($form['sort_bef_combine']['#options'][$key]);
        }
      }

      $labels = _alshaya_acm_product_position_get_config(TRUE);
      array_walk($form['sort_bef_combine']['#options'], function (&$value, $key) use ($labels) {
        $value = !empty($labels[$key]) ? $labels[$key] : $value;
      });

      // Re-order select options based on the config position.
      $form['sort_bef_combine']['#options'] = _alshaya_acm_product_position_sorted_options($form['sort_bef_combine']['#options']);

      // Set the first option as the default value.
      $default_sort_option = key($form['sort_bef_combine']['#options']);
      $form['sort_bef_combine']['#default_value'] = $default_sort_option;
      $applied_sort_option = $form_state->getUserInput();
      // This to avoid illegal choice if we disable 'position' option as view
      // passes 'nid' in #value. So if user has not selected any sort option,
      // means its page load, then the first option will be used for #value,
      // otherwise the user selected value will be used.
      $sort_bef_combine = !empty($applied_sort_option['sort_bef_combine']) ? $applied_sort_option['sort_bef_combine'] : NULL;
      $form['sort_bef_combine']['#value'] = !empty($sort_bef_combine) && isset($form['sort_bef_combine']['#options'][$sort_bef_combine]) ? $sort_bef_combine : $default_sort_option;
    }
  }
}

/**
 * Re-order the plp sort options based on the config values position.
 *
 * @param array $options
 *   Options to re-order.
 *
 * @return array
 *   Re-ordered options of the sort.
 */
function _alshaya_acm_product_position_sorted_options(array $options) {
  $config_sort_options = array_keys(array_filter(_alshaya_acm_product_position_get_config()));
  // If there are at least any sort option enabled.
  if (!empty($config_sort_options)) {
    $new_sort_options = [];

    // Get the default sorting for options from views config.
    $views_storage = Views::getView('alshaya_product_list')->storage;
    $views_sort = $views_storage->getDisplay('block_1')['display_options']['sorts'];

    // Iterate over config sort options to prepare new sorted array for form
    // value option.
    foreach ($config_sort_options as $sort_options) {
      // Set default sort option ASC/DESC from the views config/sort order.
      $default_sort_order = $views_sort[$sort_options]['order'];
      $secondary_sort_order = $views_sort[$sort_options]['order'] == 'ASC' ? 'DESC' : 'ASC';
      if (isset($options[$sort_options . ' ' . $default_sort_order])) {
        $new_sort_options[$sort_options . ' ' . $default_sort_order] = $options[$sort_options . ' ' . $default_sort_order];
      }
      if (isset($options[$sort_options . ' ' . $secondary_sort_order])) {
        $new_sort_options[$sort_options . ' ' . $secondary_sort_order] = $options[$sort_options . ' ' . $secondary_sort_order];
      }
    }

    if (!empty($new_sort_options)) {
      return $new_sort_options;
    }
  }

  return $options;
}

/**
 * Function to get sort options config.
 *
 * @param bool $label
 *   (Optional) True to get label else returns enabled options.
 *
 * @return array
 *   Array of enabled options / label of options.
 */
function _alshaya_acm_product_position_get_config($label = FALSE) {
  $position = \Drupal::config('alshaya_acm_product_position.settings');
  if ($label) {
    return AlshayaDynamicConfigValueBase::schemaArrayToKeyValue($position->get('sort_options_labels'));
  }
  return $position->get('sort_options');
}
