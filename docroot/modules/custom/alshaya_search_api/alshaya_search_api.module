<?php

/**
 * @file
 * Module file.
 */

use Drupal\alshaya_search_api\AlshayaSearchApiHelper;
use Drupal\alshaya_search_api\EventSubscriber\AlshayaSearchApiProductProcessedEventSubscriber;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\search_api\Entity\Index;
use Drupal\views\ViewExecutable;
use Drupal\search_api\Query\QueryInterface;

/**
 * Implements hook_theme().
 */
function alshaya_search_api_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['all_facets_block'] = [
    'template' => 'all-facets-block',
    'variables' => [
      'facet_blocks' => [],
      'show_all' => NULL,
      'class' => NULL,
    ],
  ];

  $items['grid_count_block'] = [
    'template' => 'grid-count-block',
    'variables' => [],
  ];

  return $items;
}

/**
 * Wrapper function, removes a field from Index and trigger re-index.
 *
 * @param string $field_code
 *   Index field code to be removed.
 * @param string $index
 *   Index name from which field needs to be removed.
 */
function _alshaya_search_api_remove_field_from_indexes($field_code, $index) {
  /** @var \Drupal\search_api\Entity\Index $index */
  $index = Index::load($index);

  if ($index->getField($field_code)) {
    // Removing field.
    $index->removeField($field_code);
    $index->save();

    // Re-indexing the content.
    $index->reindex();
  }
}

/**
 * Helper function to re-index all indexed items.
 *
 * @param array $indexes
 *   Indexes to re-index.
 *
 * @throws \Exception
 */
function _alshaya_search_api_reindex(array $indexes = []) {
  // Queue all products again for processing.
  \Drupal::service('alshaya_acm_product.product_queue_utility')->queueAllProducts();
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for node entities.
 */
function alshaya_search_api_node_predelete(EntityInterface $node) {
  if ($node->bundle() !== 'acq_product') {
    return;
  }

  // Do nothing if not using database index.
  if (!AlshayaSearchApiHelper::isIndexEnabled('product')) {
    return;
  }

  // Invalidate associated category listing pages.
  $category_ids = array_column($node->get('field_category')->getValue(), 'target_id');
  foreach ($category_ids ?? [] as $category_id) {
    _alshaya_performance_queue_cache_tag_for_invalidation(AlshayaSearchApiProductProcessedEventSubscriber::CACHE_TAG_PREFIX . $category_id);
  }

  // Invalidate associated promotion nodes.
  $item_id = 'entity:node/' . $node->id() . ':' . $node->language()->getId();
  $promotion_nids = \Drupal::service('alshaya_search_api.data_helper')->getIndexedData($item_id, 'promotion_nid');
  foreach ($promotion_nids as $nid) {
    _alshaya_performance_queue_cache_tag_for_invalidation('node:' . $nid);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function alshaya_search_api_views_pre_render(ViewExecutable $view) {
  // Override the 'result summary' header for PLP and Search.
  if ($view->id() == 'search' || $view->id() == 'alshaya_product_list') {
    $view->element['#attached']['library'][] = 'alshaya_search_api/facets_language_switcher';
  }

  // Add 'back to list' library to search/plp/promo page.
  if (\Drupal::config('alshaya_acm_product.settings')->get('back_to_list')) {
    $view->element['#attached']['library'][] = 'alshaya_search_api/back_to_list';
  }
}

/**
 * Implements hook_language_switch_links_alter().
 */
function alshaya_search_api_language_switch_links_alter(array &$links, $type, Url $url) {
  $query = \Drupal::request()->query->all();
  unset($query['_wrapper_format']);

  // Alter block only if we have selected color query parameter on a PDP.
  if (!empty($query)) {
    /** @var \Drupal\alshaya_search_api\AlshayaSearchApiHelper $helper */
    $helper = \Drupal::service('alshaya_search_api.helper');

    // Remove the selected color parameter in the query string for all except
    // current language.
    $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($links as $langcode => $link) {
      if ($langcode != $current_langcode) {
        $links[$langcode]['query'] = $helper->getParamsInOtherLanguage($langcode, $query);
      }
    }
  }
}

/**
 * This code is to be executed one time only but on MC, HM, BBW.
 */
function _alshaya_search_api_refactor_sku_base_fields() {
  $configFactory = \Drupal::configFactory();

  // First remove all existing block and facet configs.
  $blocks = [
    "block.block.size",
    "block.block.collection",
    "block.block.color",
    "block.block.brand",
    "block.block.promotionsizefacet",
    "block.block.promotionbrandfacet",
    "block.block.promotioncollectionfacet",
    "block.block.promotioncolorfacet",
    "block.block.skusskureferencebrand",
    "block.block.skusskureferencecollection",
    "block.block.skusskureferencecolor",
    "block.block.skusskureferencesize",
    "block.block.concept",
    "block.block.plpconcept",
    "block.block.promotionconcept",
    "block.block.collection1",
    "block.block.fragrancecat",
    "block.block.fragrancename",
    "block.block.plpcollection1",
    "block.block.plpfragrancecat",
    "block.block.plpfragrancename",
    "block.block.promotioncollection1",
    "block.block.promotionfragrancecat",
    "block.block.promotionfragrancename",
  ];

  foreach ($blocks as $block) {
    $config = $configFactory->getEditable($block);
    if ($config) {
      $config->delete();
    }
  }

  $facets = [
    "facets.facet.plp_concept",
    "facets.facet.promotion_concept",
    "facets.facet.promotion_brand_facet",
    "facets.facet.promotion_collection_facet",
    "facets.facet.promotion_color_facet",
    "facets.facet.promotion_size_facet",
    "facets.facet.skus_sku_reference_brand",
    "facets.facet.skus_sku_reference_collection",
    "facets.facet.skus_sku_reference_color",
    "facets.facet.skus_sku_reference_size",
    "facets.facet.concept",
    "facets.facet.fragrancecat",
    "facets.facet.fragrancename",
    "facets.facet.collection1",
    "facets.facet.color",
    "facets.facet.brand",
    "facets.facet.collection",
    "facets.facet.size",
    "facets.facet.plp_collection1",
    "facets.facet.plp_fragrancecat",
    "facets.facet.plp_fragrancename",
    "facets.facet.promotion_collection1",
    "facets.facet.promotion_fragrancecat",
    "facets.facet.promotion_fragrancename",
  ];

  foreach ($facets as $facet) {
    $config = $configFactory->getEditable($facet);
    if ($config) {
      $config->delete();
    }
  }

  // Reset filter bar configs.
  alshaya_config_install_configs(['facets_summary.facets_summary.filter_bar'], 'alshaya_search');
  alshaya_config_install_configs(['facets_summary.facets_summary.filter_bar_plp'], 'alshaya_product', 'optional');
  alshaya_config_install_configs(['facets_summary.facets_summary.filter_bar_promotions'], 'alshaya_acm_promotion', 'optional');

  /** @var \Drupal\acq_sku\SKUFieldsManager $fieldsManager */
  $fieldsManager = \Drupal::service('acq_sku.fields_manager');
  $fieldsManager->resetBaseFields();
}

/**
 * Implements hook_search_api_query_alter().
 *
 * Alter query to filter in stock products.
 */
function alshaya_search_api_search_api_query_alter(QueryInterface &$query) {
  if (\Drupal::config('alshaya_search_api.listing_settings')->get('filter_oos_product')) {
    $stock_condition = $query->createConditionGroup('AND');
    $stock_condition->addCondition('stock', 0, '>');
    $query->getConditionGroup()->addConditionGroup($stock_condition);
  }
}

/**
 * Implements hook_modules_installed().
 */
function alshaya_search_api_modules_uninstalled($modules) {
  if (!in_array('alshaya_search_algolia', $modules)) {
    return;
  }

  // Reset configs overridden by alshaya_search_algolia module.
  alshaya_config_install_configs(['search_api.index.acquia_search_index'], 'alshaya_search', 'optional');
  alshaya_config_install_configs(['block.block.keywordsearchblock'], 'alshaya_transac', 'optional');
}

/**
 * Implements hook_alshaya_master_post_drupal_install().
 */
function alshaya_search_api_alshaya_master_post_drupal_install() {
  \Drupal::service('module_installer')->install(['alshaya_algolia_react']);
}
