<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Plugin\PluginBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
use Drupal\Core\Url;
use Drupal\search_api\Query\QueryInterface as SearchApiQueryInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\views\ViewExecutable;
use Drupal\facets\FacetInterface;
use Solarium\Core\Query\QueryInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_acsf_registry().
 *
 * Adding our custom class to the registry that changes Alshaya configuration.
 */
function alshaya_search_acsf_registry() {
  return [
    'events' => [
      [
        'weight' => 15,
        'type' => 'site_duplication_scrub',
        'class' => '\Drupal\alshaya_search\Event\AlshayaAcsfDuplicationScrubConfigurationHandler',
      ],
    ],
  ];
}

/**
 * Implements hook_views_pre_render().
 */
function alshaya_search_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'search') {
    if (!empty($view->getExposedInput()['keywords'])) {
      $view->setTitle(t('Search results for "@keyword"', ['@keyword' => $view->getExposedInput()['keywords']]));
    }
    else {
      $view->setTitle(t('Search results'));
    }

    // Add search library to search page.
    $view->element['#attached']['library'][] = 'alshaya_search/alshaya_search';
  }

  // Override the 'result summary' header for PLP and Search.
  if ($view->id() == 'search' || $view->id() == 'alshaya_product_list') {
    // Override the 'result summary' header.
    $format_plural = new PluralTranslatableMarkup($view->total_rows, '1 item', '@count items');
    $view->header['result']->options['content'] = $format_plural;
  }
}

/**
 * Implements hook_views_pre_build().
 */
function alshaya_search_views_pre_build(ViewExecutable $view) {
  if (in_array($view->id(), ['search', 'alshaya_product_list'])) {
    $view->display_handler->display['cache_metadata']['contexts'][] = 'facets';
    $view->element['#cache']['contexts'][] = 'facets';
  }

  if (in_array($view->id(), ['search', 'alshaya_product_list'])) {
    // If AND operator setting is enabled, change operator to AND.
    if (\Drupal::config('alshaya_config.settings')->get('alshaya_search_and_operator')) {
      $view->filter['search_api_fulltext']->operator = 'and';
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (($form['#id'] === 'views-exposed-form-search-page') ||
      ($form['#id'] === 'views-exposed-form-alshaya-product-list-block-1') ||
      ($form['#id'] === 'views-exposed-form-alshaya-product-list-block-2')) {
    $form['facets_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => 'facets-hidden-container',
      ],
    ];

    $form['#attached']['library'][] = 'alshaya_search/alshaya_search';
    $form['keywords']['#attributes'] = ['data-bef-auto-submit-exclude' => ''];

    if ($form['#id'] === 'views-exposed-form-search-page') {
      array_unshift($form['#submit'], 'alshaya_search_keyword_language_redirect');

      // Best relevance ascending option removed.
      if (isset($form['sort_bef_combine']['#options']['search_api_relevance ASC'])) {
        unset($form['sort_bef_combine']['#options']['search_api_relevance ASC']);
      }

      // New In ascending option removed.
      if (isset($form['sort_bef_combine']['#options']['created ASC'])) {
        unset($form['sort_bef_combine']['#options']['created ASC']);
      }

      // Disable sort options if not enabled.
      $enabled_sorts = _alshaya_search_get_config();
      if (!$enabled_sorts) {
        $form['#access'] = FALSE;
      }
      else {
        foreach ($enabled_sorts as $key => $sort) {
          if (!$sort) {
            if (isset($form['sort_bef_combine']['#options']["$key ASC"])) {
              unset($form['sort_bef_combine']['#options']["$key ASC"]);
            }
            if (isset($form['sort_bef_combine']['#options']["$key DESC"])) {
              unset($form['sort_bef_combine']['#options']["$key DESC"]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function alshaya_search_theme_registry_alter(array &$theme_registry) {
  if (isset($theme_registry['facets_result_item'])) {
    $theme_registry['facets_result_item']['path'] = drupal_get_path('module', 'alshaya_search') . '/templates';
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_search_theme($existing, $type, $theme, $path) {
  return [
    'alshaya_search_gallery' => [
      'variables' => [
        'mainImage' => [],
        'thumbnails' => [],
      ],
      'template' => 'alshaya_search_gallery',
    ],
  ];
}

/**
 * Implements hook_facets_search_api_query_type_mapping_alter().
 */
function alshaya_search_facets_search_api_query_type_mapping_alter($backend_plugin_id, array &$query_types) {
  if (in_array($backend_plugin_id,
    [
      'search_api_solr',
      'search_api_db',
      'search_api_solr_multilingual',
    ]
  )) {
    // For some reason the SKU Final Price shows as a string, so we need to
    // manually add numeric as an option.
    // We want these all to use alshaya_search_granular which is a customization
    // of search_api_granular.
    $query_types['numeric'] = 'alshaya_search_granular';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_search_page_attachments_alter(array &$attachments) {
  $current_path = \Drupal::service('path.current')->getPath();
  // Remove canonical link for search page.
  if ($current_path == '/search') {
    foreach ($attachments['#attached']['html_head'] as $key => $value) {
      if ($value[1] == 'canonical_url') {
        unset($attachments['#attached']['html_head'][$key]);
      }
    }
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function alshaya_search_ajax_render_alter(array &$data) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $valid_routes = [
    'views.ajax',
  ];

  // Only for ajax route.
  if (in_array($route_name, $valid_routes)) {
    foreach ($data as &$command) {
      if ($command['command'] == 'settings' && isset($command['settings']['views']['ajaxViews'])) {
        $dom_id = key($command['settings']['views']['ajaxViews']);
        $view_name = $command['settings']['views']['ajaxViews'][$dom_id]['view_name'];
        // If 'search' view.
        if ($view_name == 'search') {
          // Adding a command.
          $data[] = [
            'selector' => NULL,
            'command' => 'invoke',
            'method' => 'alshayaSearchHeaderUpdate',
            'args' => [],
          ];
          $data[] = [
            'selector' => NULL,
            'command' => 'invoke',
            'method' => 'alshayaAttachSearchSlider',
            'args' => [],
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function alshaya_search_entity_type_alter(array &$entity_types) {
  $entity_types['facets_facet']->setFormClass('edit', 'Drupal\alshaya_search\Form\AlshayaSearchFacetForm');
}

/**
 * Implements hook_block_view_alter().
 */
function alshaya_search_block_view_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getBaseId() === 'facet_block') {
    $facet_configuration = $block->getConfiguration();
    $facet_mapping = $facet_configuration['id'];
    $facet_id = explode(PluginBase::DERIVATIVE_SEPARATOR, $facet_mapping)[1];
    $display_textbox_item_count = FALSE;
    /** @var \Drupal\facets\FacetInterface $facet */
    $facet_storage = \Drupal::service('entity_type.manager')->getStorage('facets_facet');
    $facet = $facet_storage->load($facet_id);
    $display_textbox = $facet->getThirdPartySetting('alshaya_search', 'display_textbox');
    if ($display_textbox) {
      $display_textbox_item_count = $facet->getThirdPartySetting('alshaya_search', 'display_textbox_item_count');
    }

    if ($display_textbox_item_count) {
      $build['#attached']['drupalSettings']['alshaya_search_facets_display_textbox'] = [
        $block->getPluginId() => $display_textbox_item_count,
      ];
    }

    // Add the currency variable in JS.
    if ($block->getConfiguration()['id'] == 'facet_block:final_price') {
      $build['#attached']['drupalSettings']['alshaya_search_price_currency'] = \Drupal::config('acq_commerce.currency')->get('currency_code');
    }
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function alshaya_search_search_api_solr_query_alter(QueryInterface $solarium_query, SearchApiQueryInterface $query) {
  $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $solarium_query->addParam('fq', 'ss_search_api_language:"' . $current_langcode . '"');
}

/**
 * Submit function to redirect user to correct language, based on keyword.
 */
function alshaya_search_keyword_language_redirect($form, FormStateInterface $form_state) {
  $keyword = $form_state->getValue('keywords');

  // Don't process if some notorious guy reached search page directly.
  if (empty($keyword)) {
    return;
  }

  // Redirect to correct language, based on user input.
  $languages = \Drupal::languageManager()->getLanguages();
  if (count($languages) > 1 && array_key_exists('ar', $languages)) {
    // Identify a non arabic language in the list of language.
    if (\Drupal::languageManager()->getDefaultLanguage() != 'ar') {
      // Pick the default language if it is not arabic.
      $default_language = \Drupal::languageManager()->getDefaultLanguage();
    }
    else {
      unset($languages['ar']);
      $default_language = current($languages);
    }
    if (\Drupal::languageManager()->getCurrentLanguage()->getId() == 'ar') {
      // If none of the characters of the keywords are in arabic.
      if (!preg_match("/\p{Arabic}/u", $keyword)) {
        // Redirect to the previously identified non arabic language.
        $url = Url::fromUserInput('/search', [
          'query' => ['keywords' => $keyword],
          'absolute' => TRUE,
          'language' => $default_language,
        ])->toString();
        $response = new RedirectResponse($url);
        $response->send();
      }
    }
    else {
      if (preg_match("/^\p{Arabic}+$/u", $keyword)) {
        // Redirect to arabic, if all characters are in arabic.
        $url = Url::fromUserInput('/search', [
          'query' => ['keywords' => $keyword],
          'absolute' => TRUE,
          'language' => $languages['ar'],
        ])->toString();
        $response = new RedirectResponse($url);
        $response->send();
      }
    }
  }
}

/**
 * Function to get SRP sort options config.
 */
function _alshaya_search_get_config() {
  return \Drupal::config('alshaya_search.settings')->get('sort_options');
}

/**
 * Implements hook_alshaya_i18n_onetime_translation_add().
 */
function alshaya_search_alshaya_i18n_onetime_translation_add() {
  _alshaya_search_translate_search_view_config();
}

/**
 * Translates the search view settings / config.
 */
function _alshaya_search_translate_search_view_config() {
  $search_view = \Drupal::languageManager()->getLanguageConfigOverride('ar', 'views.view.search');

  $search_view->set('display.default.display_options.exposed_form.options.exposed_sorts_label', 'رتب حسب');
  $search_view->set('display.default.display_options.exposed_form.options.bef.sort.advanced.combine_rewrite', 'التطابق تنازلي|التطابق
الاسم تصاعدي|الاسم من أ إلى ي
الاسم تنازلي|الاسم من ي إلى أ
السعر تنازلي|السعر من الأعلى إلى الأدنى
السعر تصاعدي|السعر من الأدنى إلى الأعلى');
  $search_view->set('display.default.display_options.exposed_form.options.sort_asc_label', 'تصاعدي');
  $search_view->set('display.default.display_options.exposed_form.options.sort_desc_label', 'تنازلي');
  $search_view->set('display.default.display_options.sorts.search_api_relevance.expose.label', 'التطابق');
  $search_view->set('display.default.display_options.sorts.final_price.expose.label', 'السعر');
  $search_view->set('display.default.display_options.sorts.title.expose.label', 'الاسم');
  $search_view->set('display.default.display_options.empty.area.content.value', "<p>لا يوجد نتائج لبحثك</p>\r\n");
  $search_view->set('display.default.display_options.header.result.content', '@total القطع');
  $search_view->set('display.default.display_options.pager.options.views_infinite_scroll.button_text', 'عرض المزيد');

  $search_view->save();
}

/**
 * Implements hook_alshaya_profile_installed_final_task().
 */
function alshaya_search_alshaya_profile_installed_final_task() {
  // Disable Acquia Search View if available.
  $view = \Drupal::configFactory()->getEditable('views.view.acquia_search');

  if ($view->getRawData()) {
    $view->set('status', FALSE);
    $view->save();
  }

  if (isset($_ENV['AH_SITE_NAME'])) {
    // Enable alshaya_search_acquia_search to ensure config are overridden to
    // use solr on cloud.
    \Drupal::service('module_installer')->install(['alshaya_search_acquia_search']);
  }
  else {
    // Enable alshaya_search_local_search to ensure config are overridden to
    // use solr in local.
    \Drupal::service('module_installer')->install(['alshaya_search_local_search']);
  }
}

/**
 * Implements hook_alshaya_facet_results_alter().
 */
function alshaya_search_alshaya_facet_hierarchial_tree_alter(&$results) {
  $ids = array_keys($results);

  // List of term ids that need to be hidden based on its parent's not
  // included in menu flag.
  $hide_tids = [];

  // Process results array & mark terms for hiding.
  if (empty($hide_tids)) {
    // Load indexed term object.
    $entities = \Drupal::service('entity_type.manager')
      ->getStorage('taxonomy_term')
      ->loadMultiple($ids);

    // Check each term for include_menu flag & mark its children for hiding in
    // case its flagged to be not in menu.
    foreach ($results as $tid => $result) {
      if ((($term = $entities[$tid]) instanceof TermInterface) &&
        ($term->get('field_category_include_menu')->getString() != 1)) {
        $hide_tids[] = $tid;
        _alshaya_search_mark_hide_chidren($result, $hide_tids);
      }
    }

    // Remove any duplicate term ids.
    $hide_tids = array_unique($hide_tids);
  }

  // Process tids marked for hiding.
  _alshaya_search_hide_terms($hide_tids, $results);
}

/**
 * Helper function to hide all children terms.
 */
function _alshaya_search_mark_hide_chidren($result, &$hide_tids) {
  if (count($children = $result->getChildren()) > 0) {
    foreach ($children as $key => $child) {
      $hide_tids[] = $key;
      _alshaya_search_mark_hide_chidren($child, $hide_tids);
    }
  }
}

/**
 * Helper function to hide marked terms from category facet.
 */
function _alshaya_search_hide_terms($hide_tids, &$results) {
  foreach ($hide_tids as $tid) {
    unset($results[$tid]);
  }
}

/**
 * Implements hook_facets_query_string_alter().
 */
function alshaya_search_facets_query_string_alter(FacetInterface $facet, array &$filter_params, array $context) {
  // Only for the category facet.
  if ($facet->getHierarchy() && !$context['result']->isActive()) {
    // If we processing the URL for an L1 item, remove all category
    // filters. Clicking on an L1 item when the active filter is something
    // else, should return back to default state.
    $facet_source_id = $facet->getFacetSourceId();

    // We doing this as for the PLP page, we not show the L1
    // (current active) item.
    $facet_count = $facet_source_id == 'search_api:views_block__alshaya_product_list__block_1' ? 1 : 0;

    // Filter alias.
    $url_alias = $facet->getUrlAlias();
    // Get child and parents of result.
    $parent_ids = $facet->getHierarchyInstance()->getParentIds($context['result']->getRawValue());
    $child_ids = $facet->getHierarchyInstance()->getNestedChildIds($context['result']->getRawValue());

    if ((count($parent_ids) === $facet_count) &&
      (isset($context['active_filters'][$url_alias])) &&
      (count($context['active_filters'][$url_alias]) > 0)) {
      foreach ($filter_params as $key => $param) {
        if (strpos($param, $url_alias) === 0) {
          foreach ($child_ids as $child) {
            // If root term has any child active, then unset it.
            if (in_array($child, $context['active_filters'][$url_alias])) {
              unset($filter_params[$key]);
              break;
            }
          }
        }
      }
    }
  }
}
