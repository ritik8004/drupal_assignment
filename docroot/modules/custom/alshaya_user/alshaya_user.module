<?php

/**
 * @file
 * Module file for alshaya_user.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\block\Entity\Block;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Render\Element\PasswordConfirm;

/**
 * Check if the current user has is only authenticated user.
 *
 * @return bool
 *   Return true if user is only authenticated user.
 */
function alshaya_user_only_authenticated() {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $roles = \Drupal::currentUser()->getRoles();
    if (count($roles) == 1) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change email label.
  $form['account']['mail']['#title'] = t('Email address');

  // Reset help text for the fields.
  $form['account']['mail']['#description'] = '';
  $form['account']['name']['#description'] = '';
  $form['account']['pass']['#description'] = '';
  $form['account']['pass']['#after_build'][] = 'alshaya_user_process_password_confirm_after_build';

  // We don't want to show the terms and conditions field to logged in users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Get if user only authenticated or not.
    $only_authenticated = alshaya_user_only_authenticated();
    $form['field_terms_and_condition']['#access'] = FALSE;
    // Disabled true, if only authenticated.
    $form['account']['mail']['#disabled'] = $only_authenticated;
    // Access false, if only authenticated.
    $form['account']['current_pass']['#access'] = !$only_authenticated;
  }
  else {
    // Update title from description for terms and conditions field.
    $form['field_terms_and_condition']['widget']['#title'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');
    $form['field_terms_and_condition']['widget']['value']['#title'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');

    // Set description to NULL for terms and conditions field.
    $form['field_terms_and_condition']['widget']['#description'] = NULL;
    $form['field_terms_and_condition']['widget']['value']['#description'] = NULL;

    // Change submit button text.
    $form['actions']['submit']['#value'] = t('Create');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Add our custom submit handler function for anonymous users.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Hide mobile number field from registration page.
    $form['field_mobile_number']['#access'] = FALSE;

    $form['#validate'][] = 'alshaya_user_form_user_register_form_validate';
    $form['actions']['submit']['#submit'][] = 'alshaya_user_form_user_register_form_submit';
  }
}

/**
 * Form validate callback for user registration form.
 *
 * Validate the terms and conditions field.
 */
function alshaya_user_form_user_register_form_validate($form, FormStateInterface $form_state) {
  $terms = $form_state->getValue('field_terms_and_condition');
  if (is_array($terms) && empty($terms['value'])) {
    $form_state->setErrorByName('field_terms_and_condition', t('Please agree to the Terms and Conditions.'));
  }
}

/**
 * Form submit callback for user registration form.
 *
 * Store the email address in session and redirect to completion page.
 */
function alshaya_user_form_user_register_form_submit($form, FormStateInterface $form_state) {
  // Get form storage.
  $storage = $form_state->getStorage();

  // Get the new user account object from storage.
  $account = $storage['user'];

  // Prepare user data array.
  $user_data = ['id' => $account->id()];

  // Get the string to pass into GET.
  $user_data_string = base64_encode(json_encode($user_data));

  if (\Drupal::currentUser()->isAnonymous()) {
    // Redirect the user with email in GET.
    $form_state->setRedirect('alshaya_user.user_register_complete', ['user' => $user_data_string]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add forgot password link.
  $form['account']['forgot_password'] = [
    '#markup' => Link::createFromRoute(t('Forgot password'), 'user.pass')->toString(),
  ];

  // Change submit button text.
  $form['actions']['submit']['#value'] = t('sign in');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['forgot_text'] = [
    '#markup' => '<div class="password--message">' . t('Please enter your email address.') . '</br>' . t('We will send you an email with a password reminder.') . '</div>',
    '#weight' => -10,
  ];
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_user_preprocess_menu(&$variables) {
  // For now we want to process only for authenticated users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Loop through all the links.
    foreach ($variables['items'] as $key => &$item) {
      // We want to process only the register link.
      if ($item['url']->getRouteName() == 'user.register' || $item['url']->getRouteName() == 'user.login') {
        // Hide the register link for authenticated user.
        unset($variables['items'][$key]);
      }
    }
  }
}

/**
 * After build process callback for updating password confirm form element.
 */
function alshaya_user_process_password_confirm_after_build($element) {
  // Get tooltip content from config.
  $tooltip = \Drupal::config('alshaya_user.settings')->get('password_tooltip.value');

  // Add tooltip as suffix to first element.
  $element['pass1']['#suffix'] = '<div class="password-tooltip">
      <div class="password-tooltip-icon">!</div>
      <div class="password-tooltip-content">' . $tooltip . '</div>
    </div>';

  return $element;
}

/**
 * Implements hook_block_access().
 */
function alshaya_user_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'my account- need help' block other than user/{uid} page.
  if ($operation == 'view' && $block->id() == 'myaccountneedhelp') {
    $current_route = \Drupal::routeMatch()->getRouteName();
    return AccessResult::forbiddenIf($current_route != 'entity.user.canonical');
  }
}

/**
 * Implements hook_block_build_alter().
 */
function alshaya_user_block_build_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getPluginId() == 'system_menu_block:account') {
    $build['#cache']['contexts'][] = 'route';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_change_pwd_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['account']['pass']['#process'][] = 'alshaya_user_form_change_pwd_form_process_pass';
  // Change current password title and submit button text.
  $form['account']['current_pass']['#title'] = t('current password');
  $form['actions']['submit']['#value'] = t('change password');

  // Set this as password policy module checks for the role element.
  $form['account']['roles']['#default_value'] = [];
  // Password policy validation.
  $form['#validate'][] = '_password_policy_user_profile_form_validate';
}

/**
 * Process functon to change elements of password_confirm type field.
 */
function alshaya_user_form_change_pwd_form_process_pass(&$element, FormStateInterface $form_state, &$complete_form) {
  // Change title for password field.
  $element = PasswordConfirm::processPasswordConfirm($element, $form_state, $complete_form);
  $element['pass1']['#title'] = t('new password');
  $element['pass2']['#title'] = t('confirm password');

  // Get tooltip content from config.
  $tooltip = \Drupal::config('alshaya_user.settings')->get('password_tooltip.value');

  // Add tooltip as suffix to first element.
  $element['pass1']['#suffix'] = '<div class="password-tooltip">
      <div class="password-tooltip-icon">!</div>
      <div class="password-tooltip-content">' . $tooltip . '</div>
    </div>';

  return $element;
}

/**
 * Implements hook_element_info_alter().
 */
function alshaya_user_element_info_alter(array &$info) {
  if (isset($info['mobile_number']['#process'])) {
    $info['mobile_number']['#process'][] = '_alshaya_user_mobile_number_process';
  }
}

/**
 * Processor for the mobile number field to disable the country code.
 */
function _alshaya_user_mobile_number_process(array &$element, FormStateInterface $form_state) {
  $default_site_country = _alshaya_custom_get_site_level_country_code();

  // Set default country as per site.
  $element['country-code']['#value'] = $default_site_country;
  $options = $element['country-code']['#options'];
  $element['country-code']['#options'] = [$default_site_country => $options[$default_site_country]];

  return $element;
}
