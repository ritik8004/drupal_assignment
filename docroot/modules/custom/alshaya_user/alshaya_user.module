<?php

/**
 * @file
 * Module file for alshaya_user.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\block\Entity\Block;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Check if the current user has is only authenticated user.
 *
 * @return bool
 *   Return true if user is only authenticated user.
 */
function alshaya_user_only_authenticated() {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $roles = \Drupal::currentUser()->getRoles();
    if (count($roles) == 1) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change email label.
  $form['account']['mail']['#title'] = t('Email address');

  // Reset help text for the fields.
  $form['account']['mail']['#description'] = '';
  $form['account']['name']['#description'] = '';
  $form['account']['pass']['#description'] = '';

  // We don't want to show the terms and conditions field to logged in users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Get if user only authenticated or not.
    $only_authenticated = alshaya_user_only_authenticated();
    $form['field_terms_and_condition']['#access'] = FALSE;
    // Disabled true, if only authenticated.
    $form['account']['mail']['#disabled'] = $only_authenticated;
    // Access false, if only authenticated.
    $form['account']['current_pass']['#access'] = !$only_authenticated;
  }
  else {
    // Update title from description for terms and conditions field.
    $form['field_terms_and_condition']['widget']['#title'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');
    $form['field_terms_and_condition']['widget']['value']['#title'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');

    // Set description to NULL for terms and conditions field.
    $form['field_terms_and_condition']['widget']['#description'] = NULL;
    $form['field_terms_and_condition']['widget']['value']['#description'] = NULL;

    // Change submit button text.
    $form['actions']['submit']['#value'] = t('Create');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Add our custom submit handler function for anonymous users.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Hide mobile number field from registration page.
    $form['field_mobile_number']['#access'] = FALSE;

    $form['#validate'][] = 'alshaya_user_form_user_register_form_validate';
    $form['actions']['submit']['#submit'][] = 'alshaya_user_form_user_register_form_submit';

    // Change password_confirm field to normal password field.
    $form['account']['pass']['#title'] = t('Password');
    $form['account']['pass']['#type'] = 'password';
    $form['account']['pass']['#attributes']['data-twig-suggestion'] = 'userregisterformpassword';
  }
}

/**
 * Form validate callback for user registration form.
 *
 * Validate the terms and conditions field.
 */
function alshaya_user_form_user_register_form_validate($form, FormStateInterface $form_state) {
  $terms = $form_state->getValue('field_terms_and_condition');
  if (is_array($terms) && empty($terms['value'])) {
    $form_state->setErrorByName('field_terms_and_condition', t('Please agree to the Terms and Conditions.'));
  }
}

/**
 * Form submit callback for user registration form.
 *
 * Store the email address in session and redirect to completion page.
 */
function alshaya_user_form_user_register_form_submit($form, FormStateInterface $form_state) {
  // Get form storage.
  $storage = $form_state->getStorage();

  // Get the new user account object from storage.
  $account = $storage['user'];

  // Prepare user data array.
  $user_data = ['id' => $account->id()];

  // Get the string to pass into GET.
  $user_data_string = base64_encode(json_encode($user_data));

  if (\Drupal::currentUser()->isAnonymous()) {
    // Redirect the user with email in GET.
    $form_state->setRedirect('alshaya_user.user_register_complete', ['user' => $user_data_string]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add forgot password link.
  $form['account']['forgot_password'] = [
    '#markup' => Link::createFromRoute(t('Forgot password'), 'user.pass')->toString(),
  ];
  $key = array_search('email_registration_user_login_validate', $form['name']['#element_validate']);
  $form['name']['#element_validate'][$key] = 'alshaya_user_user_email_validate';

  $key = array_search('::validateFinal', $form['#validate']);
  $form['#validate'][$key] = 'alshaya_user_user_login_validate_final';

  // Change submit button text.
  $form['actions']['submit']['#value'] = t('sign in');
}

/**
 * Element validate callback for user login name field.
 *
 * Update email address error msg.
 */
function alshaya_user_user_email_validate($form, FormStateInterface $form_state) {
  $mail = $form_state->getValue('name');
  if (!empty($mail)) {
    $config = \Drupal::config('email_registration.settings');
    if ($user = user_load_by_mail($mail)) {
      $form_state->setValue('name', $user->getAccountName());
    }
    elseif (!$config->get('login_with_username')) {
      $form_state->setErrorByName('name', t('Invalid email address.'));
    }
  }
}

/**
 * Validate callback: for user login form.
 *
 * Change the error messages as per the request, Show separate error msg
 * for username and password field.
 *
 * @see \Drupal\user\Form\UserLoginForm::validateFinal();
 */
function alshaya_user_user_login_validate_final(array &$form, FormStateInterface $form_state) {
  $flood = \Drupal::getContainer()->get('flood');
  $userStorage = \Drupal::getContainer()->get('entity.manager')->getStorage('user');
  $flood_config = \Drupal::configFactory()->getEditable('user.flood');
  if (!$form_state->get('uid')) {
    // Always register an IP-based failed login event.
    $flood->register('user.failed_login_ip', $flood_config->get('ip_window'));
    // Register a per-user failed login event.
    if ($flood_control_user_identifier = $form_state->get('flood_control_user_identifier')) {
      $flood->register('user.failed_login_user', $flood_config->get('user_window'), $flood_control_user_identifier);
    }

    if ($flood_control_triggered = $form_state->get('flood_control_triggered')) {
      if ($flood_control_triggered == 'user') {
        $form_state->setErrorByName('name', \Drupal::translation()->formatPlural($flood_config->get('user_limit'), 'There has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', 'There have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', [':url' => Url::fromRoute('user.pass')->toString()]));
      }
      else {
        // We did not find a uid, so the limit is IP-based.
        $form_state->setErrorByName('name', t('Too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', [':url' => Url::fromRoute('user.pass')->toString()]));
      }
    }
    else {
      // Use $form_state->getUserInput() in the error message to guarantee
      // that we send exactly what the user typed in. The value from
      // $form_state->getValue() may have been modified by validation
      // handlers that ran earlier than this one.
      $user_input = $form_state->getUserInput();
      $query = isset($user_input['name']) ? ['name' => $user_input['name']] : [];
      $accounts = $userStorage->loadByProperties(['name' => $form_state->getValue('name')]);
      if (!empty($accounts)) {
        $form_state->setErrorByName('pass', t('Invalid password.'));
        \Drupal::logger('user')->notice('Login attempt failed for %user.', ['%user' => $form_state->getValue('name')]);
      }
      else {
        $form_state->setErrorByName('name', t('Invalid email address.'));
        $form_state->setErrorByName('pass', t('Invalid password.'));
        // If the username entered is not a valid user,
        // only store the IP address.
        \Drupal::logger('user')->notice('Login attempt failed from %ip.', ['%ip' => \Drupal::request()->getClientIp()]);
      }
    }
  }
  elseif ($flood_control_user_identifier = $form_state->get('flood_control_user_identifier')) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    $flood->clear('user.failed_login_user', $flood_control_user_identifier);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['forgot_text'] = [
    '#markup' => '<div class="password--message">' . t('Please enter your email address.') . '</br>' . t('We will send you an email with a password reminder.') . '</div>',
    '#weight' => -10,
  ];
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_user_preprocess_menu(&$variables) {
  // For now we want to process only for authenticated users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Loop through all the links.
    foreach ($variables['items'] as $key => &$item) {
      try {
        // We want to process only the register link.
        if ($item['url']->getRouteName() == 'user.register' || $item['url']->getRouteName() == 'user.login') {
          // Hide the register link for authenticated user.
          unset($variables['items'][$key]);
        }
      }
      catch (\Exception $e) {
        // Do nothing, issue may be with external link.
      }
    }
  }
}

/**
 * Implements hook_block_access().
 */
function alshaya_user_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'my account- need help' block other than user/{uid} page.
  if ($operation == 'view' && $block->id() == 'myaccountneedhelp') {
    $current_route = \Drupal::routeMatch()->getRouteName();
    return AccessResult::forbiddenIf($current_route != 'entity.user.canonical');
  }
}

/**
 * Implements hook_block_build_alter().
 */
function alshaya_user_block_build_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getPluginId() == 'system_menu_block:account') {
    $build['#cache']['contexts'][] = 'route';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_change_pwd_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change password_confirm field to normal password field.
  $form['account']['pass']['#title'] = t('new password');
  $form['account']['pass']['#type'] = 'password';
  $form['account']['pass']['#attributes']['data-twig-suggestion'] = 'userregisterformpassword';

  // Change current password title and submit button text.
  $form['account']['current_pass']['#title'] = t('current password');
  $form['actions']['submit']['#value'] = t('change password');

  // Set this as password policy module checks for the role element.
  $form['account']['roles']['#default_value'] = [];

  // Password policy validation.
  $form['#validate'][] = '_password_policy_user_profile_form_validate';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_user_user_presave(EntityInterface $entity) {
  // Remove leading zeroes to avoid issues of having unknown number type.
  if ($values = $entity->get('field_mobile_number')->getValue()) {
    foreach ($values as $index => $phone) {
      $values[$index]['local_number'] = ltrim($phone['local_number'], 0);
    }

    $entity->get('field_mobile_number')->setValue($values);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function alshaya_user_element_info_alter(array &$info) {
  if (isset($info['mobile_number']['#process'])) {
    $info['mobile_number']['#process'][] = '_alshaya_user_mobile_number_process';
  }
}

/**
 * Processor for the mobile number field to disable the country code.
 */
function _alshaya_user_mobile_number_process(array &$element, FormStateInterface $form_state) {
  $default_site_country = _alshaya_custom_get_site_level_country_code();

  // Set default country as per site.
  $element['country-code']['#value'] = $default_site_country;
  $options = $element['country-code']['#options'];
  $element['country-code']['#options'] = [$default_site_country => $options[$default_site_country]];

  // Make mobile number required only for contact form.
  if ($form_state->getBuildInfo()['form_id'] == 'webform_submission_alshaya_contact_form') {
    $element['mobile']['#required'] = TRUE;
  }

  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function alshaya_user_preprocess_page_title(&$variables) {
  // Add back link for my account page sub links.
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/user') !== FALSE && $user = \Drupal::request()->attributes->get('user')) {
    $arg = explode('/', $current_path);
    if (!empty($arg[3])) {
      $variables['title_prefix']['back_link'] = [
        '#markup' => Link::createFromRoute('back', 'entity.user.canonical', ['user' => $user->id()], [
          'attributes' => ['class' => ['back-link']],
        ])->toString(),
        '#weight' => 100,
      ];
    }
  }
}
