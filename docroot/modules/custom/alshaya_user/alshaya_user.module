<?php

/**
 * @file
 * Module file for alshaya_user.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

/**
 * Check if the current user has is only authenticated user.
 *
 * @return bool
 *   Return true if user is only authenticated user.
 */
function alshaya_user_only_authenticated() {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $roles = \Drupal::currentUser()->getRoles();
    if (count($roles) == 1) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change email label.
  $form['account']['mail']['#title'] = t('Email address');

  // Reset help text for the fields.
  $form['account']['mail']['#description'] = '';
  $form['account']['name']['#description'] = '';
  $form['account']['pass']['#description'] = '';
  $form['account']['pass']['#after_build'][] = 'alshaya_user_process_password_confirm_after_build';

  // We don't want to show the terms and conditions field to logged in users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Get if user only authenticated or not.
    $only_authenticated = alshaya_user_only_authenticated();
    $form['field_terms_and_condition']['#access'] = FALSE;
    // Disabled true, if only authenticated.
    $form['account']['mail']['#disabled'] = $only_authenticated;
    // Access false, if only authenticated.
    $form['account']['current_pass']['#access'] = !$only_authenticated;
  }
  else {
    // Update title from description for terms and conditions field.
    $form['field_terms_and_condition']['widget']['#title'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');
    $form['field_terms_and_condition']['widget']['value']['#title'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');

    // Set description to NULL for terms and conditions field.
    $form['field_terms_and_condition']['widget']['#description'] = NULL;
    $form['field_terms_and_condition']['widget']['value']['#description'] = NULL;

    // Change submit button text.
    $form['actions']['submit']['#value'] = t('Create');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Add our custom submit handler function for anonymous users.
  if (\Drupal::currentUser()->isAnonymous()) {
    $form['actions']['submit']['#submit'][] = 'alshaya_user_form_user_register_form_submit';
  }
}

/**
 * Form submit callback for user registration form.
 *
 * Store the email address in session and redirect to completion page.
 */
function alshaya_user_form_user_register_form_submit($form, FormStateInterface $form_state) {
  // Get form storage.
  $storage = $form_state->getStorage();

  // Get the new user account object from storage.
  $account = $storage['user'];

  // Prepare user data array.
  $user_data = ['id' => $account->id()];

  // Get the string to pass into GET.
  $user_data_string = base64_encode(json_encode($user_data));

  // Redirect the user with email in GET.
  return $form_state->setRedirect('alshaya_user.user_register_complete', ['user' => $user_data_string]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add forgot password link.
  $form['account']['forgot_password'] = [
    '#markup' => Link::createFromRoute(t('Forgot password'), 'user.pass')->toString(),
  ];

  // Change submit button text.
  $form['actions']['submit']['#value'] = t('sign in');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['forgot_text'] = [
    '#markup' => t('Please enter your email address.') . '</br>' . t('We will send you an email with a password reminder.'),
    '#weight' => -10,
  ];
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_user_preprocess_menu(&$variables) {
  // For now we want to process only for authenticated users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Loop through all the links.
    foreach ($variables['items'] as $key => &$item) {
      // We want to process only the register link.
      if ($item['url']->getRouteName() == 'user.register') {
        // Hide the register link for authenticated user.
        unset($variables['items'][$key]);
      }
    }
  }
}

/**
 * After build process callback for updating password confirm form element.
 */
function alshaya_user_process_password_confirm_after_build($element) {
  // Get tooltip content from config.
  $tooltip = \Drupal::config('alshaya_user.settings')->get('password_tooltip.value');

  // Add tooltip as suffix to first element.
  $element['pass1']['#suffix'] = '<div class="password-tooltip>
      <div class="password-tooltip-icon"></div>
      <div class="password-tooltip-content">' . $tooltip . '</div>
    </div>';

  return $element;
}
