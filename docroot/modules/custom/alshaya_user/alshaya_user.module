<?php

/**
 * @file
 * Module file for alshaya_user.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;

/**
 * Check if the current user has is only authenticated user.
 *
 * @return bool
 *   Return true if user is only authenticated user.
 */
function alshaya_user_only_authenticated() {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $roles = \Drupal::currentUser()->getRoles();
    if (count($roles) == 1) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change email label.
  $form['account']['mail']['#title'] = t('Email address');

  // Reset help text for the fields.
  $form['account']['mail']['#description'] = '';
  $form['account']['name']['#description'] = '';
  $form['account']['pass']['#description'] = '';

  // We don't want to show the terms and conditions field to logged in users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Get if user only authenticated or not.
    $only_authenticated = alshaya_user_only_authenticated();
    // Disabled true, if only authenticated.
    $form['account']['mail']['#disabled'] = $only_authenticated;
    // Access false, if only authenticated.
    $form['account']['current_pass']['#access'] = !$only_authenticated;
  }
  else {
    // Add markup for terms and conditions.
    $form['field_subscribe_newsletter']['widget']['#suffix'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');
    // Change submit button text.
    $form['actions']['submit']['#value'] = t('Create');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Add our custom submit handler function for anonymous users.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Hide mobile number field from registration page.
    $form['field_mobile_number']['#access'] = FALSE;

    $form['actions']['submit']['#submit'][] = 'alshaya_user_form_user_register_form_submit';

    // Add markup for terms and conditions.
    $form['field_subscribe_newsletter']['widget']['#suffix'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');

    // Change password_confirm field to normal password field.
    $form['account']['pass']['#title'] = t('Password');
    $form['account']['pass']['#type'] = 'password';
    $form['account']['pass']['#attributes']['data-twig-suggestion'] = 'userregisterformpassword';
  }
}

/**
 * Form submit callback for user registration form.
 *
 * Store the email address in session and redirect to completion page.
 */
function alshaya_user_form_user_register_form_submit($form, FormStateInterface $form_state) {
  // Get form storage.
  $storage = $form_state->getStorage();

  // Get the new user account object from storage.
  $account = $storage['user'];

  // Redirect the user with email in GET to registration complete screen.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Prepare user data array.
    $user_data = ['id' => $account->id()];

    // Get the string to pass into GET.
    $user_data_string = base64_encode(json_encode($user_data));

    $form_state->setRedirect('alshaya_user.user_register_complete', ['user' => $user_data_string]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add forgot password link.
  $form['account']['forgot_password'] = [
    '#markup' => Link::createFromRoute(t('Forgot password?'), 'user.pass')->toString(),
  ];

  // Change submit button text.
  $form['actions']['submit']['#value'] = t('sign in');

  // Attach the JS library.
  $form['#attached']['library'][] = 'alshaya_user/user_login';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['forgot_text'] = [
    '#markup' => '<div class="password--message">' . t('Please enter your email address.') . '</br>' . t('We will send you an email with a password reminder.') . '</div>',
    '#weight' => -10,
  ];
}

/**
 * Implements hook_preprocess_menu().
 */
function alshaya_user_preprocess_menu(&$variables) {
  // For now we want to process only for authenticated users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Loop through all the links.
    foreach ($variables['items'] as $key => &$item) {
      try {
        // We want to process only the register link.
        if ($item['url']->getRouteName() == 'user.register' || $item['url']->getRouteName() == 'user.login') {
          // Hide the register link for authenticated user.
          unset($variables['items'][$key]);
        }
      }
      catch (\Exception $e) {
        // Do nothing, issue may be with external link.
      }
    }
  }
}

/**
 * Implements hook_block_access().
 */
function alshaya_user_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'my account- need help' block other than user/{uid} page.
  if ($operation == 'view' && $block->id() == 'myaccountneedhelp') {
    $current_route = \Drupal::routeMatch()->getRouteName();
    return AccessResult::forbiddenIf($current_route != 'entity.user.canonical');
  }
}

/**
 * Implements hook_block_build_alter().
 */
function alshaya_user_block_build_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getPluginId() == 'system_menu_block:account') {
    $build['#cache']['contexts'][] = 'route';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_user_form_change_pwd_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change password_confirm field to normal password field.
  $form['account']['pass']['#title'] = t('new password');
  $form['account']['pass']['#type'] = 'password';
  $form['account']['pass']['#attributes']['data-twig-suggestion'] = 'userregisterformpassword';

  // Change current password title and submit button text.
  $form['account']['current_pass']['#title'] = t('current password');
  $form['actions']['submit']['#value'] = t('change password');

  // Set this as password policy module checks for the role element.
  $form['account']['roles']['#default_value'] = [];

  // Password policy custom validation.
  $form['#validate'][] = '_password_policy_user_profile_form_validate';
  $form['#validate'][] = 'alshaya_user_change_password_validate';
  $form['#submit'][] = '_password_policy_user_profile_form_submit';
}

/**
 * Custom validate function for change password form.
 */
function alshaya_user_change_password_validate(&$form, FormStateInterface &$form_state) {
  if (!$form_state->getErrors()) {
    $account = \Drupal::routeMatch()->getParameter('user');

    // Add entry into hash table after all validations have passed, this is not
    // done by module for us because it checks for confirm_password field and
    // we need a single password field.
    _alshaya_user_password_policy_history_insert_password_hash($account, $form_state->getValue('pass'));
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_user_user_presave(EntityInterface $entity) {
  // Remove leading zeroes to avoid issues of having unknown number type.
  if ($values = $entity->get('field_mobile_number')->getValue()) {
    foreach ($values as $index => $phone) {
      $values[$index]['local_number'] = ltrim($phone['local_number'], 0);
    }

    $entity->get('field_mobile_number')->setValue($values);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function alshaya_user_element_info_alter(array &$info) {
  if (isset($info['mobile_number']['#process'])) {
    $info['mobile_number']['#process'][] = '_alshaya_user_mobile_number_process';
  }
}

/**
 * Processor for the mobile number field to disable the country code.
 */
function _alshaya_user_mobile_number_process(array &$element, FormStateInterface $form_state) {
  $default_site_country = _alshaya_custom_get_site_level_country_code();

  // Set default country as per site.
  $element['country-code']['#value'] = $default_site_country;
  $options = $element['country-code']['#options'];
  $element['country-code']['#options'] = [$default_site_country => $options[$default_site_country]];

  // Make mobile number required only for few forms.
  $mobile_numer_required_forms = [
    'webform_submission_alshaya_contact_form',
    'profile_address_book_add_form',
    'profile_address_book_edit_form',
    'profile_address_book_form',
  ];
  if (in_array($form_state->getBuildInfo()['form_id'], $mobile_numer_required_forms)) {
    $element['mobile']['#required'] = TRUE;
  }

  // Getting mobile country code for the current site country and use that for
  // the prefix.
  $country_mobile_code = \Drupal::service('mobile_number.util')->getCountryCode($default_site_country);
  if ($country_mobile_code) {
    $element['mobile']['#prefix'] = '<div class="country-code-prefix">' . '+' . $country_mobile_code . '</div>';
  }

  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function alshaya_user_preprocess_page_title(&$variables) {
  // Add back link for my account page sub links.
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/user') !== FALSE && $user = \Drupal::request()->attributes->get('user')) {
    $arg = explode('/', $current_path);
    if (!empty($arg[3])) {
      $variables['title_prefix']['back_link'] = [
        '#markup' => Link::createFromRoute('back', 'entity.user.canonical', ['user' => $user->id()], [
          'attributes' => ['class' => ['back-link']],
        ])->toString(),
        '#weight' => 100,
      ];
    }
  }
  elseif ($current_path == '/user/password') {
    $variables['title'] = t('forgot password');
  }
}

/**
 * Implements hook_alshaya_acm_customer_update_account_alter().
 */
function alshaya_user_alshaya_acm_customer_update_account_alter(User $user, array $customer) {
  // Update phone_number if available in customer data.
  if (isset($customer['extension'], $customer['extension']['phone_number'])) {
    $user->get('field_mobile_number')->setValue($customer['extension']['phone_number']);
  }
}

/**
 * Implements hook_acq_commerce_update_customer_api_request_alter().
 */
function alshaya_user_acq_commerce_update_customer_api_request_alter(array &$request_options) {
  if (isset($request_options['form_params'], $request_options['form_params']['customer[email]'])) {
    /** @var \Drupal\user\Entity\User $user */
    $user = user_load_by_mail($request_options['form_params']['customer[email]']);

    if (!empty($user)) {
      $phone_number = $user->get('field_mobile_number')->getValue();
      $contact_number = !empty($phone_number) ? $phone_number[0]['value'] : '';
      $request_options['form_params']['customer[extension][phone_number]'] = $contact_number;
    }
  }
}

/**
 * Implements hook_alshaya_i18n_onetime_translation_add().
 */
function alshaya_user_alshaya_i18n_onetime_translation_add() {
  // Set signup mail translation.
  $signup_mail = \Drupal::languageManager()
    ->getLanguageConfigOverride('ar', 'user_registrationpassword.mail');
  $signup_mail->set('register_withpassword.subject', 'على موقع [site:name] [user:field_first_name:value] تفاصيل حساب');
  $signup_mail->set('register_withpassword.body', '<h1>،[user:field_first_name:value] مرحباً</h1>

أهلاً بك في موقع [site:name] و شكراً على الانضمام. إلينا

[user:mail] :لقد قمت بالتسجيل عن طريق عنوان البريد الإلكتروني

.وتقوم بتعديل وتحديث بياناتك الشخصية في أي وقت <a href="[user:registrationpassword-url]">My Account</a> الآن يمكنك الدخول إلى صفحة

نتمنى لك تجربة تسوق ممتعة مع موقع [site:name]

.هنا أو يمكنك الاتصال في أي وقت بمركز خدمة الزبائن <a href="[site:url]">FAQs page</a> إذا كان لديك أي سؤال، يرجى الاطلاع على صفحة

مع أطيب التحيات،
فريق عمل [site:name]
هاتف:12-12-182
<a href="[site:url]">[site:url-brief]</a>');
  $signup_mail->save();

  // Disable account activation mail.
  \Drupal::configFactory()->getEditable('user.settings')->set('notify.status_activated', FALSE)->save();

  // Set reset password mail translation.
  $reset_password_mail = \Drupal::languageManager()
    ->getLanguageConfigOverride('ar', 'user.mail');
  $reset_password_mail->set('password_reset.subject', 'على موقع [site:name] [user:field_first_name:value] معلومات تسجيل الدخول البديلة للمستخدم');
  $reset_password_mail->set('password_reset.body', '<h1>،[user:field_first_name:value] أهلاً بك </h1>

تم إجراء طلب لإعادة تعيين كلمة المرور لحسابك على موقع [site:name]

:يمكنك الآن تسجيل الدخول بالضغط على هذا الرابط أو نسخه ولصقه في المتصفح

<a href="[user:one-time-login-url]">[user:one-time-login-url]</a>

لا يمكن استخدام هذا الرابط إلا مرة واحدة لتسجيل الدخول وسيقودك إلى صفحة حيث يمكنك تعيين كلمة المرور الخاصة بك. تنتهي صلاحيتها بعد يوم واحد ولن يحدث شيء إذا لم يتم استخدامها.

فريق عمل [site:name]');
  $reset_password_mail->save();
}

/**
 * Helper function to get hashed password and insert it into the history table.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account object.
 * @param string $password
 *   A plain-text password.
 *
 * @see _password_policy_history_insert_password_hash()
 */
function _alshaya_user_password_policy_history_insert_password_hash(AccountInterface $account, $password) {
  if (!\Drupal::moduleHandler()->moduleExists('password_policy_history')) {
    return;
  }

  if ($account) {
    // See _password_policy_history_insert_password_hash() for code below.
    // @TODO: We should refactor the module and remove this code.
    $connection = Database::getConnection();

    $hashed_pass = \Drupal::service('password')->hash($password);
    $values = [
      $account->id(),
      $hashed_pass,
      time(),
    ];

    $connection->insert('password_policy_history')
      ->fields(['uid', 'pass_hash', 'timestamp'], $values)
      ->execute();

  }
}
