#%RAML 1.0
version: v1-dev
title: Mobile Apps
baseUri: https://domain.com
mediaType: application/json
types:
  Image:
    properties:
      url:
        type: string
        example: "https://domain.com/path/to/image.png"
      title?: string
      alt?: string
  Label:
    properties:
      pdp:
        type: object
        properties:
          image:
            type: Image
          position:
            enum: [ top-right, top-left, bottom-left, bottom-right ]
      plp:
        type: object
        properties:
          image:
            type: Image
          position:
            enum: [ top-right, top-left, bottom-left, bottom-right ]
  LightProduct:
    properties:
      id:
        type: integer
        description: The Drupal internal entity ID.
      sku:
        type: string
      original_price:
        type: number
        format: float
        example: 5.99
      final_price:
        type: number
        format: float
        example: 5.99
      promo_label:
        type: string
        description: Pre-calculated discount or promo label.
        example: "Save 10%"
      product_id:
        type: string
        example: "M45678"
      labels:
        type: Label[]
        description: An array of label entity.
      media:
        type: Image[]
      assets?:
        type: array
        description: Attribute specific to H&M, contains a list of pre-calculated images for plp and pdp.
        items:
          type: object[]
          description:
          items:
            properties:
              url:
                type: string
                description: A LiquidPixel URL.
              type:
                enum: [ "product", "model" ]
                description: The image type.
  Sku:
    type: LightProduct
    properties:
  Sku:
    properties:
      id:
        type: integer
        description: The Drupal internet entity ID.
      sku:
        type: string
        example: "H1234"
      stock:
        type: integer
        example: 19
      original_price:
        type: number
        format: float
        example: 5.99
      final_price:
        type: number
        format: float
        example: 5.99
      promo_label:
        type: string
        description: Pre-calculated discount or promo label.
        example: "Save 10%"
      product_id:
        type: string
        example: "M45678"
      related:
        type: string[]
        description: A list of product IDs.
      crosssell:
        type: string[]
        description: A list of product IDs.
      upsell:
        type: string[]
        description: A list of product IDs.
      cart_combinations:
        type: object[]
        description: An array of the possible combination for the cart form.
      # This will probably be a merge of "attributes" (key/value) and attr_* fields. We probably have to filter out values which are not used. We may have to transform some IDs to related product option value.
      attributes:
        type: object[]
        items:
          properties:
            key:
              type: string
              example: "short_description"
            value:
              type: string
              example: "SLEEP BAG BLUE 74/80"
      labels:
        type: Label[]
        description: An array of label entity.
      # This will be nested array of sku entities. Made as string[] here to avoid circular dependency.
      variants?:
        type: string[]
        description: An array of sku entity - displayed as string[] in documentation to avoid circular dependency.
      media:
        type: Image[]
      assets?:
        type: array
        description: Attribute specific to H&M, contains a list of pre-calculated images for plp and pdp.
        items:
          type: object[]
          description:
          items:
            properties:
              url:
                type: string
                description: A LiquidPixel URL.
              type:
                enum: [ "product", "model" ]
                description: The image type.
  Promotion:
    properties:
      id:
        type: integer
        description: The Drupal internal node ID.
      label:
        type: string
        example: "Buy 1 get 1 free"
      type:
        type: string
        enum: [ "free_shipping_order", "fixed_percentage_discount_order", "fixed_amount_discount_order", "other" ]
        description: A technical description of the promotion type. Only types of promotion with specific frontend behavior are identified.
      banner:
        type: boolean
        description: Determine if the promotion should be promoted on the basket page.
      url:
        type: string
      products:
        type: integer[]
        description: A list of product IDs.
  Category:
    properties:
      id:
        type: integer
        description: The Drupal internal term ID.
      name:
        type: string
        example: "Ladies"
      promo_banner?:
        type: Image
        description: It will be generated from the promo_banner, promo_banner_mobile and disable_promo_banner_on_mobile fields.
      path:
        type: string
        example: "/ladies"
      swatch_type?:
        type: string
        example: "still_life"
      quicklink_parent_plp:
        type: boolean
      quicklink_dept_dropdown:
        type: boolean
      include_in_menu:
        type: boolean
      thumbnail?:
        type: Image
      image?:
        type: Image
      size_guide_anchor?:
        type: string
        description: Given the size guide is one unique page for all size guide types (shoes, pants, shirts, UE, US, ...), anchor is used to switch directly to proper section when opening size guide.
      department_page_id?:
        type: integer
        description: The Drupal internal node ID of related department page if any.
      # This will be nested array of category entities. Made as String[] here to avoid circular dependency and to avoid error in example.
      child?:
        type: String[]
        description: An array of category entity - displayed as string[] in documentation to avoid circular dependency.
  Paragraph:
    properties:
      id:
        type: integer
        description: The Drupal internal entity ID.
      type:
        type: string
        description: The paragraph type.
      fields:
        type: object
        description: A list of fields, depending on the paragraph type.
  Facet:
    properties:
      key:
        type: string
        description: The technical ID of the filter.
      label:
        type: string
        description: The human readable value of the filter.
      options:
        type: object[]
        items:
          properties:
            key:
              type: string
              description: The technical ID of the filter option.
            label:
              type: string
              description: The human readable value of the filter option.
            count:
              type: integer
              description: The number of products matching the filter option.
            extensions?:
              type: object
              description: An arbitrary object to handle filter specific attribute (color).
/product:
  /search:
    get:
      queryParameters:
        q:
          type: string
          description: The searched text.
          example: "q=dress"
        f?:
          type: string[]
          description: A list of applied filters.
          example: "f[0]=plp_size:M&f[1]=skus_sku_reference_final_price:0"
        sort?:
          type: string
          description: A sorting option to apply.
          example: "sort=final_price DESC"
      responses:
        200:
          body:
            type: object
            properties:
              facets:
                type: Facet[]
              products:
                type: integer[]
                description: A list of product IDs.
  /{id}:
    uriParameters:
      id:
        type: integer
        description: ID of the product that needs to be fetched.
        required: true
    get:
      description: Load a product by ID.
      responses:
        200:
          body:
            type: object
            properties:
              id:
                type: integer
                description: The Drupal internal node ID.
              name:
                type: string
                example: "Sleeping bag"
              path:
                type: string
                example: "/sleeping-bag"
              body:
                type: string
                example: "Lightly padded sleeping sack in soft, patterned jersey with a press-stud on one shoulder, concealed zip at one side that opens from the bottom, and a jersey lining. The sleeping sack is for indoor use only."
              category:
                type: integer[]
                description: A list of category IDs.
              sku:
                type: Sku
/categories:
  get:
    description: Get all the categories.
    responses:
      200:
        body:
          application/json:
            type: Category[]
            example:
              {
                "id": "1234",
                "name": "Ladies",
                "promo_banner": {
                  "url": "https://domain.com/path/to/ladies/category/promo.png",
                  "title": "Ladies",
                  "alt": "Ladies",
                },
                "path": "/ladies",
                "swatch_type": "still_life",
                "size_guide_anchor": "ladies",
                "department_page_id": "4567",
                "child":
                  [
                    {
                      "id": "2222",
                      "name": "Pants",
                      "path": "/ladies/pants",
                      "size_guide_anchor": "ladies_pants",
                    },
                    {
                      "id": "3333",
                      "name": "Dresses",
                      "path": "/ladies/dresses",
                      "size_guide_anchor": "ladies_dresses",
                    }
                  ]
              }
/sorting_options:
  /{type}:
    uriParameters:
      type:
        description: The page type we want to fetch the sorting options for.
        required: true
        enum: [ "plp", "srp" ]
    get:
      description: Get sorting options for a give page type.
      responses:
        200:
          body:
            type: object[]
            items:
              properties:
                key:
                  type: string
                  description: The technical ID of the sorting option.
                label:
                  type: string
                  description: The human readable value of the sorting option.
            example:
              [
                {
                  "key": "nid ASC",
                  "label": "Best Seller",
                },
                {
                  "key": "created DESC",
                  "label": "New In",
                },
              ]
/delivery_options:
  get:
    description: Get the data related to delivery methods.
    responses:
      200:
        body:
          type: object
          properties:
            options:
              type: array
              items:
                properties:
                  name:
                    type: string
                  order_description:
                    type: string
                  cart_description:
                    type: string
                  codes:
                    type: object
                    propertoes:
                      method:
                        type: string
                      carrier:
                        type: string
                      code:
                        type: string
          #example:
          #  {
          #    [
          #      "name": "Delivery 1"
          #      "order_description": "This is delivery 1"
          #      "cart_description": "This is delivery 1"
          #      "codes":
          #        {
          #          "method": "dev"
          #          "carrier": "test"
          #          "code": "dev_test"
          #        }
          #    ],
          #  }
/page:
  /advanced:
    /{id}:
      uriParameters:
        id:
          type: integer
          description: ID of the page that needs to be fetched.
          required: true
      get:
        description: Get the data to generate an advanced page.
        responses:
          200:
            body:
              type: object
              properties:
                id:
                  type: integer
                title:
                  type: string
                paragraphes:
                  type: Paragraph[]
                  description: An ordered list of paragraphes.
                url:
                  type: string
  /simple:
    get:
      description: Get the data to generate a simple page.
      queryParameters?:
        id?:
          type: integer
          description: ID of the simple page that needs to be fetched.
        name?:
          type: string
          description: Machine name / key of the simple page that needs to be fetched.
      responses:
        200:
          body:
            type: object
            properties:
              id: integer
              title: string
              html: string
              css?: string
              js?: string
              images?: Image[]
              url: string
/promotions:
  get:
    description: Get all the promotions data.
    responses:
      200:
        body:
          type: object
          properties:
            promotions: Promotion[]
/promotion:
  /{id}:
      /product-list:
        uriParameters:
          id:
            type: integer
            description: ID of the category that needs to be fetched.
            required: true
        get:
          description: Get the data to generate a PLP.
          queryParameters:
            f?:
              type: string[]
              description: A list of applied filters.
              example: "f[0]=plp_size:M&f[1]=skus_sku_reference_final_price:0"
            sort?:
              type: string
              description: A sorting option to apply.
              example: "sort=final_price DESC"
          responses:
            200:
              body:
                type: object
                properties:
                  facets:
                    type: Facet[]
                  products:
                    type: LightProduct[]

/category:
  /{id}:
    /product-list:
      uriParameters:
        id:
          type: integer
          description: ID of the category that needs to be fetched.
          required: true
      get:
        description: Get the data to generate a PLP.
        queryParameters:
          f?:
            type: string[]
            description: A list of applied filters.
            example: "f[0]=plp_size:M&f[1]=skus_sku_reference_final_price:0"
          sort?:
            type: string
            description: A sorting option to apply.
            example: "sort=final_price DESC"
        responses:
          200:
            body:
              type: object
              properties:
                facets:
                  type: Facet[]
                products:
                  type: integer[]
                  description: A list of product IDs.
              example:
                {
                  "filters":
                    [
                      {
                        "key": "skus_sku_reference_final_price",
                        "label": "Price",
                        "options":
                          [
                            {
                              "key": "0",
                              "label": "Under KD 5.000",
                              "count": "10",
                            },
                            {
                              "key": "5",
                              "label": "KD 5.000 - KD 10.000",
                              "count": "1",
                            },
                          ]
                      },
                      {
                        "key": "plp_size",
                        "label": "Size",
                        "options":
                          [
                            {
                              "key": "xl",
                              "label": "XL",
                              "count": "8",
                            },
                            {
                              "key": "l",
                              "label": "L",
                              "count": "1",
                            },
                            {
                              "key": "m",
                              "label": "M",
                              "count": "4",
                            },
                          ]
                      }
                    ]
                  "products":
                    [ "1234", "5678", "9012" ]
                }
/search/autocomplete:
  get:
    queryParameters:
      q:
        type: string
        description: The searched text.
        example: "q=dres"
    description: Get a list of suggestion based on the typed search.
    responses:
      200:
        body:
          type: object
          properties:
            suggestions:
              type: string[]
              description: An ordered list of suggestion.
          example:
            {
              "suggestions":
                [ "dress", "dresses", "dressing" ]
            }
/store:
  /search:
    get:
      description: Search stores by latitude/longitude.
      queryParameters:
        latitude?:
          type: number
          format: float
        longitude?:
          type: number
          format: float
      responses:
        200:
          body:
            type: object
            properties:
              stores:
                type: string[]
                description: A list of store IDs matching the criteria. The IDs must be used to get store data from Magento.
            example:
              {
                "stores":
                  [ "RA1-Q035-HEN", "RA2-M865-VIB" ]
              }
/social_media_links:
  get:
    description: Get social media links.
    responses:
      200:
        body:
          type: object
          properties:
            options:
              type: array
              items:
                properties:
                  media:
                    type: string
                  url:
                    type: string
          #example:
          #  {
          #    [
          #      "media": "facebook"
          #      "url": "https://www.facebook.com/test-facebook-page"
          #    ],
          #  }
