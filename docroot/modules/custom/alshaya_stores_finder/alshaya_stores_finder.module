<?php

/**
 * @file
 * Module file.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_acq_sku_clean_synced_data_alter().
 */
function alshaya_stores_finder_acq_sku_clean_synced_data_alter(&$context_results) {
  $query = \Drupal::entityQuery('node');
  $query->addTag('node');
  $query->condition('type', 'store');
  $entities = $query->execute();
  foreach ($entities as $entity_id) {
    $context_results[] = [
      'type' => 'node',
      'entity_id' => $entity_id,
    ];
  }
}

/**
 * Implements hook_page_attachments().
 */
function alshaya_stores_finder_page_attachments(array &$attachments) {
  // Attach store finder js only on store-finder pages.
  $current_path = \Drupal::service('path.current')->getPath();
  if (str_contains($current_path, '/store-finder')
      || str_contains($current_path, '/cart/checkout/delivery')) {
    $site_country = _alshaya_custom_get_site_level_country_code();
    $marker = \Drupal::configFactory()->get('alshaya_stores_finder.settings');
    $attachments['#attached']['drupalSettings']['geolocation']['geocoder']['googleGeocodingAPI']['components'] = ['country' => $site_country];
    $attachments['#attached']['drupalSettings']['alshaya_stores_finder']['map'] = [
      'marker_icon_path' => $marker->get('marker.url'),
      'label_position' => $marker->get('marker.label_position'),
    ];
    $attachments['#attached']['library'][] = 'alshaya_white_label/store_finder';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function alshaya_stores_finder_preprocess_field__node__field_store_address__store(&$variables) {
  if (!empty($variables['items'])) {
    // Adding 'raw' filter for the html tags that show up.
    foreach ($variables['items'] as &$item) {
      $item['content']['#template'] = '{{ value|raw|nl2br }}';
    }
  }
}

/**
 * Set default marker icon.
 *
 * @param string $name
 *   Module or theme name.
 * @param string $type
 *   Either module or theme.
 */
function alshaya_stores_finder_set_default_marker_icon($name = 'alshaya_stores_finder', $type = 'module') {
  // Set default marker image settings.
  $marker_path = drupal_get_path($type, $name) . '/images/google-map-marker.svg';
  if (!file_exists($marker_path)) {
    return;
  }

  $icon_path = file_url_transform_relative(file_create_url($marker_path));
  \Drupal::configFactory()->getEditable('alshaya_stores_finder.settings')
    ->set('marker.use_default', FALSE)
    ->set('marker.path', $marker_path)
    ->set('marker.url', $icon_path)
    ->save(TRUE);
}

/**
 * Implements hook_alshaya_master_post_drupal_install().
 *
 * Set default marker image for stores finder.
 */
function alshaya_stores_finder_alshaya_master_post_drupal_install() {
  alshaya_stores_finder_set_default_marker_icon(\Drupal::config('alshaya.installed_brand')->get('module'));
}

/**
 * Config of marker label position for arabic.
 *
 * @return array
 *   Return array of arabic settings override.
 */
function alshaya_stores_finder_marker_label_position_ar() {
  $label_position = [
    'x' => 7,
    'y' => 15,
    'single_x' => 11,
    'single_y' => 15,
  ];

  \Drupal::moduleHandler()->alter('alshaya_stores_finder_marker_label_position', $label_position);
  return $label_position;
}

/**
 * Set new marker icons.
 *
 * @param string $name
 *   Module or theme name.
 * @param string $type
 *   Either module or theme.
 */
function alshaya_stores_finder_set_markers($name = '', $type = 'module') {
  $module_name = explode('_', $name);
  if (!empty($module_name[2])) {
    $name = str_replace("_{$module_name[2]}", '', $name);
  }
  $brand = $module_name[1];
  $image_dir = drupal_get_path($type, $name) . '/images/';
  $active_marker_path = $image_dir . $brand . '-pin-active.svg';
  $inactive_marker_path = $image_dir . $brand . '-pin-inactive.svg';

  if (!file_exists($active_marker_path) || !file_exists($inactive_marker_path)) {
    \Drupal::logger('alshaya_store_finder')
      ->notice('Marker icon is missing at @dir for @module', [
        '@dir' => $image_dir,
        '@module' => $module_name,
      ]);
    return;
  }

  $active_marker_path = file_url_transform_relative(file_create_url($active_marker_path));
  $inactive_icon_path = file_url_transform_relative(file_create_url($inactive_marker_path));
  \Drupal::configFactory()->getEditable('alshaya_stores_finder.settings')
    ->set('map_marker.active', $active_marker_path)
    ->set('map_marker.in_active', $inactive_icon_path)
    ->save(TRUE);
}

/**
 * Implements hook_block_access().
 */
function alshaya_stores_finder_block_access(Block $block, $operation, AccountInterface $account) {
  $route = \Drupal::routeMatch()->getRouteName();
  if ($route !== 'alshaya_geolocation.store_finder') {
    return AccessResult::neutral();
  }

  $blocks_to_check = ['exposedformstores_finderpage_1', 'page_title'];

  $config = \Drupal::config('alshaya_stores_finder.settings');
  $feature_status = $config->get('stores_finder_page_status');
  if ($operation === 'view' && in_array($block->id(), $blocks_to_check)) {
    return AccessResult::forbiddenIf($feature_status === 0)->addCacheableDependency($config);
  }

  return AccessResult::neutral()->addCacheableDependency($config);
}
