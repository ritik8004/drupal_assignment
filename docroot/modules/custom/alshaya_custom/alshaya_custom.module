<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Url;
use Drupal\taxonomy\TermInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\file\Entity\File;

/**
 * Utility function to get the site level country code.
 *
 * @return string
 *   Country code.
 */
function _alshaya_custom_get_site_level_country_code() {
  $default_site_country = \Drupal::config('system.date')->get('country.default');
  if (empty($default_site_country)) {
    // If no default country is set, take the first as default.
    $full_country_list = \Drupal::service('address.country_repository')->getList();
    $default_site_country = key($full_country_list);
  }

  return $default_site_country;
}

/**
 * Get the term tree for 'product_category' vocabulary.
 *
 * @param int $parent_tid
 *   Parent term id.
 * @param int $depth
 *   Term depth.
 * @param bool $highlight_image
 *   Need highlight image or not.
 *
 * @return array
 *   Processed term data.
 */
function _alshaya_custom_get_category_term_data($parent_tid = 0, $depth = 1, $highlight_image = TRUE) {
  $data = [];
  $cache_tags = [];

  /* @var \Drupal\taxonomy\TermInterface[] $terms */
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadTree('acq_product_category', $parent_tid, $depth, TRUE);
  if ($terms) {
    foreach ($terms as $term) {
      // For language specific data.
      $term = \Drupal::service('entity.repository')
        ->getTranslationFromContext($term);

      // For cache tag bubbling up.
      $cache_tags[] = 'taxonomy_term:' . $term->id();

      // Get value of boolean field which will decide if we show/hide this
      // term and child terms in the menu.
      $include_in_menu = $term->get('field_category_include_menu')->getValue();

      // Hide the menu if there is a value in the field and it is FALSE.
      if (!empty($include_in_menu) && !($include_in_menu[0]['value'])) {
        continue;
      }

      $data[$term->id()] = [
        'label' => $term->label(),
        'description' => $term->getDescription(),
        'id' => $term->id(),
        'path' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()])
          ->toString(),
        'active_class' => '',
      ];

      if ($highlight_image) {
        $data[$term->id()] += ['highlight_image' => _alshaya_master_get_highlight_image($term)];
      }

      // Check if there is a department page available for this term.
      if ($nid = alshaya_department_page_page_exists($term->id())) {
        // Use the path of node instead of term path.
        $data[$term->id()]['path'] = Url::fromRoute('entity.node.canonical', ['node' => $nid])
          ->toString();
      }

      $data[$term->id()]['child'] = _alshaya_custom_get_category_term_data($term->id());
    }
  }

  return $data;

}

/**
 * Get highlight image for a 'product_category' term.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   Term object.
 *
 * @return array
 *   Highlight image array.
 */
function _alshaya_master_get_highlight_image(TermInterface $term) {
  $highlight_images = [];

  if ($highlight_field = $term->get('field_main_menu_highlight')) {

    // If no data in paragraph referenced field.
    if (empty($highlight_field->getValue())) {
      return $highlight_images;
    }

    foreach ($highlight_field->getValue() as $paragraph_id) {
      $paragraph_id = $paragraph_id['target_id'];

      // Load paragraph entity.
      $paragraph = Paragraph::load($paragraph_id);

      // Get the current language code.
      $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

      // Get the translation of the paragraph if exists.
      if ($paragraph->hasTranslation($language)) {
        // Replace the current paragraph with translated one.
        $paragraph = $paragraph->getTranslation($language);
      }

      if ($paragraph && !empty($paragraph->get('field_highlight_image'))) {
        $image = $paragraph->get('field_highlight_image')->getValue();
        $image_link = $paragraph->get('field_highlight_link')->getValue();
        if (!empty($image)) {
          $file = File::load($image[0]['target_id']);
          $url = Url::fromUri($image_link[0]['uri']);
          $highlight_images[] = [
            'image_link' => $url->toString(),
            'img' => file_create_url($file->getFileUri()),
          ];
        }
      }
    }
  }

  return $highlight_images;
}
