<?php

/**
 * @file
 * Contains install, update, uninstall hooks for alshaya_api module.
 */

use Drupal\alshaya_config\AlshayaConfigManager;
use Drupal\consumers\Entity\Consumer;
use Drupal\Core\Site\Settings;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_update_N().
 *
 * Add magento settings back in config.
 */
function alshaya_api_update_9402() {
  $alshaya_api_settings = Settings::get('alshaya_api.settings');
  $alshaya_api_config = \Drupal::configFactory()->getEditable('alshaya_api.settings');
  $alshaya_api_config
    ->set('magento_host', $alshaya_api_settings['magento_host'])
    ->set('verify_ssl', $alshaya_api_settings['verify_ssl'])
    ->save();

  if (!alshaya_is_env_prod()) {
    foreach (\Drupal::service('language_manager')->getLanguages() as $langcode => $language) {
      $alshaya_api_config->set("magento_lang_prefix.$langcode", Settings::get('magento_lang_prefix')['langcode']);
    }

    $alshaya_api_config
      ->set('consumer_key', $alshaya_api_settings['consumer_key'])
      ->set('consumer_secret', $alshaya_api_settings['consumer_secret'])
      ->set('access_token', $alshaya_api_settings['access_token'])
      ->set('access_token_secret', $alshaya_api_settings['access_token_secret'])
      ->set('magento_api_base', $alshaya_api_settings['magento_api_base'])
      ->save();
  }

  require_once DRUPAL_ROOT . '/../factory-hooks/environments/environments.php';
  $env = alshaya_get_site_environment();

  if ($env === 'local') {
    // @codingStandardsIgnoreLine
    global $host_site_code;
    $home = '/home/vagrant';
    if (getenv('LANDO')) {
      $home = '/app/local_home';
    }
    $site_country_code = alshaya_get_site_country_code($host_site_code);
  }
  else {
    global $_acsf_site_name;
    $home = $_SERVER['HOME'];
    $site_country_code = alshaya_get_site_country_code($_acsf_site_name);
  }

  $acsf_site_code = $site_country_code['site_code'];
  $country_code = $site_country_code['country_code'];
  $settings_path = $home . DIRECTORY_SEPARATOR . 'settings' . DIRECTORY_SEPARATOR . 'settings';
  $overridding_settings_files = [
    $settings_path,
    $settings_path . '-' . $acsf_site_code,
    $settings_path . '-' . $acsf_site_code . $country_code,
  ];

  foreach ($overridding_settings_files as $file) {
    $file = $file . '.yml';
    if (file_exists($file)) {
      \Drupal::logger('alshaya_api')->notice('Deleting file @file, existing contents of the file @content in JSON string', [
        '@file' => $file,
        '@content' => json_encode(Yaml::parse((file_get_contents($file)))),
      ]);
      unlink($file);
    }
  }

}

/**
 * Implements hook_update_N().
 *
 * Update the config in db.
 */
function alshaya_api_update_9401() {
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');
  // Add fields to product index.
  $manager->updateConfigs(
    ['user.role.alshaya_magento_consumer'],
    'alshaya_api',
    'install',
    AlshayaConfigManager::MODE_REPLACE
  );
}

/**
 * Implements hook_update_N().
 *
 * [5.10.0] Update permissions to allow post on new rest
 * resource alshaya_acm_product_category_mapping.
 */
function alshaya_api_update_8004() {
  alshaya_config_install_configs(
    ['user.role.alshaya_magento_consumer'],
    'alshaya_api'
  );

  // Correct the target type for client field in token.
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $client_field = $update_manager->getFieldStorageDefinition('client', 'oauth2_token');
  if ($client_field->getItemDefinition()->getSetting('target_type') !== 'consumer') {
    $client_field->getItemDefinition()->setSetting('target_type', 'consumer');
    $update_manager->updateFieldStorageDefinition($client_field);
  }

  // Assign user to the client to ensure we can use
  // grant type client_credentials.
  $user = user_load_by_name(Settings::get('alshaya_magento_user_username'));
  if ($user instanceof User) {
    $clients = \Drupal::entityTypeManager()->getStorage('consumer')->loadByProperties([
      'uuid' => Settings::get('alshaya_magento_soauth_client_uuid'),
    ]);
    $client = reset($clients);
    $client->set('user_id', $user->id());
    $client->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * [5.8.0]Sync code and active storage for module provided settings.
 */
function alshaya_api_update_8003() {
  $config_keys_to_remove = [
    'magento_host',
    'magento_lang_prefix',
    'magento_api_base',
    'verify_ssl',
    'token_cache_time',
    'username',
    'password',
    'consumer_key',
    'consumer_secret',
    'access_token',
    'access_token_secret',
  ];
  $config = \Drupal::configFactory()->getEditable('alshaya_api.settings');
  $config_raw_data = $config->getRawData();
  foreach ($config_keys_to_remove as $config_key) {
    if (isset($config_raw_data[$config_key])) {
      unset($config_raw_data[$config_key]);
    }
  }
  $config->setData($config_raw_data);
  $config->save();
}

/**
 * Implements hook_update_N().
 *
 * Adds new config key for ignoring categories in diff in sanity-check command.
 */
function alshaya_api_update_8002() {
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');
  $manager->updateConfigs(
    ['alshaya_api.settings'],
    'alshaya_api',
    'install',
    AlshayaConfigManager::MODE_ADD_MISSING);
}

/**
 * Implements hook_update_N().
 *
 * Create role, enable resource, create user and consumer for Alshaya API.
 */
function alshaya_api_update_8001() {
  alshaya_config_install_configs(['user.role.alshaya_magento_consumer'], 'alshaya_api');
  alshaya_config_install_configs(['rest.resource.sku_images'], 'alshaya_acm_product');

  _alshaya_api_create_user();
  _alshaya_api_create_consumer();
}

/**
 * Implements hook_install().
 */
function alshaya_api_install() {
  // Configure alshaya_api settings.
  $config = \Drupal::configFactory()->getEditable('alshaya_api.settings');

  $alshaya_api_settings = Settings::get('alshaya_api.settings');

  foreach ($alshaya_api_settings as $key => $value) {
    $config->set($key, $value);
  }

  $config->save();

  _alshaya_api_create_user();
  _alshaya_api_create_consumer();
}

/**
 * Wrapper function create alshaya api user if not exists.
 */
function _alshaya_api_create_user() {
  $user = user_load_by_name(Settings::get('alshaya_magento_user_username'));

  if ($user instanceof User) {
    // User is already created. Log message and return.
    \Drupal::logger('alshaya_api')->warning('User already created with name @name.', [
      '@name' => Settings::get('alshaya_magento_user_username'),
    ]);
    return;
  }

  // Create a user that will be used by Alshaya API Consumers.
  $user = User::create();
  $user->setPassword(Settings::get('alshaya_magento_user_password'));
  $user->enforceIsNew();
  $user->setEmail(Settings::get('alshaya_magento_user_email'));
  $user->setUsername(Settings::get('alshaya_magento_user_username'));
  $user->activate();
  $user->addRole('alshaya_magento_consumer');
  $user->save();
}

/**
 * Wrapper function create alshaya api consumer if not exists.
 */
function _alshaya_api_create_consumer() {
  /** @var \Drupal\Core\Entity\EntityRepositoryInterface $repository */
  $repository = \Drupal::service('entity.repository');
  $consumer = $repository->loadEntityByUuid('consumer', Settings::get('alshaya_magento_soauth_client_uuid'));

  if ($consumer instanceof Consumer) {
    // Consumer is already created. Log message and return.
    \Drupal::logger('alshaya_api')->warning('Consumer already created for uuid @uuid.', [
      '@uuid' => Settings::get('alshaya_magento_soauth_client_uuid'),
    ]);

    return;
  }

  // Add Simple Oauth - Consumer client.
  $client = Consumer::create([]);
  $client->set('label', 'Alshaya Magento Consumer');
  $client->set('secret', Settings::get('alshaya_magento_soauth_client_secret'));
  $client->set('roles', ['alshaya_magento_consumer']);
  $client->set('uuid', Settings::get('alshaya_magento_soauth_client_uuid'));

  $user = user_load_by_name(Settings::get('alshaya_magento_user_username'));
  if ($user instanceof User) {
    $client->set('user_id', $user->id());
  }
  $client->save();
}
