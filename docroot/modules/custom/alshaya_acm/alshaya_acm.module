<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_form_customer_cart_form_alter(&$form, FormStateInterface $form_state) {
  // Route match.
  $route_match = \Drupal::routeMatch();

  // Change the title of the cart page.
  if ($route_match->getRouteName() == 'acq_cart.cart') {
    $request = \Drupal::request();

    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $route->setDefault('_title', 'Basket');
    }
  }

  // Including the utility file.
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  // Get the current cart.
  $cart_storage = \Drupal::service('acq_cart.cart_storage');
  $cart = $cart_storage->getCart();

  // Get current cart items.
  $cart_items = $cart->items();

  if (empty($cart_items)) {
    // Add empty message wrapper container.
    $form['empty'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => 'empty-cart-wrapper',
      ],
    ];

    // Add the empty message.
    $form['empty']['message'] = [
      '#markup' => '<div class="empty-cart-message">' . t('Your shopping basket is empty') . '</div>',
      '#weight' => -50,
    ];

    // Add the continue shopping button in same container.
    $form['empty']['continue_shopping'] = [
      '#type' => 'link',
      '#title' => t('Go shopping'),
      '#url' => Url::fromRoute('<front>'),
    ];

    // Add continue shopping link, that redirect user to homepage.
    $form['empty']['continue_shopping_mobile'] = [
      '#type' => 'link',
      '#title' => t('Go shopping'),
      '#url' => Url::fromRoute('<front>'),
    ];

    // Unset all other items.
    unset($form['cart']);
    unset($form['actions']['checkout']);

    // Simply return, we don't want to process below code.
    return;
  }

  // Add sub total price of product.
  $form['cart']['#header'][] = t('Sub total');
  $form['cart']['#header'][2] = t('Unit Price');

  // Adds delivery options to cart.
  $form['cart']['#header'][] = t('Available delivery options');

  // Get cart items by sku.
  $cart_item = alshaya_acm_get_cart_items_by_sku();

  // Flag for whether show the secure checkout button or not.
  $secure_checkout_access = TRUE;

  foreach ($form['cart'] as $id => $item) {
    if (is_array($item) && isset($item['quantity'])) {
      $form['cart'][$id]['quantity']['#type'] = 'select';
      $form['cart'][$id]['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options();

      // Add ajax callback to update cart's total on quantity change.
      $form['cart'][$id]['quantity']['#ajax'] = [
        'callback' => 'alshaya_acm_cart_ajax_quantity_callback',
        'event' => 'change',
      ];

      $form['cart'][$id]['price'] = [
        '#markup' => alshaya_acm_price_format($cart_item[$id]['price']),
      ];

      // Add sub total price of product.
      $form['cart'][$id]['sub_total'] = [
        '#markup' => alshaya_acm_price_format($item['quantity']['#default_value'] * $cart_item[$id]['price']),
      ];

      // Add remove link as suffix of quantity.
      $remove_url = Url::fromUserInput('/cart/remove/' . $id);
      $form['cart'][$id]['quantity']['#suffix'] = Link::fromTextAndUrl(t('Remove'), $remove_url)->toString() . '<div id="stock-error-' . $id . '"></div>';

      // Load Images.
      $media = alshaya_acm_product_get_sku_media($id);

      // Get SKU attributes.
      $sku_attributes = alshaya_acm_product_get_sku_configurable_values($id);

      $name = [];

      // Get parent sku of the sku.
      $parent_sku = alshaya_acm_product_get_parent_sku_by_sku($id);

      if ($parent_sku) {
        /* @var \Drupal\node\Entity\Node $parent_node */
        $parent_node = alshaya_acm_product_get_display_node($parent_sku->getSKU());
        if ($parent_node) {
          $name = [
            '#title' => $parent_node->getTitle(),
            '#type' => 'link',
            '#url' => Url::fromRoute('entity.node.canonical', ['node' => $parent_node->id()]),
          ];
        }
      }
      else {
        /* @var \Drupal\node\Entity\Node $product_node */
        $product_node = alshaya_acm_product_get_display_node($id);
        $name = [
          '#title' => $product_node->getTitle(),
          '#type' => 'link',
          '#url' => Url::fromRoute('entity.node.canonical', ['node' => $product_node->id()]),
        ];
      }

      $image = [];
      if (!empty($media)) {
        $image = [
          '#theme' => 'image_style',
          '#style_name' => '137x144',
          '#uri' => current($media)['file']->getFileUri(),
        ];
      }

      // TODO: Get delivery options from conductor.
      $product_delivery_options = '<div class="delivery-options-mobile">' . t('Available delivery options') . '</div>';
      $product_delivery_options .= '<div class="tooltip--wrap">';
      $product_delivery_options .= '<div class="contains--tooltip">';
      $product_delivery_options .= '<p class="home-delivery tooltip--head">' . t('Home Delivery') . '</p>';
      $product_delivery_options .= '<p class="tooltip">' . t('Home delivery in @days days on orders over @amount', ['@days' => 2, '@amount' => 'KWD 35']) . '<p>';
      $product_delivery_options .= '</div>';
      $product_delivery_options .= '<div class="contains--tooltip">';
      $product_delivery_options .= '<p class="click-collect tooltip--head">' . t('Click and Collect') . '</p>';
      $product_delivery_options .= '<p class="tooltip">' . t('Collect the order in store from @days days', ['@days' => '2-3']) . '</p>';
      $product_delivery_options .= '</div>';
      $product_delivery_options .= '</div>';

      $form['cart'][$id]['name'] = [
        '#theme' => 'alshaya_cart_product_name',
        '#sku_attributes' => $sku_attributes,
        '#name' => $name,
        '#image' => $image,
        '#total_price' => alshaya_acm_price_format($item['quantity']['#default_value'] * $cart_item[$id]['price']),
        '#item_code' => $id,
        '#include_in_bundle' => t('Items included in bundle'),
        '#available_delivery_methods' => [
          '#markup' => $product_delivery_options,
        ],
      ];

      $form['cart'][$id]['delivery_options'] = [
        '#markup' => $product_delivery_options,
      ];

      // Adding class attribute to columns for mobile view.
      $form['cart'][$id]['quantity']['#wrapper_attributes'] = ['class' => ['quantity']];
      $form['cart'][$id]['name']['#wrapper_attributes'] = ['class' => ['name']];
      $form['cart'][$id]['sub_total']['#wrapper_attributes'] = [
        'class' => [
          'subtotal',
          'blend',
          'dark',
        ],
      ];
      $form['cart'][$id]['price']['#wrapper_attributes'] = ['class' => ['price dark']];
      $form['cart'][$id]['delivery_options']['#wrapper_attributes'] = ['class' => ['delivery-option']];

      // If there is at least one item out of scope, show the error.
      $out_of_stock_message = '';

      // SKU stock.
      $sku_stock = \Drupal::service('acq_commerce.api')->skuStockCheck($id);
      // If item is not available in stock.
      if (!$sku_stock['is_in_stock']) {
        // Basket out of stock error.
        $out_of_stock_message = t('Some items in your basket are out of stock. Please remove them to proceed.');
        $form['cart'][$id]['#attributes']['class'][] = 'sku-out-stock';
        $secure_checkout_access = FALSE;
      }
    }
  }

  if ($secure_checkout_access) {
    // Change checkout button text to 'Checkout Securely'.
    $form['actions']['checkout']['#value'] = t('Checkout Securely');
    $form['actions']['checkout']['#suffix'] = '</div>';
    $form['actions']['checkout']['#prefix'] = '<div id="secure-checkout-button">';
  }
  else {
    $form['actions']['checkout']['#access'] = FALSE;
  }

  // Out of stock error message.
  $form['basket_out_of_stock_message'] = [
    '#markup' => '<div id="out-of-stock-message">' . $out_of_stock_message . '</div>',
    '#weight' => -1,
  ];

  // Add wrapper to cart table for themeing.
  $form['cart']['#prefix'] = '<div id="table-cart-items">';
  $form['cart']['#suffix'] = '</div>';

  // Add wrapper to cart totals table for themeing.
  $form['totals']['#prefix'] = '<div id="table-cart-totals">';

  // Update some labels to match wireframe/mockup.
  $form['totals']['sub']['label'] = ['#markup' => t('Sub total')];
  $form['totals']['grand']['label'] = ['#markup' => t('Order Total <span>(Before Delivery)</span>')];

  $form['totals']['#weight'] = 10;

  // Wrap Promotion code in a fieldset.
  $form['promotion_code_wrapper'] = [
    '#type' => 'details',
    '#title' => t('Add a promo code'),
    '#prefix' => '<div class="promo-continue-shopping-wrapper">',
  ];

  $form['promotion_code_wrapper']['promotion'] = [
    '#title' => t('Promotion code'),
    '#type' => 'textfield',
    '#suffix' => '<span id="apply_coupon">' . t('apply') . '</span>',
  ];

  if (!empty($cart_items)) {
    // Add continue shopping link, that redirect user to homepage.
    $form['continue_shopping'] = [
      '#type' => 'link',
      '#title' => t('Continue shopping'),
      '#url' => Url::fromRoute('<front>'),
      '#weight' => 4,
      '#suffix' => '</div>',
    ];

    // Add continue shopping link, that redirect user to homepage.
    $form['actions']['continue_shopping_mobile'] = [
      '#type' => 'link',
      '#title' => t('Continue shopping'),
      '#url' => Url::fromRoute('<front>'),
      '#suffix' => '</div>',
    ];
  }

  $form['coupon']['#type'] = 'hidden';

  // Attach library, to cater to Coupon submit button.
  $form['#attached']['library'][] = 'alshaya_acm/alshaya.acm.js';

  _alshaya_acm_format_cart_total($form, $cart);
}

/**
 * Alter totals to use markup instead of plain text.
 *
 * @param array $form
 *   The form array.
 * @param object $cart
 *   The cart object.
 */
function _alshaya_acm_format_cart_total(array &$form, $cart) {
  // Get the new totals of cart.
  $totals = $cart->totals();

  $form['totals']['sub']['value'] = [
    '#markup' => alshaya_acm_price_format($totals['sub']),
  ];

  if ((float) $totals['tax'] > 0) {
    $form['totals']['tax']['value'] = [
      '#markup' => alshaya_acm_price_format($totals['tax']),
    ];
  }

  if ((float) $totals['discount'] != 0) {
    $form['totals']['discount']['value'] = [
      '#markup' => alshaya_acm_price_format($totals['discount']),
    ];
  }

  $form['totals']['grand']['value'] = [
    '#markup' => alshaya_acm_price_format($totals['grand']),
  ];
}

/**
 * Wrapper function to format price value with currency.
 *
 * @param float $price
 *   Price value.
 *
 * @return mixed|null
 *   Return rendered theme with html for price.
 */
function alshaya_acm_price_format($price) {
  $output = [
    '#theme' => 'alshaya_acm_price',
    '#price' => $price,
  ];

  return render($output);
}

/**
 * Ajax callback: Update cart item's sub total and cart's total / sub total.
 */
function alshaya_acm_cart_ajax_quantity_callback(&$form, FormStateInterface $form_state) {
  // Get form values.
  $form_state_cart = $form_state->getValue('cart');

  // Get triggering element to update quantity of sku.
  $trigger = $form_state->getTriggeringElement();
  $sku = $trigger['#parents'][1];;
  $quantity = $trigger['#value'];

  // Update cart with sku quantity.
  $cartStorage = \Drupal::service('acq_cart.cart_storage');
  $cart = $cartStorage->getCart();
  $response = new AjaxResponse();

  // Stock check.
  $sku_stock = \Drupal::service('acq_commerce.api')->skuStockCheck($sku);

  $error_message = '';

  // If sku not available in stock.
  if (!$sku_stock['is_in_stock']) {
    $out_of_stock_message = t('Some items in your basket are out of stock. Please remove them to proceed.');
    // If out of stock, remove/hide the secure checkout button.
    $form['actions']['checkout']['#access'] = FALSE;
    $form['actions']['continue_shopping_mobile']['#access'] = FALSE;
    $form['cart'][$sku]['#attributes']['class'][] = 'sku-out-stock';
    // Ajax response to update page section.
    $response->addCommand(new HtmlCommand('#out-of-stock-message', $out_of_stock_message));
    $response->addCommand(new ReplaceCommand('#secure-checkout-button', $form['actions']));
    $response->addCommand(new ReplaceCommand('#table-cart-items', $form['cart']));
    return $response;
  }
  // If quantity we added for sku is more than what available in stock.
  elseif ($sku_stock['quantity'] < $quantity) {
    // Update the quantity and update error message.
    $quantity = $sku_stock['quantity'];
    $error_message = t('Sorry, we now only have @quantity of these available and we have updated your basket.', ['@quantity' => $quantity]);
  }

  $cart->updateItemQuantity($sku, $quantity);
  $cartStorage->updateCart();
  $newcart = $cartStorage->getCart();

  // Get cart items by sku.
  $cart_item = alshaya_acm_get_cart_items_by_sku();

  // Update the sub total price of each product.
  $form['cart'][$sku]['sub_total']['#markup'] = alshaya_acm_price_format($quantity * $cart_item[$sku]['price']);

  // Update the quantity select list.
  $form['cart'][$sku]['quantity']['#value'] = $quantity;

  // Update form total values.
  _alshaya_acm_format_cart_total($form, $newcart);

  $cart_total = [];
  $cart_total['totals'] = $form['totals'];
  $cart_total['actions'] = $form['actions'];
  $response->addCommand(new ReplaceCommand('#table-cart-items', $form['cart']));
  $response->addCommand(new ReplaceCommand('#table-cart-totals', $cart_total));
  $response->addCommand(new HtmlCommand('h1.c-page-title', t("Basket (%count)", ['%count' => $newcart->getCartItemsCount()])));

  $response->addCommand(new ReplaceCommand('#stock-error-' . $sku, $error_message));

  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function alshaya_acm_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();

  // Change cart page title with quantity count.
  if ($route_match->getRouteName() == 'acq_cart.cart') {
    $cart = \Drupal::service('acq_cart.cart_storage')->getCart();

    $variables['title'] = [
      '#markup' => t("Basket (%count)", ['%count' => $cart->getCartItemsCount()]),
    ];
  }
}

/**
 * Get all cart items as sku associated array.
 *
 * @return array
 *   Array of all skus assiciated by sku key.
 */
function alshaya_acm_get_cart_items_by_sku() {
  $skus = [];
  $cartStorage = \Drupal::service('acq_cart.cart_storage');
  $cart = $cartStorage->getCart();
  $items = $cart->items();
  if (!empty($items)) {
    foreach ($items as $index => $line_item) {
      $skus[$line_item['sku']] = $line_item;
    }
  }
  return $skus;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_form_sku_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['quantity']['#type'] = 'select';
  $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options();
  unset($form['quantity']['#size']);

  if (isset($form['ajax'], $form['ajax']['configurables'])) {
    foreach ($form['ajax']['configurables'] as $key => $form_item) {
      if (is_array($form_item) && isset($form_item['#type']) && $form_item['#type'] == 'select') {
        $form['ajax']['configurables'][$key]['#empty_option'] = t('Select @attribute', ['@attribute' => strtolower($form_item['#title'])]);
      }
    }
  }
  // We need to change the markup for submit button.
  // @see alshaya_white_label_theme_suggestions_input_alter().
  $form['add_to_cart']['#attributes']['data-twig-suggestion'] = 'addtocart';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_form_multistep_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Create the cart page link.
  $url = Url::fromRoute('acq_cart.cart');
  $link = \Drupal::l('Back to Basket', $url)->getGeneratedLink();
  $form['back_to_cart'] = [
    '#markup' => $link,
    '#weight' => -5,
  ];
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_theme($existing, $type, $theme, $path) {
  return [
    'checkout_summary' => [
      'variables' => [
        'cart_link' => '',
        'number_of_items' => '',
        'products' => '',
        'subtotal' => '',
        'tax' => '',
        'discount' => '',
        'ordertotal' => '',
        'currency_format' => '',
        'currency_code_position' => '',
        'delivery_address' => '',
        'delivery_method' => '',
        'delivery_label' => '',
        'address_label' => '',
        'shipping_url' => '',
      ],
      'template' => 'block--checkout-summary',
    ],
    'alshaya_acm_price' => [
      'variables' => [
        'price' => '',
        'currency_format' => '',
        'currency_code_position' => '',
      ],
    ],
    'alshaya_cart_product_name' => [
      'variables' => [
        'sku_attributes' => '',
        'item_code' => '',
        'total_price' => '',
        'name' => '',
        'image' => '',
        'include_in_bundle' => '',
        'available_delivery_methods' => '',
      ],
    ],
  ];
}

/**
 * Format price value with currency.
 *
 * Default template: alshaya-acm-price.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - price: a price value.
 *   - currency_format: Currency format.
 *   - currency_code_position: Currency code position with amount.
 *
 * @see alshaya_acm_price_format()
 */
function template_preprocess_alshaya_acm_price(array &$variables) {
  // Fetch the config.
  $config = \Drupal::configFactory()->get('acq_commerce.currency');

  // Fetch the currency format from the config factor.
  $currency_format = $config->get('currency_code');

  // Fetch the currency code position.
  $currency_code_position = $config->get('currency_code_position');

  $variables['currency_format'] = $currency_format;
  $variables['currency_code_position'] = $currency_code_position;
}

/**
 * Helper function to get cart quantity options.
 */
function _alshaya_acm_get_cart_quantity_options() {
  static $cartQuantityOptions;

  // Prepare the array once per page request.
  if (empty($cartQuantityOptions)) {
    // Get array using range() with 1 as minimum and maximum value from config.
    $range = range(1, \Drupal::config('alshaya_acm.cart_config')->get('max_cart_qty'));

    // Using array_combine to ensure we have same data in key and value.
    $cartQuantityOptions = array_combine($range, $range);
  }

  return $cartQuantityOptions;
}
