<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_acm\EventSubscriber\UpdateCartErrorEventSubscriber;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_form_customer_cart_form_alter(&$form, FormStateInterface $form_state) {
  // Route match.
  $route_match = \Drupal::routeMatch();

  // Change the title of the cart page.
  if ($route_match->getRouteName() == 'acq_cart.cart') {
    $request = \Drupal::request();

    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $route->setDefault('_title', 'Basket');
    }
  }

  // Including the utility file.
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  $form['form_level_error_wrapper'] = [
    '#type' => 'container',
    '#weight' => -100,
    '#attributes' => [
      'class' => 'form-level-error-wrapper',
    ],
  ];

  // Get the current cart.
  $cart_storage = \Drupal::service('acq_cart.cart_storage');
  $cart = $cart_storage->getCart(FALSE);

  // Get current cart items.
  $cart_items = $cart ? $cart->items() : NULL;

  if (empty($cart_items)) {
    // Add empty message wrapper container.
    $form['empty'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => 'empty-cart-wrapper',
      ],
    ];

    // Add the empty message.
    $form['empty']['message'] = [
      '#markup' => '<div class="empty-cart-message">' . t('Your shopping basket is empty') . '</div>',
      '#weight' => -50,
    ];

    // Add the continue shopping button in same container.
    $form['empty']['continue_shopping'] = [
      '#type' => 'link',
      '#title' => t('go shopping'),
      '#url' => Url::fromRoute('<front>'),
    ];

    // Add continue shopping link, that redirect user to homepage.
    $form['empty']['continue_shopping_mobile'] = [
      '#type' => 'link',
      '#title' => t('go shopping'),
      '#url' => Url::fromRoute('<front>'),
    ];

    // Unset all other items.
    unset($form['cart']);
    unset($form['actions']['checkout']);

    // Simply return, we don't want to process below code.
    return;
  }

  $form['#error_no_message'] = TRUE;

  // Add sub total price of product.
  $form['cart']['#header'][] = t('Sub total');
  $form['cart']['#header'][2] = t('Unit Price');

  // Adds delivery options to cart.
  $form['cart']['#header'][] = t('Available delivery options');

  // Get cart items by sku.
  $cart_item = alshaya_acm_get_cart_items_by_sku();

  // If there is at least one item out of scope, show the error.
  $out_of_stock_message = '';

  foreach ($form['cart'] as $id => &$item) {
    if (is_array($item) && isset($item['quantity'])) {
      /** @var \Drupal\acq_sku\Entity\SKU $sku_entity */
      $sku_entity = SKU::loadFromSku($id);
      $is_item_free = FALSE;

      // Check if a discount equal to the price of product was applied.
      if ($cart_item[$id]['discount_amount'] === ($cart_item[$id]['price'] * $item['quantity']['#default_value'])) {
        $is_item_free = TRUE;
      }

      $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
      $item_cart_price = $skuManager->buildCartItemPrice($sku_entity, $cart_item[$id]['price']);

      if ($is_item_free) {
        $item['price'] = [
          '#markup' => alshaya_acm_price_format($cart_item[$id]['price']) . '</div>',
          '#prefix' => '<div class="has--special--price">',
          '#suffix' => '</div>',
        ];
      }
      else {
        $item['price'] = [
          '#theme' => 'acq_commerce_price',
          '#price' => $item_cart_price['price'],
        ];

        if (!empty($item_cart_price['discount'])) {
          $item['price']['#discount'] = $item_cart_price['discount'];
          $item['price']['#final_price'] = $item_cart_price['final_price'];
        }
      }
      $cart_rules = $cart->getCart()->cart_rules;
      $item['name'] = _alshaya_acm_update_product_name($sku_entity, $item, $cart_item[$id], $is_item_free, $cart_rules);

      // Add remove link as suffix of quantity.
      $remove_url = Url::fromUserInput('/cart/remove/' . $id);
      $remove_url_options = [
        'attributes' => [
          'gtm-type' => 'gtm-remove-cart',
        ],
      ];
      $remove_url->setOptions($remove_url_options);

      $form['cart'][$id]['quantity']['#prefix'] = '<div class="select-quantity-' . str_replace(' ', '-', $id) . '">';
      $form['cart'][$id]['quantity']['#suffix'] = '</div>' . Link::fromTextAndUrl(t('Remove'), $remove_url)->toString() . '<div class="inline-stock-error" id="stock-error-' . str_replace(' ', '-', $id) . '"></div>';

      // Load the first image.
      $sku_image = alshaya_acm_get_product_display_image($id, '137x144');
      $item['quantity']['#type'] = 'select';
      $item['quantity']['#attributes']['gtm-type'] = 'gtm-quantity';
      // Add ajax callback to update cart's total on quantity change.
      $item['quantity']['#ajax'] = [
        'callback' => 'alshaya_acm_cart_ajax_quantity_callback',
        'event' => 'change',
      ];

      $remove_url = Url::fromUserInput('/cart/remove/' . $id);
      $remove_url_options = [
        'attributes' => [
          'gtm-type' => 'gtm-remove-cart',
        ],
      ];
      $remove_url->setOptions($remove_url_options);

      $item['quantity']['#prefix'] = '<div class="select-quantity-' . str_replace(' ', '-', $id) . '">';
      $item['quantity']['#suffix'] = '</div>';
      $item['quantity']['#suffix'] .= Link::fromTextAndUrl(t('Remove'), $remove_url)->toString();

      _alshaya_acm_check_cart_item_stock($sku_entity, $item, $out_of_stock_message);

      // Add sub total price of product.
      if ($is_item_free) {
        $item['sub_total'] = [
          '#markup' => '<div class="final-price">' . t('FREE') . '</div>',
        ];
      }
      else {
        $item_quantity = $item['quantity']['#default_value'];
        $item_price = $cart_item[$id]['price'] * $item_quantity;
        $item['sub_total'] = [
          '#markup' => alshaya_acm_price_format($item_price),
          '#price' => $item_cart_price['price'],
        ];
      }

      // Adding class attribute to columns for mobile view.
      $item['name']['#wrapper_attributes'] = ['class' => ['name']];
      $item['quantity']['#wrapper_attributes'] = ['class' => ['quantity']];
      $item['price']['#wrapper_attributes'] = ['class' => ['price dark']];
      $item['sub_total']['#wrapper_attributes'] = [
        'class' => ['subtotal', 'blend', 'dark'],
      ];
    }
  }

  // Add checkout button on top.
  $form['actions_top'] = [
    '#type' => 'container',
    '#weight' => -98,
  ];

  if (empty($out_of_stock_message)) {
    // Change checkout button text to 'Checkout Securely'.
    $form['actions']['checkout']['#value'] = t('checkout securely');
    $form['actions']['checkout']['#suffix'] = '</div>';
    $form['actions']['checkout']['#prefix'] = '<div id="secure-checkout-button">';
    // We need to change the markup for submit button.
    // @see alshaya_white_label_theme_suggestions_input_alter().
    $form['actions']['checkout']['#attributes']['data-twig-suggestion'] = 'secure-checkout';
    $form['actions']['checkout']['#attributes']['class'][] = 'bottom-edit-checkout';

    // Added link markup.
    $form['actions_top']['checkout_top'] = [
      '#markup' => '<a class="checkout-top-button top-edit-checkout" id="checkout-top">' . $form['actions']['checkout']['#value']->render() . '</a>',
    ];
  }
  else {
    $form['actions']['checkout']['#access'] = FALSE;
  }

  // Out of stock error message.
  if (!empty($out_of_stock_message)) {
    $form['form_level_error_wrapper']['out_of_stock']['#markup'] = '<div id="out-of-stock-message">' . $out_of_stock_message . '</div>';
  }

  // Add class to checkout and update button as well as actions.
  $form['actions']['update']['#attributes']['class'][] = 'edit-update';
  $form['actions']['checkout']['#attributes']['class'][] = 'edit-checkout';
  $form['actions']['#attributes']['class'][] = 'edit-actions';

  // Add wrapper to cart table for themeing.
  $form['cart']['#prefix'] = '<div id="table-cart-items">';
  $form['cart']['#suffix'] = '</div>';

  // Add wrapper to cart totals table for themeing.
  $form['totals']['#prefix'] = '<div id="table-cart-totals">';

  // Update some labels to match wireframe/mockup.
  $form['totals']['sub']['label'] = ['#markup' => t('Sub total')];
  $form['totals']['grand']['label'] = ['#markup' => t('Order Total <span>(Before Delivery)</span>')];

  $form['totals']['#weight'] = 10;

  // Wrap Promotion code in a fieldset.
  $form['promotion_code_wrapper'] = [
    '#type' => '#markup',
    '#prefix' => '<div class="promo-continue-shopping-wrapper">',
  ];

  unset($form['coupon']);
  $form['promotion_code_wrapper']['coupon'] = [
    '#title' => t('Promotion code'),
    '#type' => 'textfield',
    '#prefix' => '<div class="coupon-code-wrapper"><div class="card__header">' . t('Add a promo code') . '</div>',
    '#suffix' => '<span id="apply_coupon">' . t('apply') . '</span></div>',
    '#default_value' => $cart->getCoupon(),
  ];

  if (!empty($cart_items)) {
    // Add continue shopping link, that redirect user to homepage.
    $form['continue_shopping'] = [
      '#type' => 'link',
      '#title' => t('continue shopping'),
      '#url' => Url::fromRoute('<front>'),
      '#weight' => 4,
      '#suffix' => '</div>',
    ];

    // Add continue shopping link, that redirect user to homepage.
    $form['actions']['continue_shopping_mobile'] = [
      '#type' => 'link',
      '#title' => t('continue shopping'),
      '#url' => Url::fromRoute('<front>'),
      '#suffix' => '</div>',
    ];
  }

  // Add class to continut shopping link.
  $form['actions']['continue_shopping_mobile']['#attributes']['class'][] = 'edit-continue-shopping-mobile';

  // Attach library, to cater to Coupon submit button.
  $form['#attached']['library'][] = 'alshaya_acm/alshaya.acm.js';

  _alshaya_acm_format_cart_total($form, $cart);
}

/**
 * Alter totals to use markup instead of plain text.
 *
 * @param array $form
 *   The form array.
 * @param object $cart
 *   The cart object.
 */
function _alshaya_acm_format_cart_total(array &$form, $cart) {
  // Get the new totals of cart.
  $totals = $cart->totals();

  $form['totals']['sub']['value'] = [
    '#markup' => alshaya_acm_price_format($totals['sub']),
  ];

  if ((float) $totals['tax'] > 0) {
    $form['totals']['tax']['value'] = [
      '#markup' => alshaya_acm_price_format($totals['tax']),
    ];
  }

  if ((float) $totals['discount'] != 0) {
    $cart_rules = $cart->getCart()->cart_rules;
    $promotions = [];
    foreach ($cart_rules as $rule_id) {
      $promotionManager = \Drupal::service('alshaya_acm_promotion.manager');
      $promotion = $promotionManager->getPromotionByRuleId($rule_id);
      $langcode = \Drupal::service('language_manager')->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
        ->getId();
      // Get the promotion with language fallback, if it did not have a
      // translation for $langcode.
      if ($promotion) {
        $promotion = \Drupal::service('entity.repository')->getTranslationFromContext($promotion, $langcode);
        if ($promotion) {
          $promotion_title = $promotion->getTitle();
          $promotion_label = $promotion->get('field_acq_promotion_label')->getString();
          $promotions[$rule_id]['title'] = $promotion_title;
          $promotions[$rule_id]['label'] = $promotion_label;
        }
      }
    }
    $form['totals']['discount']['value'] = [
      '#markup' => alshaya_acm_price_format($totals['discount'], $promotions),
    ];
  }

  if ((float) $totals['shipping'] != 0) {
    $totals['grand'] -= $totals['shipping'];
  }

  $form['totals']['grand']['value'] = [
    '#markup' => alshaya_acm_price_format($totals['grand']),
  ];
}

/**
 * Ajax callback: Update cart item's sub total and cart's total / sub total.
 */
function alshaya_acm_cart_ajax_quantity_callback(&$form, FormStateInterface $form_state) {
  if ($errors = $form_state->getErrors()) {
    return $form;
  }

  $message = '';

  if (UpdateCartErrorEventSubscriber::getErrorStatus()) {
    $errors = UpdateCartErrorEventSubscriber::getErrors();
    $message = '<div id="out-of-stock-message">' . reset($errors) . '</div>';
  }

  // Prepare the ajax Response.
  $response = new AjaxResponse();

  // Show the error or remove existing errors.
  $response->addCommand(new HtmlCommand('.form-level-error-wrapper', $message));

  // Update the cart table (product rows).
  $response->addCommand(new ReplaceCommand('#table-cart-items', $form['cart']));

  // Update totals.
  $cart_total = [];
  $cart_total['totals'] = $form['totals'];
  $cart_total['actions'] = $form['actions'];
  $response->addCommand(new ReplaceCommand('#table-cart-totals', $cart_total));

  // // Update page title.
  $cartStorage = \Drupal::service('acq_cart.cart_storage');
  $cart = $cartStorage->getCart();
  $response->addCommand(new HtmlCommand('h1.c-page-title', t("Basket (%count)", ['%count' => $cart->getCartItemsCount()])));

  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function alshaya_acm_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();

  // Change cart page title with quantity count.
  if ($route_match->getRouteName() == 'acq_cart.cart') {
    $cart = \Drupal::service('acq_cart.cart_storage')->getCart(FALSE);
    $count = $cart ? $cart->getCartItemsCount() : 0;

    $variables['title'] = [
      '#markup' => t("Basket (%count)", ['%count' => $count]),
    ];
  }
}

/**
 * Get all cart items as sku associated array.
 *
 * @return array
 *   Array of all skus assiciated by sku key.
 */
function alshaya_acm_get_cart_items_by_sku() {
  $skus = [];
  $cartStorage = \Drupal::service('acq_cart.cart_storage');
  $cart = $cartStorage->getCart();
  $items = $cart->items();
  if (!empty($items)) {
    foreach ($items as $index => $line_item) {
      $skus[$line_item['sku']] = $line_item;
    }
  }
  return $skus;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_form_sku_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['quantity']['#type'] = 'select';
  $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options();
  unset($form['quantity']['#size']);

  if (isset($form['ajax'], $form['ajax']['configurables'])) {
    foreach ($form['ajax']['configurables'] as $key => $form_item) {
      if (is_array($form_item) && isset($form_item['#type']) && $form_item['#type'] == 'select') {
        $form['ajax']['configurables'][$key]['#empty_option'] = $form_item['#title'];
      }
    }
  }
  // We need to change the markup for submit button.
  // @see alshaya_white_label_theme_suggestions_input_alter().
  $form['add_to_cart']['#attributes']['data-twig-suggestion'] = 'addtocart';

  // Adding classes to add to cart button and quanity field.
  $form['add_to_cart']['#attributes']['class'][] = 'edit-add-to-cart';
  $form['quantity']['#attributes']['class'][] = 'edit-quantity';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_form_multistep_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Create the cart page link.
  $url = Url::fromRoute('acq_cart.cart');
  $link = \Drupal::l('Back to Basket', $url)->getGeneratedLink();
  $form['back_to_cart'] = [
    '#markup' => $link,
    '#weight' => -5,
  ];
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_theme($existing, $type, $theme, $path) {
  return [
    'checkout_summary' => [
      'variables' => [
        'cart_link' => '',
        'number_of_items' => '',
        'products' => '',
        'totals' => [],
        'currency_format' => '',
        'currency_code_position' => '',
        'delivery' => [],
      ],
      'template' => 'block--checkout-summary',
    ],
    'alshaya_cart_product_name' => [
      'variables' => [
        'sku_attributes' => '',
        'promotions' => '',
        'item_code' => '',
        'total_price' => '',
        'name' => '',
        'image' => '',
        'include_in_bundle' => '',
        'available_delivery_methods' => '',
      ],
    ],
  ];
}

/**
 * Wrapper function to format price value with currency.
 *
 * @param float $price
 *   Price value.
 *
 * @return mixed|null
 *   Return rendered theme with html for price.
 */
function alshaya_acm_price_format($price, $promotions = []) {
  $output = [
    '#theme' => 'acq_commerce_price',
    '#price' => $price,
  ];

  if ($promotions) {
    $output['#promotions'] = $promotions;
  }

  return render($output);
}

/**
 * Wrapper function to format price value with currency.
 *
 * It also does an additional check for free and returns FREE as text if price
 * is 0.
 *
 * @param mixed $price
 *   Price value.
 *
 * @return mixed|null
 *   Return rendered theme with html for price.
 */
function alshaya_acm_price_get_formatted_price($price) {
  if (empty($price)) {
    return t('FREE');
  }

  return alshaya_acm_price_format($price);
}

/**
 * Helper function to get cart quantity options.
 *
 * @param int|null $max
 *   Maximum possible quantity.
 * @param int|null $selected
 *   Current selection.
 *
 * @return array
 *   Options array.
 */
function _alshaya_acm_get_cart_quantity_options($max = NULL, $selected = NULL) {
  // Get max possible from config.
  $max_config = \Drupal::config('alshaya_acm.cart_config')->get('max_cart_qty');

  // We display options till current selection if available.
  if ($selected > $max_config) {
    $max_config = $selected;
  }

  // We take lower value for quantity options as per config or provided value.
  $max = $max && $max_config > $max ? $max : $max_config;

  // Get array using range() with 1 as minimum and maximum value from config.
  $range = range(1, $max);

  // Using array_combine to ensure we have same data in key and value.
  return array_combine($range, $range);
}

/**
 * Get the stock info of given sku.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU Entity object.
 * @param bool $reset
 *   Flag to reset cache and get fresh stock.
 *
 * @return bool|array
 *   Return the stock response or boolean value.
 */
function alshaya_acm_get_product_stock(SKU $sku_entity, $reset = FALSE) {
  $stock = &drupal_static(__FUNCTION__, []);

  // TODO: Remove this after go live probably.
  global $_alshaya_acm_disable_stock_check;
  if ($_alshaya_acm_disable_stock_check) {
    return [
      'stock_id' => 2,
      'quantity' => 7,
      'is_in_stock' => TRUE,
    ];
  }

  if ($reset || !isset($stock[$sku_entity->getSku()])) {
    $stock[$sku_entity->getSku()] = NULL;

    try {
      // Stock check.
      $sku_stock = acq_sku_get_sku_stock($sku_entity, $reset);

      if (empty($sku_stock) || (!empty($sku_stock) && !$sku_stock['is_in_stock'])) {
        $stock[$sku_entity->getSku()] = NULL;
      }
      elseif (isset($sku_stock['is_in_stock'])) {
        $stock[$sku_entity->getSku()] = $sku_stock;
      }
    }
    catch (\Exception $e) {
      // Error is already logged so we just suppress it here and don't pass
      // in frontend.
    }
  }
  return $stock[$sku_entity->getSku()];
}

/**
 * Check if product is in stock for the given sku.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   The Sku entity object.
 * @param bool $recheck
 *   Flag to specify if we should recheck.
 * @param bool $reset
 *   Flag to reset cache and get fresh stock.
 *
 * @return int|bool
 *   Return quantity if stock exists, else false.
 */
function alshaya_acm_is_product_in_stock(SKU $sku_entity, $recheck = FALSE, $reset = FALSE) {
  // @TODO: Add condition and handle stock check for grouped.
  if ($sku_entity->bundle() == 'simple') {
    if ($sku_stock = alshaya_acm_get_product_stock($sku_entity, $reset)) {
      if ($sku_stock['is_in_stock']) {
        return $sku_stock['quantity'];
      }
      elseif (!$reset && $recheck) {
        if ($sku_stock = alshaya_acm_get_product_stock($sku_entity, TRUE)) {
          return $sku_stock['quantity'];
        }
      }
    }
  }
  elseif ($sku_entity->bundle() == 'configurable') {
    /** @var \Drupal\acq_sku\Plugin\AcquiaCommerce\SKUType\Configurable $plugin */
    $plugin = $sku_entity->getPluginInstance();
    $tree = $plugin->deriveProductTree($sku_entity);

    if (isset($tree['products'])) {
      $quantities = [];

      foreach ($tree['products'] as $child_sku => $child_sku_entity) {
        if ($child_sku_entity instanceof SKU) {
          $quantities[$child_sku] = (int) alshaya_acm_is_product_in_stock($child_sku_entity, $recheck, $reset);
        }
      }

      return empty($quantities) ? FALSE : max($quantities);
    }
  }

  return FALSE;
}

/**
 * Implements hook_alshaya_onetime_translation_add().
 */
function alshaya_acm_alshaya_i18n_onetime_translation_add() {
  // Translate currency code in config.
  $config = \Drupal::languageManager()->getLanguageConfigOverride('ar', 'acq_commerce.currency');
  $config->set('currency_code', 'د٠ك٠');
  $config->set('currency_code_position', 'after');
  $config->save();

  // Translate store id in config.
  $config = \Drupal::languageManager()->getLanguageConfigOverride('ar', 'acq_commerce.store');
  $config->set('store_id', '3');
  $config->save();

  // Add translation for the error messages we check in API response.
  // Set initial translation string for en language.
  // Array of language translation strings.
  $strings = [
    'This product is out of stock.' => [
      'ar' => 'هذا المنتج غير متوفر في المخزن.',
    ],
    "We don't have as many" => [
      'ar' => 'ليس لدينا العديد من',
    ],
    'Some of the products are out of stock.' => [
      'ar' => 'بعض المنتجات غير متوفرة بالمخزن.',
    ],
    'Not all of your products are available in the requested quantity.' => [
      'ar' => 'بعض المنتجات غير متوفرة بالمخزن.',
    ],
    'Coupon code is not valid' => [
      'ar' => 'رمز قسيمة الخصم غير صالحة',
    ],
  ];

  alshaya_i18n_save_translations($strings);
}

/**
 * Helper function prepare name for basket page and reused in summary block.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity of the form item.
 * @param array $item
 *   Form item array.
 * @param array $cart_item
 *   Cart item array.
 *
 * @return array
 *   Item name build array.
 */
function _alshaya_acm_update_product_name(SKU $sku_entity, array $item, array $cart_item, $is_free_item = FALSE, $cart_rules = []) {
  // Get SKU attributes.
  $sku_attributes = alshaya_acm_product_get_sku_configurable_values($sku_entity);

  $name = [];

  // Get parent sku of the sku.
  $parent_sku = alshaya_acm_product_get_parent_sku_by_sku($sku_entity);
  $promotion_types = ['cart'];
  $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, FALSE, $promotion_types);

  // @TODO: Remove this once we have products appearing correclty with cart promotions.
  // Currently the only way to display cart promotion is to check cart_rules
  // applied to the current cart & check if its type is buy_X_get_Y. Use this
  // promotion to render the tooltip help text.
  if ($is_free_item) {
    foreach ($cart_rules as $cart_rule) {
      $promotion = \Drupal::service('alshaya_acm_promotion.manager')->getPromotionByRuleId($cart_rule);
      $promotion_action = $promotion->get('field_acq_promotion_action')->getString();
      if (($promotion_action === 'buy_x_get_y_cheapest_free') &&
        (!isset($promotions[$promotion->id()]))) {
        $langcode = \Drupal::service('language_manager')->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
        $promotion = \Drupal::service('entity.repository')->getTranslationFromContext($promotion, $langcode);
        $promotion_text = $promotion->get('field_acq_promotion_label')->getString();
        $discount_type = $promotion->get('field_acq_promotion_disc_type')->getString();
        $discount_value = $promotion->get('field_acq_promotion_discount')->getString();
        $description = $promotion->get('field_acq_promotion_description')->getString();

        $promotions[$promotion->id()] = [
          'text' => $promotion_text,
          'description' => $description,
          'discount_type' => $discount_type,
          'discount_value' => $discount_value,
        ];
        break;
      }
    }
  }

  if ($parent_sku) {
    /* @var \Drupal\node\Entity\Node $parent_node */
    $parent_node = alshaya_acm_product_get_display_node($parent_sku->getSKU());
    if ($parent_node) {
      $name = [
        '#title' => $parent_node->getTitle(),
        '#type' => 'link',
        '#url' => Url::fromRoute('entity.node.canonical', ['node' => $parent_node->id()]),
      ];
    }
  }
  else {
    /* @var \Drupal\node\Entity\Node $product_node */
    $product_node = alshaya_acm_product_get_display_node($sku_entity);
    $name = [
      '#title' => $product_node->getTitle(),
      '#type' => 'link',
      '#url' => Url::fromRoute('entity.node.canonical', ['node' => $product_node->id()]),
    ];
  }

  // Load the first image.
  $sku_image = alshaya_acm_get_product_display_image($sku_entity, '137x144');

  return [
    '#theme' => 'alshaya_cart_product_name',
    '#sku_attributes' => $sku_attributes,
    '#name' => $name,
    '#promotions' => $promotions,
    '#image' => $sku_image,
    '#total_price' => alshaya_acm_price_format($item['quantity']['#default_value'] * $cart_item['price']),
    '#item_code' => $sku_entity->getSku(),
  ];
}

/**
 * Helper function to handle out of stock check for cart item.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity of the form item.
 * @param array $item
 *   Form item array.
 * @param string $out_of_stock_message
 *   Out of stock message.
 */
function _alshaya_acm_check_cart_item_stock(SKU $sku_entity, array &$item, &$out_of_stock_message) {
  $item_stock_error = '';
  $selected_quantity = $item['quantity']['#default_value'];

  // If item is not available in stock.
  if ($quantity = alshaya_acm_is_product_in_stock($sku_entity, TRUE)) {
    if ($selected_quantity > $quantity) {
      Cache::invalidateTags(['acq_sku:' . $sku_entity->id()]);
      $out_of_stock_message = t('Sorry, one or more products in your basket are no longer available. Please review your basket in order to checkout securely.');
      $item_stock_error = t('This product is not available in the selected quantity. Please adjust the quantity to proceed.');

      // We display dropdown with selected quantity to avoid confusions.
      $item['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($selected_quantity);
    }
    else {
      $item['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity, $selected_quantity);
    }
  }
  else {
    Cache::invalidateTags(['acq_sku:' . $sku_entity->id()]);

    $out_of_stock_message = t('Sorry, one or more products in your basket are no longer available. Please review your basket in order to checkout securely.');
    $item_stock_error = t('This product is out of stock. Please remove to proceed.');

    $item['#attributes']['class'][] = 'sku-out-stock';

    // We display dropdown with selected quantity to avoid confusions.
    $item['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($selected_quantity);
  }

  // Add remove link as suffix of quantity.
  $item['quantity']['#suffix'] .= '<div class="inline-stock-error" id="stock-error-' . str_replace(' ', '-', $sku_entity->getSku()) . '">' . $item_stock_error . '</div>';
}
