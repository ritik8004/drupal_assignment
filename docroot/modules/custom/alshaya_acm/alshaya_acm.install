<?php

/**
 * @file
 * Contains install, update, uninstall hooks for alshaya_acm module.
 */

use Drupal\Core\Site\Settings;
use Drupal\lightning_core\ConfigHelper;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\simple_oauth\Entity\Oauth2Client;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_update_dependencies().
 */
function alshaya_acm_update_dependencies() {
  return [
    'alshaya_acm' => [
      8006 => [
        'acq_commerce' => 8001,
      ],
    ],
  ];
}

/**
 * Implements hook_update_N().
 *
 * Add new role for sync user.
 */
function alshaya_acm_update_8006() {
  /** @var \Drupal\user\Entity\User $user */
  $user = user_load_by_name(Settings::get('alshaya_acm_user_username'));

  if ($user) {
    // Add new role to sync user.
    $user->addRole('acq_commerce_sync');

    // Remove admin role from sync user.
    $user->removeRole('administrator');

    $user->save();
  }
}

/**
 * Implements hook_update().
 *
 * Update the C&C STS message, change placeholder to stop forced italic.
 */
function alshaya_acm_update_8005() {
  // Array of language translation strings.
  $strings = [
    'Your order will be available in @duration' => [
      'ar' => 'سيتم توصيل طلبيتك خلال @duration',
    ],
  ];
  alshaya_i18n_save_translations($strings);
}

/**
 * Implements hook_update_N().
 *
 * Set new config for interval in alshaya_acm.settings.
 */
function alshaya_acm_update_8004() {
  // This setting is no longer in use.
}

/**
 * Implements hook_update_N().
 *
 * Update image styles.
 */
function alshaya_acm_update_8003() {
  $module_name = 'alshaya_acm';
  $path = 'install';
  $configs = [
    'image.style.checkout_summary_block_thumbnail',
  ];

  foreach ($configs as $config) {
    $config_yaml = Yaml::parse(file_get_contents(drupal_get_path('module', $module_name) . '/config/' . $path . '/' . $config . '.yml'));
    \Drupal::configFactory()
      ->getEditable($config)
      ->setData($config_yaml)
      ->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * Update debug config.
 */
function alshaya_acm_update_8002() {
  $config = \Drupal::configFactory()->getEditable('acq_commerce.conductor');
  $config->set('debug', Settings::get('acq_commerce.conductor')['debug']);
  $config->save();
}

/**
 * Implements hook_update_N().
 *
 * Install new config - alshaya_acm.settings.
 */
function alshaya_acm_update_8001() {
  ConfigHelper::forModule('alshaya_acm')
    ->install()
    ->get('alshaya_acm.settings')
    ->save();
}

/**
 * Implements hook_install().
 */
function alshaya_acm_install() {
  // Create a user that will be used by ACM when pushing to Drupal.
  $user = User::create();
  $user->setPassword(Settings::get('alshaya_acm_user_password'));
  $user->enforceIsNew();
  $user->setEmail(Settings::get('alshaya_acm_user_email'));
  $user->setUsername(Settings::get('alshaya_acm_user_username'));
  $user->activate();
  $user->addRole('acq_commerce_sync');
  $user->save();

  // Configure Simple Oauth.
  $config = \Drupal::configFactory()->getEditable('simple_oauth.settings');
  $config->set('public_key', Settings::get('alshaya_acm_soauth_public_key'));
  $config->set('private_key', Settings::get('alshaya_acm_soauth_private_key'));
  $config->save();

  // Add Simple Oauth client.
  $client = Oauth2Client::create();
  $client->set('label', 'Alshaya ACM');
  $client->setDefaultUser($user);
  $client->setSecret(Settings::get('alshaya_acm_soauth_client_secret'));
  $client->set('roles', ['administrator']);
  $client->set('uuid', Settings::get('alshaya_acm_soauth_client_uuid'));
  $client->save();

  // Update product category sync root setting.
  $config = \Drupal::configFactory()->getEditable('acq_commerce.conductor');
  $config->set('filter_root_category', TRUE);

  $acq_commerce_conductor_settings = Settings::get('acq_commerce.conductor');

  foreach ($acq_commerce_conductor_settings as $key => $value) {
    $config->set($key, $value);
  }

  $config->save();

  $country_code = _alshaya_custom_get_site_level_country_code();

  \Drupal::moduleHandler()->loadInclude('alshaya', 'inc', 'utilities/alshaya.utilities.countries');
  $currency_code = _alshaya_get_currency_code($country_code, 'en');

  // Update the currency code to one required for the site.
  $config = \Drupal::configFactory()->getEditable('acq_commerce.currency');
  $config->set('currency_code', $currency_code);
  $config->set('decimal_points', 3);
  $config->save();

  // Get all nodes of 'page' type bundle.
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'page')
    ->execute();
  $nodes = Node::loadMultiple($nids);
  // If there are any nodes.
  if (!empty($nodes)) {
    foreach ($nodes as $node) {
      try {
        // Delete the node.
        $node->delete();
      }
      catch (\Exception $e) {
        // If something goes wrong.
        \Drupal::logger('alshaya_acm')->error('Unable to delete the node with nid @nid', ['@nid' => $node->id()]);
      }
    }
  }

  // Get menu links with uri 'internal:/store'.
  $menu_link_ids = \Drupal::entityQuery('menu_link_content')
    ->condition('link__uri', 'internal:/store')
    ->execute();
  $menu_links = MenuLinkContent::loadMultiple($menu_link_ids);
  // If there any menu links.
  if ($menu_links) {
    foreach ($menu_links as $menu_link) {
      try {
        // Delete the menu_link.
        $menu_link->delete();
      }
      catch (\Exception $e) {
        // If something goes wrong.
        \Drupal::logger('alshaya_acm')->error('Unable to delete the menu link with lid @lid', ['@lid' => $menu_link->id()]);
      }
    }
  }

}
