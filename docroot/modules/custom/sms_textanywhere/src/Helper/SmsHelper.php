<?php

namespace Drupal\sms_textanywhere\Helper;

use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drupal\sms\Provider\SmsProviderInterface;
use Drupal\sms\Entity\SmsMessage;
use Drupal\sms\Direction;
use Drupal\sms\Message\SmsMessageResultInterface;

/**
 * Class SmsHelper.
 *
 * @package Drupal\sms_textanywhere
 */
class SmsHelper {

  /**
   * The SMS Provider.
   *
   * @var \Drupal\sms\Provider\SmsProviderInterface
   */
  protected $smsProvider;

  /**
   * The message.
   *
   * @var \Drupal\sms\Entity\SmsMessageInterface
   */
  protected $message;

  /**
   * Logger.
   *
   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
   */
  protected $logger;

  /**
   * Pass the dependency to the object constructor.
   *
   * @param \Drupal\sms\Provider\SmsProviderInterface $sms_provider
   *   The SMS service provider.
   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
   *   LoggerFactory object.
   */
  public function __construct(SmsProviderInterface $sms_provider, LoggerChannelFactoryInterface $logger_factory) {

    $this->smsProvider = $sms_provider;
    $this->logger = $logger_factory->get('sms_textanywhere');
  }

  /**
   * A helper fucntion to hit sms send service method.
   *
   * @param array $recipients
   *   Destinations as mobile numbers.
   * @param string $message
   *   Contains message body.
   */
  public function sendSms(array $recipients, $message) {
    $this->message = SmsMessage::create()
      ->addRecipients($recipients)
      ->setMessage($message);

    $this->message->setDirection(Direction::OUTGOING);

    try {
      $messages = $this->smsProvider->send($this->message);
      foreach ($messages as $message) {
        $result = $message->getResult();
        if ($error = $this->resultMessage($result)) {
          throw new \Exception($error);
        }
      }

      $this->smsProvider->queue($this->message);
      $this->logger->info('Message added to the outgoing queue - Recipients:@recipients', [
        '@recipients' => implode(',', $recipients),
      ]);

    }
    catch (\Exception $e) {
      $this->logger->error('Message could not be sent: @error', [
        '@error' => $e->getMessage(),
      ]);
    }
  }

  /**
   * Output a status message for a result object.
   *
   * @param \Drupal\sms\Message\SmsMessageResultInterface $result
   *   An SMS result object.
   *
   * @return Drupal\sms\Message\SmsMessageResultInterface
   *   An API error message.
   */
  protected function resultMessage(SmsMessageResultInterface $result) {
    if ($result->getError()) {
      $this->logger->error('Error in TextAnywhere API - %error', [
        '%error' => $result->getErrorMessage(),
      ]);
      return $result->getErrorMessage();
    }
    elseif ($report_count = count($result->getReports())) {
      $this->logger->info('Message was processed, @count delivery reports were generated.', [
        '@count' => $report_count,
      ]);
    }
    else {
      $this->logger->error('An unknown error occurred while attempting to process message. No result or reports were generated by the gateway.');
    }
  }

}
