<?php

namespace Drupal\sms_textanywhere\Helper;

use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drupal\sms\Provider\SmsProviderInterface;
use Drupal\sms\Direction;
use Drupal\sms\Message\SmsMessageResultInterface;
use Drupal\sms\Entity\SmsMessage;

/**
 * Class Sms Helper.
 *
 * @package Drupal\sms_textanywhere
 */
class SmsHelper {

  /**
   * The SMS Provider.
   *
   * @var \Drupal\sms\Provider\SmsProviderInterface
   */
  protected $smsProvider;

  /**
   * Logger.
   *
   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
   */
  protected $logger;

  /**
   * SmsHelper constructor.
   *
   * @param \Drupal\sms\Provider\SmsProviderInterface $sms_provider
   *   The SMS service provider.
   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
   *   LoggerFactory object.
   */
  public function __construct(SmsProviderInterface $sms_provider,
                              LoggerChannelFactoryInterface $logger_factory) {

    $this->smsProvider = $sms_provider;
    $this->logger = $logger_factory->get('sms_textanywhere');
  }

  /**
   * Sends sms to the specified recipients.
   *
   * @param array $recipients
   *   Destinations as mobile numbers.
   * @param string $message
   *   Contains message body.
   */
  public function sendSms(array $recipients, string $message) {
    $sms_message = SmsMessage::create()
      ->addRecipients($recipients)
      ->setMessage($message);

    $sms_message->setDirection(Direction::OUTGOING);

    try {
      $messages = $this->smsProvider->send($sms_message);
      foreach ($messages as $message) {
        $result = $message->getResult();
        $this->resultMessage($result, $message->getRecipients());
      }
    }
    catch (\Exception $e) {
      $this->logger->error('Message could not be sent: @error', [
        '@error' => $e->getMessage(),
      ]);
    }
  }

  /**
   * Output a status message for a result object.
   *
   * @param \Drupal\sms\Message\SmsMessageResultInterface $result
   *   An SMS result object.
   * @param array $recipients
   *   An array of recipients.
   */
  protected function resultMessage(SmsMessageResultInterface $result, array $recipients) {
    if ($result->getError()) {
      $this->logger->error('Message could not be sent due to error in textanywhere gateway - %error', [
        '%error' => $result->getErrorMessage(),
      ]);
    }
    elseif ($report_count = is_countable($result->getReports()) ? count($result->getReports()) : 0) {
      $this->logger->info('Message was processed, @count delivery reports were generated - Recipients: @recipients', [
        '@count' => $report_count,
        '@recipients' => implode(',', $recipients),
      ]);
    }
    else {
      $this->logger->error('An unknown error occurred while attempting to process message. No result or reports were generated by the gateway.');
    }
  }

}
