<?php

/**
 * @file
 * File for shoe AI Implementation.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_node_view().
 */
function alshaya_shoeai_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $bundle = ['acq_product', 'rcs_product'];
  if (in_array($entity->bundle(), $bundle) && $view_mode == 'full') {
    $alshaya_shoeai_settings = \Drupal::config('alshaya_shoeai.settings');
    $build['#cache']['tags'] = Cache::mergeTags($build['#cache']['tags'] ?? [], $alshaya_shoeai_settings->getCacheTags());
    $shoeAi = get_shoe_ai_settings();
    if (!empty($shoeAi)) {
      $build['#attached']['library'][] = 'alshaya_shoeai/shoeai_js';
      $build['#attached']['drupalSettings']['shoeai'] = $shoeAi;
    }
  }
}

/**
 * Implements hook_taxonomy_term_view().
 */
function alshaya_shoeai_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $vocabularies = ['rcs_category', 'acq_product_category'];
  if (in_array($entity->bundle(), $vocabularies) && $view_mode == 'full') {
    $alshaya_shoeai_settings = \Drupal::config('alshaya_shoeai.settings');
    $build['#cache']['tags'] = Cache::mergeTags($build['#cache']['tags'] ?? [], $alshaya_shoeai_settings->getCacheTags());
    $shoeAi = get_shoe_ai_settings();
    if (!empty($shoeAi)) {
      $build['#attached']['library'][] = 'alshaya_shoeai/shoeai_js';
      $build['#attached']['drupalSettings']['shoeai'] = $shoeAi;
    }
  }
}

/**
 * Helper function for creating shoeAi settings.
 *
 * @return array
 *   Return array of settings when shoeai is enabled.
 */
function get_shoe_ai_settings() {
  $shoeAiSettings = [];
  $shoeAi = \Drupal::service('alshaya_shoeai.helper');
  $status = $shoeAi->getShoeAiStatus();
  if ($status != 0) {
    $shoeAiSettings['status'] = $status;
    $shoeAiSettings['shopId'] = $shoeAi->getShoeAiShopId();
    $shoeAiSettings['scale'] = $shoeAi->getShoeAiScale();
    $shoeAiSettings['zeroHash'] = $shoeAi->getShoeAiZeroHash();
  }
  return $shoeAiSettings;
}
