<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\TypedData\Exception\ReadOnlyException;

/**
 * Implements hook_page_attachments().
 */
function alshaya_xb_page_attachments(array &$attachments) {
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'alshaya_xb/alshaya_cross_border';
  }

  if (\Drupal::routeMatch()->getRouteName() == 'entity.user.canonical') {
    $attachments['#attached']['library'][] = 'alshaya_xb/alshaya_xb_merge_cart_error_handler';
  }
}

/**
 * Implements hook_page_bottom().
 */
function alshaya_xb_page_bottom(array &$page_bottom) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // We need to allow the script to be added on the below admin routes.
  $admin_routes = [
    'change_pwd_page.change_password_form',
    'entity.user.edit_form',
  ];
  if (!in_array($route_name, $admin_routes) &&
    \Drupal::service('router.admin_context')->isAdminRoute()
  ) {
    return;
  }

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $settings = \Drupal::config('alshaya_api.settings')->get('magento_lang_prefix');
  $ge_store_code = $settings[$language];
  $config = \Drupal::config('alshaya_xb.settings');
  $ge_js_src = $config->get('globale_js_url') ?? '';
  // Used to pass the page type to associateCartToCustomer().
  $page_type = '';
  if ($route_name === 'alshaya_spc.checkout') {
    $page_type = 'checkout';
  }

  // Dynamic js to be added on every page.
  // We need to wait for associateCartToCustomer() to be available
  // to be called before showing the checkout page, so we will delay
  // the call until the page is loaded.
  $js = "
     var geStoreCode = '$ge_store_code';
     var geStoreCodeInstance = document.location.hostname;
     (function () {
       function addInlineScripts() {
         var s = document.createElement('script');
         s.type = 'text/javascript';
         s.async = true;
         s.src = '$ge_js_src';
         document.getElementsByTagName('head')[0].appendChild(s);
       };

       if ('$page_type' !== 'checkout') {
         addInlineScripts();
         return;
       }

       window.addEventListener('DOMContentLoaded', (event) => {
         window.commerceBackend.associateCartToCustomer('checkout').then((response) => {
           addInlineScripts();
         });
       });
     })();";

  // Add inline script to the page bottom.
  $page_bottom['alshaya_xb_cross_border'] = [
    '#type'  => 'html_tag',
    '#tag'   => 'script',
    '#attributes' => ['id' => 'globaleScript'],
    '#value' => Markup::create($js),
  ];

  // Inline JS added for the checkout page. This is required because the scripts
  // need to be on the page before the page loads. Also note that Global-e
  // scripts are added directly to the header.
  if ($route_name == 'alshaya_spc.checkout') {
    $file = \Drupal::service('extension.list.module')->getPath('alshaya_xb') . '/js/alshaya_xb_checkout_inline.js';
    $page_bottom['alshaya_xb_checkout_cross_border'] = [
      '#type'  => 'html_tag',
      '#tag'   => 'script',
      '#value' => Markup::create(file_get_contents($file)),
      '#cache' => [
        'tags' => ['alshaya_xb:checkout_cross_border'],
      ],
    ];
  }
}

/**
 * Implements hook_alshaya_my_account_links_alter().
 */
function alshaya_xb_alshaya_my_account_links_alter(array &$links) {
  // Removing the below links from alshaya_my_account_links block.
  unset($links['address_book']);
  unset($links['payment_cards']);
}

/**
 * Implements hook_alshaya_acm_customer_update_order_summary_alter().
 */
function alshaya_xb_alshaya_acm_customer_update_order_summary_alter(array &$order, array &$orderRow) {
  // Appending the Global-e order ID if it is present.
  if (isset($order['ext_order_id']) && !empty($order['ext_order_id'])) {
    $orderRow['orderId'] = $order['increment_id'] . ' [' . $order['ext_order_id'] . ']';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function alshaya_xb_library_info_alter(&$libraries, $extension) {
  if (isset($libraries['alshaya_cross_border'])) {
    $config = \Drupal::config('alshaya_xb.settings');
    $ge_css_src = $config->get('globale_css_url') ?? '';
    if ($ge_css_src) {
      // Adding the global-e CSS url dynamically.
      $library_key = key($libraries['alshaya_cross_border']['css']['theme']);
      $library_array = $libraries['alshaya_cross_border']['css']['theme'][$library_key];
      unset($libraries['alshaya_cross_border']['css']['theme'][$library_key]);
      $libraries['alshaya_cross_border']['css']['theme'][$ge_css_src] = $library_array;
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_xb_page_attachments_alter(array &$page) {
  $configOverrides = \Drupal::service('alshaya_xb.domain_config_overrides')->getConfigByDomain();
  if (empty($configOverrides) || empty($configOverrides['country'])) {
    return;
  }

  // Set gtm country to config overrides.
  $page['#attached']['drupalSettings']['gtm']['country'] = $configOverrides['country'];

}

/**
 * Implements hook_datalayer_alter().
 */
function alshaya_xb_datalayer_alter(array &$data_layer) {
  $configOverrides = \Drupal::service('alshaya_xb.domain_config_overrides')->getConfigByDomain();
  if (empty($configOverrides) || empty($configOverrides['country'])) {
    return;
  }

  // Set gtm country to config overrides.
  $data_layer['country'] = $configOverrides['country'];
}

/**
 * Implements hook_alshaya_api_update_customer_api_request_alter().
 */
function alshaya_xb_alshaya_api_update_customer_api_request_alter(array &$request_options) {
  // Do not update customer addresses with contact details
  // as address book is disabled for cross border.
  if (isset($request_options['json']['customer']['addresses'])
    && !empty($request_options['json']['customer']['addresses'])) {
    unset($request_options['json']['customer']['addresses']);
  }
}

/**
 * Implements hook_acq_sku_base_field_additions_alter().
 */
function alshaya_xb_acq_sku_base_field_additions_alter(array &$fields = []) {
  $alshaya_fixed_price_field = \Drupal::config('alshaya_xb.sku_base_fields')->get('fields');
  if ($alshaya_fixed_price_field) {
    $fields = array_merge($fields, $alshaya_fixed_price_field);
  }
  else {
    \Drupal::logger('alshaya_xb')->error('The config alshaya_xb.sku_base_fields is empty.');
  }
}

/**
 * Implements hook_acq_sku_product_sku_alter().
 */
function alshaya_xb_acq_sku_product_sku_alter(SKU $sku, array $product, array $existing_data) {
  if (isset($product['extension']['xb_fixed_price'])) {
    $fixed_prices = [];
    foreach ($product['extension']['xb_fixed_price'] as $fixed_price) {
      if (!empty($fixed_price['price'])) {
        $fixed_prices[$fixed_price['country_code']]['price'] = _alshaya_acm_format_price_with_decimal($fixed_price['price']);
      }
      if (!empty($fixed_price['special_price'])) {
        $fixed_prices[$fixed_price['country_code']]['special_price'] = _alshaya_acm_format_price_with_decimal($fixed_price['special_price']);
      }
    }

    try {
      // Set json in fixed price attribute in sku.
      $sku->get('attr_fixed_price')->setValue(json_encode($fixed_prices));
    }
    catch (ReadOnlyException $e) {
      \Drupal::logger('alshaya_xb')->error('Error occurred while storing fixed price attribute value in sku. @error_message', [
        '@error_message' => $e->getMessage(),
      ]);
    }
  }
}

/**
 * Implements hook_alshaya_get_currency_code_alter().
 */
function alshaya_xb_alshaya_get_currency_code_alter(&$currency) {
  $currency['xb']['en'] = 'AED';
  $currency['xb']['ar'] = 'AED';
}

/**
 * Implements hook_alshaya_acm_customer_orders_details_build_alter().
 */
function alshaya_xb_alshaya_acm_customer_orders_details_build_alter(array &$order, array &$build) {
  // Set delivery method for XB order.
  if (!empty($order['extension']['globale']['shipping_method'])) {
    $build['#order_details']['delivery_method'] = $order['extension']['globale']['shipping_method'];
  }

  // Set billing method for XB order.
  if (!empty($order['extension']['globale']['billing_method'])) {
    $build['#order_details']['payment_method'] = $order['extension']['globale']['billing_method'];
  }

  if (empty($build["#cancelled_products"])) {
    return;
  }

  foreach ($build["#cancelled_products"] as &$item) {
    if (!$item['is_item_cancelled']) {
      continue;
    }

    // Update refund product price from amount_refunded.
    $item['refund_amount'] = $item['amount_refunded'];
    // Update refund total for product.
    $item['total'] = alshaya_acm_price_format($item['refund_amount'], [], '', $order['order_currency_code']);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function alshaya_xb_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if ($field_definition->getName() == 'attr_fixed_price') {
    // Set allowed format to mail_text.
    $element['#allowed_formats'] = ['mail_text'];
    // Add after build to remove the help wrapper and text.
    $element['#after_build'][] = '_field_text_content_after_build';
  }
}

/**
 * After build callback for field_text_content.
 *
 * @param array $element
 *   Array element.
 * @param object $form_state
 *   Form state.
 *
 * @return array
 *   New element.
 */
function _field_text_content_after_build(array $element, object $form_state) {
  if (isset($element['format'])) {
    // Remove any guidelines and help text and theme wrapper
    // as user should not change the format.
    unset($element['format']['help']);
    unset($element['format']['guidelines']);
    unset($element['format']['#type']);
    unset($element['format']['#theme_wrappers']);
  }
  return $element;
}
