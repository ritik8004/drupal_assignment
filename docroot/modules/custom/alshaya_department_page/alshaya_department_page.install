<?php

/**
 * @file
 * Contains install, update, uninstall hooks for alshaya_department_page module.
 */

use Drupal\paragraphs\Entity\Paragraph;
use Drupal\node\Entity\Node;

/**
 * Implements hook_update_N().
 *
 * Add new field show_left_menu.
 */
function alshaya_department_page_update_8004() {
  $configs = [
    'field.storage.node.field_show_left_menu',
    'field.field.node.department_page.field_show_left_menu',
    'core.entity_form_display.node.department_page.default',
    'core.entity_view_display.node.department_page.default',
  ];
  alshaya_config_install_configs($configs, 'alshaya_department_page', 'install');

  // Set default value for 'show left menu' field on department pages.
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'department_page')
    ->execute();
  $nodes = Node::loadMultiple($nids);
  foreach ($nodes as $department_page) {
    $department_page->set('field_show_left_menu', '1');
    $department_page->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * Include the paragraphs.paragraphs_type.block_reference field.
 */
function alshaya_department_page_update_8003() {
  alshaya_config_install_configs(['field.field.node.department_page.field_promo_blocks'], 'alshaya_department_page');
}

/**
 * Implements hook_update_N().
 *
 * Enabling translation on paragraph referenced fields.
 */
function alshaya_department_page_update_8002() {
  // Paragraph fields in department pages.
  $fields = [
    'field_promo_blocks',
  ];

  // Load all department page content.
  $pages = \Drupal::entityTypeManager()
    ->getListBuilder('node')
    ->getStorage()
    ->loadByProperties([
      'type' => 'department_page',
    ]);

  // Correct file status for all files linked to paragraphs in department pages.
  /** @var \Drupal\node\Entity\Node $page */
  foreach ($pages as $page) {
    // Check if we have AR translation available for the content.
    // Data correction is required only for AR.
    if (!$page->hasTranslation('ar')) {
      continue;
    }

    // Load the ar translation.
    /** @var \Drupal\node\Entity\Node $node */
    $page = $page->getTranslation('ar');

    // Loop through all the paragraph fields which require data correction.
    foreach ($fields as $field) {
      // Get existing values.
      $values = $page->get($field)->getValue();

      // If there is value, correct file status for each of them.
      if ($values) {
        foreach ($values as $value) {
          // Load the paragraph from the target_id in value.
          /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
          $paragraph = Paragraph::load($value['target_id']);
          _alshaya_paragraphs_correct_file_status($paragraph);

          // Check if we have arabic translation available, we use translation.
          if ($paragraph->hasTranslation('ar')) {
            $paragraph = $paragraph->getTranslation('ar');
            _alshaya_paragraphs_correct_file_status($paragraph);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Updating and reverting the department page alias to term alias.
 */
function alshaya_department_page_update_8001() {
  // Get all department pages.
  $department_pages = alshaya_department_page_get_pages();
  // If there are any department pages available.
  if (!empty($department_pages)) {
    foreach ($department_pages as $tid => $nid) {
      /** @var \Drupal\Core\Path\AliasStorage $alias_storage */
      $alias_storage = \Drupal::service('path.alias_storage');
      // Get enabled langcodes.
      $langcodes = array_keys(\Drupal::languageManager()->getLanguages());
      foreach ($langcodes as $langcode) {
        $condition = [
          'source' => '/taxonomy/term/' . $tid,
          'langcode' => $langcode,
        ];

        // If alias not exists for the given term, means we need to check and
        // fetch the alias from the node. If alias already exists on term, we
        // don't need to do anything.
        if (!$alias_storage->load($condition)) {
          $condition['source'] = '/node/' . $nid;
          // Get department page node alias.
          $node_alias = $alias_storage->load($condition);
          // If department node alias exists, only then we need to process.
          if ($node_alias) {
            try {
              // Delete the alias from the department node page.
              $alias_storage->delete(['pid' => $node_alias['pid']]);
              // Create alias for the term page from the department node page.
              $alias_storage->save('/taxonomy/term/' . $tid, $node_alias['alias'], $langcode);

              // We need to delete the alias as well as causing redirect loop
              // when we switch from english to arabic.
              if ($langcode == 'en') {
                _alshaya_department_page_delete_alias(substr($node_alias['alias'], 1));
              }
            }
            catch (\Exception) {
              // If something goes wrong.
              \Drupal::logger('alshaya_department_page')->error('Unable to process the alias @alias', ['@alias' => $node_alias['alias']]);
            }
          }
        }
      }
    }
  }
}

/**
 * Delete the redirects from the 'redirect' table.
 *
 * @param string $source_path
 *   Source path.
 */
function _alshaya_department_page_delete_alias($source_path) {
  /** @var \Drupal\redirect\RedirectRepository $redirect_repository */
  $redirect_repository = \Drupal::service('redirect.repository');
  $redirects = $redirect_repository->findBySourcePath($source_path);
  if ($redirects) {
    foreach ($redirects as $redirect) {
      $redirect->delete();
    }
  }
}
