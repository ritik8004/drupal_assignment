<?php

/**
 * @file
 * Constains hooks and alters for Alshaya Department page.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_department_page_form_node_department_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // We will show only those categories who don't have a department page yet.
  $tids = array_keys($form['field_product_category']['widget']['#options']);

  foreach ($tids as $tid) {
    if ($page_exists = alshaya_department_page_page_exists($tid)) {
      // Unset the value.
      unset($form['field_product_category']['widget']['#options'][$tid]);
    }
  }
}

/**
 * Helper function which checks for existance of a department page.
 *
 * @param int $tid
 *   tid of the Category.
 *
 * @return bool
 *   Returns FALSE if page not found, else returns the $node_id of the page.
 */
function alshaya_department_page_page_exists($tid) {
  static $department_pages;

  // We cache the nid-tid relationship for a single page request.
  if (empty($department_pages)) {
    // Load all the department page - category relationships.
    $query = \Drupal::database()->select('node__field_product_category', 'nfpc');
    $query->addField('nfpc', 'field_product_category_target_id', 'tid');
    $query->addField('nfpc', 'entity_id', 'nid');
    $department_pages = $query->execute()->fetchAllKeyed();
  }

  // Check if we have department page available for tid passed in args.
  if (isset($department_pages[$tid])) {
    return $department_pages[$tid];
  }

  return FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_department_page_node_presave(EntityInterface $entity) {
  // Allows for clearing of blocks based on node type.
  // Used for mega menu block.
  $tags = ['node_type:' . $entity->getType()];
  Cache::invalidateTags($tags);
}

/**
 * Implements hook_preprocess_page_title().
 */
function alshaya_department_page_preprocess_page_title(&$variables) {
  if ($node = _alshaya_department_page_get_department_node()) {
    // Change the title of the department node.
    $variables['title'] = [
      '#markup' => _alshaya_department_page_get_node_title($node),
    ];
  }
}

/**
 * Implements hook_preprocess_html().
 */
function alshaya_department_page_preprocess_html(&$variables) {
  if ($node = _alshaya_department_page_get_department_node()) {
    $variables['head_title']['title'] = _alshaya_department_page_get_node_title($node);
  }
}

/**
 * Get the department node object based on current root.
 *
 * @return mixed|null
 *   Return Node object if department page, else NULL.
 */
function _alshaya_department_page_get_department_node() {
  $node = &drupal_static(__FUNCTION__, []);
  // Route match.
  $route_match = \Drupal::routeMatch();
  // Return if the static cache is set and it is the node object.
  if (isset($node) && $node instanceof Node) {
    return $node;
  }

  // Load the processed parameter.
  if ($tempNode = $route_match->getParameter('node')) {
    // Check if the current node type is department_page.
    if ($tempNode->bundle() == 'department_page') {
      $node = $tempNode;
      return $node;
    }
  }
  return NULL;
}

/**
 * Return the taxonomy term title based on given node object.
 *
 * @param object $node
 *   The Node object.
 *
 * @return string
 *   Return the term label.
 */
function _alshaya_department_page_get_node_title($node) {
  $department_term = &drupal_static(__FUNCTION__, []);

  if (isset($department_term[$node->id()])) {
    return $department_term[$node->id()];
  }

  // Get the product category for current department page.
  $tid = $node->get('field_product_category')->first()->target_id;
  // Load the term object.
  $term = Term::load($tid);
  // Get the current language code.
  $langcode = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
  // Get the translations of the term based on the current lang code.
  if ($term->hasTranslation($langcode)) {
    $term = $term->getTranslation($langcode);
  }
  // Set the label for drupal static.
  $department_term[$node->id()] = $term->label();

  return $department_term[$node->id()];
}
