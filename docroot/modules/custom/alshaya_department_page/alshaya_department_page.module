<?php

/**
 * @file
 * Constains hooks and alters for Alshaya Department page.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_department_page_form_node_department_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // We will show only those categories who don't have a department page yet.
  $tids = array_keys($form['field_product_category']['widget']['#options']);
  // Get the current node and category for current department page.
  $node = $form_state->getFormObject()->getEntity();
  $category = $node->get('field_product_category')->getValue();
  $alshaya_department_pages = alshaya_department_page_get_pages();
  foreach ($tids as $tid) {
    // Hide the term, if it's not the current node's category term.
    if (!empty($category[0]) && $tid != $category[0]['target_id']) {
      if (isset($alshaya_department_pages[$tid])) {
        // Unset the value.
        unset($form['field_product_category']['widget']['#options'][$tid]);
      }
    }
  }
}

/**
 * Helper function to fetch list of department pages.
 *
 * @return array
 *   Nids of department pages keyed by term ids.
 */
function alshaya_department_page_get_pages() {
  static $department_pages;

  // We cache the nid-tid relationship for a single page request.
  if (empty($department_pages)) {
    $query = \Drupal::database()->select('node__field_product_category', 'nfpc');
    $query->addField('nfpc', 'field_product_category_target_id', 'tid');
    $query->addField('nfpc', 'entity_id', 'nid');
    $department_pages = $query->execute()->fetchAllKeyed();
  }

  return $department_pages;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_department_page_node_presave(EntityInterface $entity) {
  // Allows for clearing of blocks based on node type.
  // Used for mega menu block.
  $tags = ['node_type:' . $entity->getType()];
  Cache::invalidateTags($tags);
}

/**
 * Implements hook_preprocess_page_title().
 */
function alshaya_department_page_preprocess_page_title(&$variables) {
  if ($node = _alshaya_department_page_get_department_node()) {
    // Change the title of the department node.
    $variables['title'] = [
      '#markup' => _alshaya_department_page_get_node_title($node),
    ];
  }
}

/**
 * Implements hook_preprocess_html().
 */
function alshaya_department_page_preprocess_html(&$variables) {
  if ($node = _alshaya_department_page_get_department_node()) {
    $variables['head_title']['title'] = _alshaya_department_page_get_node_title($node);
  }
}

/**
 * Get the department node object based on current root.
 *
 * @return mixed|null
 *   Return Node object if department page, else NULL.
 */
function _alshaya_department_page_get_department_node() {
  $result = &drupal_static(__FUNCTION__);
  // Return if the static cache is set.
  if (isset($result)) {
    return $result;
  }

  $result = FALSE;
  // Route match.
  $route_match = \Drupal::routeMatch();
  // Load the processed parameter.
  if ($node = $route_match->getParameter('node')) {
    // Check if the current node type is department_page. For revision related
    // pages $node will have nid.
    if ($node instanceof Node && $node->bundle() == 'department_page') {
      $result = $node;
    }
  }

  return $result;
}

/**
 * Return the taxonomy term title based on given node object.
 *
 * @param object $node
 *   The Node object.
 *
 * @return string
 *   Return the term label.
 */
function _alshaya_department_page_get_node_title($node) {
  $department_term = &drupal_static(__FUNCTION__, []);

  if (isset($department_term[$node->id()])) {
    return $department_term[$node->id()];
  }

  // Get the product category for current department page.
  $tid = $node->get('field_product_category')->first()->target_id;
  // Load the term object.
  $term = Term::load($tid);
  // Get the current language code.
  $langcode = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
  // Get the translations of the term based on the current lang code.
  if ($term->hasTranslation($langcode)) {
    $term = $term->getTranslation($langcode);
  }
  // Set the label for drupal static.
  $department_term[$node->id()] = $term->label();

  return $department_term[$node->id()];
}
