<?php

/**
 * @file
 * Hook Implementations needed for alshaya_color_split module.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\acq_sku\Plugin\AcquiaCommerce\SKUType\Configurable;
use Drupal\alshaya_acm_product\SkuManager;
use Drupal\alshaya_color_split\AlshayaColorSplitManager;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_acq_sku_configurable_product_configurations_alter().
 */
function alshaya_color_split_acq_sku_configurable_product_configurations_alter(array &$configurations, SKU $sku) {
  if (!SkuManager::$colorSplitMergeChildren) {
    return;
  }

  $color_split_settings = \Drupal::config('alshaya_color_split.settings');
  $attribute_code_color_id = $color_split_settings->get('attribute_code_color_id');
  $attribute_code_color_label = $color_split_settings->get('attribute_code_color_label');
  $color_label_cart_form = $color_split_settings->get('color_label_cart_form');

  // If we do not have any value for style code or we have
  // color already set, we do no further processing.
  if (isset($configurations[$attribute_code_color_id])) {
    return;
  }

  $langcode = $sku->language()->getId();
  $cid = implode(':', [
    $sku->id(),
    $langcode,
  ]);

  $cache = \Drupal::cache('alshaya_product_configurations')->get($cid);

  if (isset($cache, $cache->data)) {
    $configurations = $cache->data;
    return;
  }

  /** @var \Drupal\alshaya_color_split\AlshayaColorSplitManager $manager */
  $manager = \Drupal::service('alshaya_color_split.manager');
  $variants = $manager->getProductsInStyle($sku);

  if (empty($variants)) {
    return;
  }

  // Ensure configurable value id is used as key in values.
  foreach ($configurations as $code => $configuration) {
    if (empty($configuration['values'])) {
      continue;
    }
    $values = $configuration['values'];
    $configurations[$code]['values'] = [];
    foreach ($values as $value) {
      $configurations[$code]['values'][$value['value_id']] = $value;
    }
  }

  foreach ($variants as $variant) {
    $variant_configurations = unserialize($variant->get('field_configurable_attributes')->getString());

    foreach ($variant_configurations as $variant_configurable) {
      if (empty($configurations[$variant_configurable['code']])) {
        $configurations[$variant_configurable['code']] = $variant_configurable;
        $configurations[$variant_configurable['code']]['values'] = [];
      }

      foreach ($variant_configurable['values'] as $value) {
        $configurations[$variant_configurable['code']]['values'][$value['value_id']] = $value;
      }
    }
  }

  $colors = [];
  $children = Configurable::getChildren($sku);
  foreach ($children as $child) {
    $attributes = $child->get('attributes')->getValue();
    $attributes = array_column($attributes, 'value', 'key');
    $colors[$attributes[$attribute_code_color_id]] = [
      'label' => $child->get($attribute_code_color_label)->getString(),
      'value_id' => $attributes[$attribute_code_color_id],
    ];
  }

  if (empty($colors)) {
    return;
  }

  $configurations = [
    'color' => [
      'attribute_id' => AlshayaColorSplitManager::PSEUDO_COLOR_ATTRIBUTE_CODE,
      'code' => $attribute_code_color_id,
      'label' => (string) t('@color_attribute_form_label', ['@color_attribute_form_label' => $color_label_cart_form]),
      'position' => -1,
      'values' => $colors,
    ],
  ] + $configurations;

  \Drupal::cache('alshaya_product_configurations')->set($cid, $configurations, Cache::PERMANENT, $sku->getCacheTags());
}

/**
 * Implements hook_acq_sku_configurable_variants_alter().
 */
function alshaya_color_split_acq_sku_configurable_variants_alter(array &$children, SKU $sku) {
  if (!SkuManager::$colorSplitMergeChildren) {
    return;
  }

  $color_split_settings = \Drupal::config('alshaya_color_split.settings');
  $attribute_code_color_id = $color_split_settings->get('attribute_code_color_id');
  // If we do not have any value for style code we do no further processing.
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $style_code = $skuManager->fetchStyleCode($sku);
  if (empty($style_code)) {
    return;
  }

  // If we we have color already set, we do no further processing.
  $configurations = unserialize($sku->get('field_configurable_attributes')->getString());
  $configurable_attribute_codes = array_column($configurations, 'code', 'code');
  if (isset($configurable_attribute_codes[$attribute_code_color_id])) {
    return;
  }

  $variants = \Drupal::entityTypeManager()
    ->getStorage('acq_sku')
    ->loadByProperties([
      'attr_style_code' => $style_code,
      'type' => 'configurable',
    ]);

  if (empty($variants)) {
    return;
  }

  $children = [];

  /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
  $plugin = $sku->getPluginInstance();
  foreach ($variants as $variant) {
    if (!$plugin->isProductInStock($variant)) {
      continue;
    }

    $variant_children = Configurable::getChildSkus($variant);

    foreach ($variant_children as $child_sku_code) {
      $child = SKU::loadFromSku($child_sku_code);
      if (!($child instanceof SKU)) {
        continue;
      }

      $children[$child->getSku()] = $child;
    }
  }
}

/**
 * Implements hook_acq_sku_configurable_cart_options_alter().
 */
function alshaya_color_split_acq_sku_configurable_cart_options_alter(array &$options, SKU $sku) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  if ($skuManager->fetchStyleCode($sku)) {
    foreach ($options as $index => $option) {
      if ($option['option_id'] == AlshayaColorSplitManager::PSEUDO_COLOR_ATTRIBUTE_CODE) {
        unset($options[$index]);
        break;
      }
    }
  }
}

/**
 * Implements hook_acq_sku_indexes_alter().
 */
function alshaya_color_split_acq_sku_indexes_alter(array &$indexes) {
  $indexes['acq_sku__attr_style_code'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['attr_style_code', 10],
    ],
    'spec' => [
      'fields' => [
        'attr_style_code' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_color_split_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  // Load SKU entity.
  $sku = $skuManager->loadSkuById((int) $form['sku_id']['#value']);

  // Grouping here is done only for simple products.
  if ($sku->bundle() !== 'simple') {
    return;
  }

  /** @var \Drupal\alshaya_color_split\AlshayaColorSplitManager $manager */
  $manager = \Drupal::service('alshaya_color_split.manager');
  $grouping_attribute = $manager->getGroupingAttribute($sku);

  if (empty($grouping_attribute) || empty($manager->getProductsInStyle($sku))) {
    return;
  }

  foreach ($manager->getProductsInStyle($sku) as $variant) {
    $options[$variant->getSku()] = $variant->get('attr_' . $grouping_attribute)->getString();
  }

  // Allow providing translations for custom configurable field label.
  // @codingStandardsIgnoreLine
  $label = t($grouping_attribute, ['context' => 'configurable_attribute']);

  $form['variants_in_group'] = [
    '#title' => $label,
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $sku->getSku(),
    '#empty_value' => '',
    '#empty_option' => t('Select @title', ['@title' => $label]),
    '#attributes' => [
      'class' => ['form-item-configurable-swatch'],
      'data-default-title' => $label,
    ],
    '#weight' => -1,
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_color_split_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (($entity->bundle() !== 'acq_product')) {
    return;
  }

  if (in_array($view_mode, ['modal', 'full'])) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku = $skuManager->getSkuForNode($entity);
    $sku = !empty($sku) ? SKU::loadFromSku($sku, $entity->language()->getId()) : NULL;

    // If not able to load SKU return.
    // If it isn't a simple product, return. We want to process
    // here only for simple products grouping.
    if (!($sku instanceof SKU) || $sku->bundle() !== 'simple') {
      return;
    }

    /** @var \Drupal\alshaya_color_split\AlshayaColorSplitManager $manager */
    $manager = \Drupal::service('alshaya_color_split.manager');
    $grouping_attribute = $manager->getGroupingAttribute($sku);

    if (empty($grouping_attribute) || empty($manager->getProductsInStyle($sku))) {
      return;
    }

    /** @var \Drupal\alshaya_acm_product\Service\SkuInfoHelper $skuInfo */
    $skuInfo = \Drupal::service('alshaya_acm_product.sku_info');

    $context = ($view_mode === 'full') ? 'pdp' : 'modal';
    $pdp_layout = $skuManager->getPdpLayout($entity, $context ?? 'pdp');
    foreach ($manager->getProductsInStyle($sku) as $variant) {
      $group[$variant->getSku()] = $skuInfo->getVariantInfo($variant, $pdp_layout);
    }

    $build['#attached']['drupalSettings']['productInfo'][$sku->getSku()]['group'] = $group ?? [];
  }
}

/**
 * Implements hook_sku_variant_info_alter().
 */
function alshaya_color_split_sku_variant_info_alter(array &$variant, SKUInterface $child, ?SKUInterface $parent) {
  /** @var \Drupal\alshaya_color_split\AlshayaColorSplitManager $manager */
  $manager = \Drupal::service('alshaya_color_split.manager');

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  /** @var \Drupal\acq_sku\ProductInfoHelper $productInfoHelper */
  $productInfoHelper = \Drupal::service('acq_sku.product_info_helper');

  if (($parent instanceof SKUInterface) && $manager->fetchStyleCode($parent)) {
    $parent_sku = $skuManager->getParentSkuBySku($child);
    $variant['parent_sku'] = $parent_sku->getSku();
    $variant['color_attribute'] = \Drupal::config('alshaya_color_split.settings')->get('attribute_code_color_id');
  }
  elseif ($manager->fetchStyleCode($child) && ($grouping_attribute = $manager->getGroupingAttribute($child))) {
    $variant['color_attribute'] = $grouping_attribute;
    $parent_sku = $child;
  }
  else {
    return;
  }

  $variant['title'] = $productInfoHelper->getTitle($parent_sku, 'pdp');

  // Add language for all urls for language switcher block.
  $node = $skuManager->getDisplayNode($parent_sku, FALSE);
  foreach (\Drupal::languageManager()->getLanguages() as $language) {
    $variant['url'][$language->getId()] = $node->toUrl('canonical', [
      'absolute' => FALSE,
      'language' => $language,
    ])->toString();
  }

  /** @var \Drupal\alshaya_acm_promotion\AlshayaPromoLabelManager $promoLabelManager */
  $promoLabelManager = \Drupal::service('alshaya_acm_promotion.label_manager');

  $promotion_label = $promoLabelManager->getPromotionLabelForProductDetail($parent_sku, 'full');

  $variant['promotions'] = !empty($promotion_label['promotions'])
    ? render($promotion_label['promotions'])
    : '';

  $variant['free_gift_promotions'] = !empty($promotion_label['free_gift_promotions'])
    ? render($promotion_label['free_gift_promotions'])
    : '';

  $variant['color_value'] = $node->get('field_product_color')->getString();
}

/**
 * Implements hook_library_info_alter().
 */
function alshaya_color_split_library_info_alter(&$libraries, $extension) {
  if ($extension == 'alshaya_acm_product' && isset($libraries['product_detail'])) {
    $libraries['product_detail']['dependencies'][] = 'alshaya_color_split/product_detail';
  }
}
