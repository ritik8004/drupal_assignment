<?php

/**
 * @file
 * Hook Implementations needed for alshaya_color_split module.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\acq_sku\Plugin\AcquiaCommerce\SKUType\Configurable;
use Drupal\alshaya_color_split\AlshayaColorSplitManager;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;

// Set FALSE to avoid execution of hooks.
$GLOBALS['execute_alshaya_color_split_hooks'] = TRUE;

/**
 * Implements hook_alshaya_acm_product_add_to_cart_ajax_response_alter().
 */
function alshaya_color_split_alshaya_acm_product_add_to_cart_ajax_response_alter(FormStateInterface $form_state, AjaxResponse $response, SKUInterface $sku, SKUInterface $selected_sku = NULL) {
  $color_split_settings = \Drupal::config('alshaya_color_split.settings');
  $attribute_code_color_id = $color_split_settings->get('attribute_code_color_id');

  // List of attributes selected by end-users on the form.
  $selected = $form_state->getValue('configurables');

  /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
  $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

  // Update PDP Url when switching color if the SKU has style code attribute.
  if (($sku_manager->fetchStyleCode($sku)) &&
    !empty($selected[$attribute_code_color_id])) {
    $product_tree = Configurable::deriveProductTree($sku);

    // If we have options for article castor id, compare it with the one
    // selected, load the right child SKU, fetch the color node & update url in
    // AJAX response.
    if (!empty($product_tree['combinations']['attribute_sku'][$attribute_code_color_id][$selected[$attribute_code_color_id]])) {
      $color_child_sku_code = $product_tree['combinations']['attribute_sku'][$attribute_code_color_id][$selected[$attribute_code_color_id]][0];

      if (($color_child_sku = SKU::loadFromSku($color_child_sku_code)) &&
        ($color_child_sku instanceof SKU)) {
        $parent_sku = $sku_manager->getParentSkuBySku($color_child_sku);

        // Update Item code when switching the color.
        $item_code['#markup'] = $parent_sku instanceof SKU ? $parent_sku->getSku() : '';
        $item_code['#prefix'] = '<span class="field__value">';
        $item_code['#suffix'] = '</span>';

        $response->addCommand(new ReplaceCommand('article[data-sku="' . $sku->getSku() . '"] .content--item-code .field__value', $item_code));

        // Fetch display node based on the castor Id selected.
        $display_node = $sku_manager->getDisplayNode($color_child_sku);
        $data['display_node_url'] = $display_node->toUrl()->toString();
        $data['display_node_title'] = $display_node->getTitle();
        $data['parent_sku_id'] = $sku->id();

        $response->addCommand(new InvokeCommand('', 'updatePdpUrl', [$data]));
      }
    }
  }
}

/**
 * Implements hook_acq_sku_configurable_product_configurations_alter().
 */
function alshaya_color_split_acq_sku_configurable_product_configurations_alter(array &$configurations, SKU $sku) {
  if (!$GLOBALS['execute_alshaya_color_split_hooks']) {
    return;
  }
  $color_split_settings = \Drupal::config('alshaya_color_split.settings');
  $attribute_code_color_id = $color_split_settings->get('attribute_code_color_id');
  $attribute_code_color_label = $color_split_settings->get('attribute_code_color_label');
  $color_label_cart_form = $color_split_settings->get('color_label_cart_form');

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $style_code = $skuManager->fetchStyleCode($sku);

  // If we do not have any value for style code or we have
  // color already set, we do no further processing.
  if (empty($style_code) || isset($configurations[$attribute_code_color_id])) {
    return;
  }

  $variants = \Drupal::entityTypeManager()
    ->getStorage('acq_sku')
    ->loadByProperties([
      'attr_style_code' => $style_code,
      'type' => 'configurable',
    ]);

  if (empty($variants)) {
    return;
  }

  $langcode = $sku->language()->getId();
  $cid = implode(':', [
    $sku->id(),
    $langcode,
  ]);

  $cache = \Drupal::cache('alshaya_product_configurations')->get($cid);

  if (isset($cache, $cache->data)) {
    $configurations = $cache->data;
    return;
  }

  // Ensure configurable value id is used as key in values.
  foreach ($configurations as $code => $configuration) {
    if (empty($configuration['values'])) {
      continue;
    }
    $values = $configuration['values'];
    $configurations[$code]['values'] = [];
    foreach ($values as $value) {
      $configurations[$code]['values'][$value['value_id']] = $value;
    }
  }

  /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
  $plugin = $sku->getPluginInstance();
  /** @var \Drupal\acq_sku\Entity\SKU $variant */
  foreach ($variants as $variant) {
    if (!$plugin->isProductInStock($variant)) {
      continue;
    }

    if ($langcode != $variant->language()->getId() && $variant->hasTranslation($langcode)) {
      $variant = $variant->getTranslation($langcode);
    }

    $variant_configurations = unserialize($variant->get('field_configurable_attributes')->getString());

    foreach ($variant_configurations as $variant_configurable) {
      if (empty($configurations[$variant_configurable['code']])) {
        $configurations[$variant_configurable['code']] = $variant_configurable;
        $configurations[$variant_configurable['code']]['values'] = [];
      }

      foreach ($variant_configurable['values'] as $value) {
        $configurations[$variant_configurable['code']]['values'][$value['value_id']] = $value;
      }
    }
  }

  $colors = [];
  $children = Configurable::getChildren($sku);
  foreach ($children as $child) {
    $attributes = $child->get('attributes')->getValue();
    $attributes = array_column($attributes, 'value', 'key');
    $colors[$attributes[$attribute_code_color_id]] = [
      'label' => $child->get($attribute_code_color_label)->getString(),
      'value_id' => $attributes[$attribute_code_color_id],
    ];
  }

  if (empty($colors)) {
    return;
  }

  $configurations = [
    'color' => [
      'attribute_id' => AlshayaColorSplitManager::PSEUDO_COLOR_ATTRIBUTE_CODE,
      'code' => $attribute_code_color_id,
      'label' => (string) t('@color_attribute_form_label', ['@color_attribute_form_label' => $color_label_cart_form]),
      'position' => -1,
      'values' => $colors,
    ],
  ] + $configurations;

  \Drupal::cache('alshaya_product_configurations')->set($cid, $configurations, Cache::PERMANENT, $sku->getCacheTags());
}

/**
 * Implements hook_acq_sku_configurable_variants_alter().
 */
function alshaya_color_split_acq_sku_configurable_variants_alter(array &$children, SKU $sku) {
  if (!$GLOBALS['execute_alshaya_color_split_hooks']) {
    return;
  }
  $color_split_settings = \Drupal::config('alshaya_color_split.settings');
  $attribute_code_color_id = $color_split_settings->get('attribute_code_color_id');
  // If we do not have any value for style code we do no further processing.
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $style_code = $skuManager->fetchStyleCode($sku);
  if (empty($style_code)) {
    return;
  }

  // If we we have color already set, we do no further processing.
  $configurations = unserialize($sku->get('field_configurable_attributes')->getString());
  $configurable_attribute_codes = array_column($configurations, 'code', 'code');
  if (isset($configurable_attribute_codes[$attribute_code_color_id])) {
    return;
  }

  $variants = \Drupal::entityTypeManager()
    ->getStorage('acq_sku')
    ->loadByProperties([
      'attr_style_code' => $style_code,
      'type' => 'configurable',
    ]);

  if (empty($variants)) {
    return;
  }

  $children = [];

  /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
  $plugin = $sku->getPluginInstance();
  foreach ($variants as $variant) {
    if (!$plugin->isProductInStock($variant)) {
      continue;
    }

    $variant_children = Configurable::getChildSkus($variant);

    foreach ($variant_children as $child_sku_code) {
      $child = SKU::loadFromSku($child_sku_code);
      if (!($child instanceof SKU)) {
        continue;
      }

      $children[$child->getSku()] = $child;
    }
  }
}

/**
 * Implements hook_acq_sku_configurable_cart_options_alter().
 */
function alshaya_color_split_acq_sku_configurable_cart_options_alter(array &$options, SKU $sku) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  if ($skuManager->fetchStyleCode($sku)) {
    foreach ($options as $index => $option) {
      if ($option['option_id'] == AlshayaColorSplitManager::PSEUDO_COLOR_ATTRIBUTE_CODE) {
        unset($options[$index]);
        break;
      }
    }
  }
}

/**
 * Implements hook_acq_sku_indexes_alter().
 */
function alshaya_color_split_acq_sku_indexes_alter(array &$indexes) {
  $indexes['acq_sku__attr_style_code'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['attr_style_code', 10],
    ],
    'spec' => [
      'fields' => [
        'attr_style_code' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_color_split_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  $selected = $form_state->getValue('configurables');
  $color_split_settings = \Drupal::config('alshaya_color_split.settings');
  $attribute_code_color_id = $color_split_settings->get('attribute_code_color_id');

  if (!empty($selected[$attribute_code_color_id])) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
    $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

    // Load SKU entity.
    $sku_entity = $sku_manager->loadSkuById((int) $form['sku_id']['#value']);

    $product_tree = Configurable::deriveProductTree($sku_entity);
    if (!empty($product_tree['combinations']['attribute_sku'][$attribute_code_color_id][$selected[$attribute_code_color_id]])) {
      $article_castor_id_child_sku_code = $product_tree['combinations']['attribute_sku'][$attribute_code_color_id][$selected[$attribute_code_color_id]][0];

      if (($article_castor_id_child_sku = SKU::loadFromSku($article_castor_id_child_sku_code)) &&
        ($article_castor_id_child_sku instanceof SKU)) {
        $parent_sku = $sku_manager->getParentSkuBySku($article_castor_id_child_sku);
        // Set SKU tree to the parent based on color chosen. This is used while
        // submitting the data back to MDC.
        if ($parent_sku instanceof SKU) {
          $form_state->set('tree_sku', $parent_sku->getSku());
        }
      }
    }
  }
}
