<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function alshaya_acm_product_category_theme($existing, $type, $theme, $path) {
  return [
    'alshaya_shop_by' => [
      'template' => 'alshaya-shop-by',
      'variables' => [
        'term_tree' => NULL,
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_alshaya_shop_by(&$variables) {
  // Split/Chunk the array into two parts.
  $variables['term_tree'] = array_chunk($variables['term_tree'], ceil(count($variables['term_tree']) / 2));
}

/**
 * Implements hook_preprocess_block().
 */
function alshaya_acm_product_category_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'views_block:plp_promotional_banner-block_1') {
    // If plp promotional banner block.
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    $hide_for_mobile = $term ? _alshaya_acm_product_category_hide_plp_banner_for_mobile($term) : FALSE;
    if ($hide_for_mobile) {
      $variables['content']['#attributes']['class'][] = 'hide-on-mobile';
    }
  }
}

/**
 * Hide or not PLP banner for mobile.
 *
 * @param \Drupal\taxonomy\Entity\Term $term
 *   Term object.
 *
 * @return bool
 *   PLP banner for mobile hide or not.
 */
function _alshaya_acm_product_category_hide_plp_banner_for_mobile(Term $term) {
  if ($mobile_banner = $term->get('field_promo_banner_for_mobile')) {
    return $mobile_banner->getValue() ? (bool) $mobile_banner->getValue()[0]['value'] : FALSE;
  }

  return FALSE;
}

/**
 * Implements hook_acq_sku_commerce_category_alter().
 */
function alshaya_acm_product_category_acq_sku_commerce_category_alter(TermInterface $term, array $category, $parent) {
  // We consider status of parent category too for a particular category.
  // If parent term not available, no additional condition required.
  if ($parent instanceof TermInterface) {
    /** @var \Drupal\acq_commerce\I18nHelper $i18nHelper */
    $i18nHelper = \Drupal::service('acq_commerce.i18n_helper');

    $langcode = $i18nHelper->getLangcodeFromStoreId($category['store_id']);

    // Get current language translation if available.
    if ($parent->hasTranslation($langcode)) {
      $parent = $parent->getTranslation($langcode);
    }

    // We set status to enabled only if both parent and child are enabled.
    $status = $parent->get('field_commerce_status')->getstring() && (int) $category['is_active'];
    $term->get('field_commerce_status')->setValue((int) $status);

    // Set children as not included in menu if the parent is being set to be
    // excluded from menu.
    if ($parent->get('field_category_include_menu')->getString() == 0 && $category['in_menu'] == 1) {
      $term->get('field_category_include_menu')->setValue(0);
    }
  }
}

/**
 * Get all the children of given terms.
 *
 * @param int $tid
 *   The term id.
 */
function alshaya_acm_product_category_child_terms($tid) {
  $langcode = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
  $terms = \Drupal::service('alshaya_acm_product_category.product_category_tree')->allChildTerms($langcode, $tid, FALSE, TRUE);

  $data = [];
  foreach ($terms as $term) {
    $data[$term->tid] = [
      'label' => $term->name,
      'description'  => [
        '#markup' => $term->description__value,
      ],
      'id' => $term->tid,
      'path' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->tid])->toString(),
      'active_class' => '',
    ];
  }
  return $data;
}

/**
 * Implements hook_entity_presave().
 */
function alshaya_acm_product_taxonomy_term_presave(EntityInterface $entity) {
  /** @var \Drupal\taxonomy\Entity\Term $entity */
  if ($entity->getVocabularyId() == 'acq_product_category') {
    $pdp_layout = $entity->get('field_pdp_layout')->getString();
    $original_entity = $entity->original;

    // Check if the pdp layout has been changed,
    // if it has, update all children to have same pdp layout.
    if (($original_entity) && $original_entity->get('field_pdp_layout')->getString() != $pdp_layout) {
      $child_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($entity->get('tid')->getString());
      foreach ($child_terms as $child_term) {
        $child_term->get('field_pdp_layout')->setValue($pdp_layout);
        $child_term->save();
      }
    }
  }
}
