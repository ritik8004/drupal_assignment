<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\Conductor\APIWrapper;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountProxy;
use Drupal\Core\Site\Settings;
use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_acm_customer_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['alshaya_acm_customer'];
    unset($implementations['alshaya_acm_customer']);
    $implementations['alshaya_acm_customer'] = $group;
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_customer_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['user_order_list'] = [
    'render element' => 'elements',
    'variables' => [
      'order_details' => NULL,
      'order_not_found' => NULL,
      'account' => NULL,
      'search_form' => NULL,
      'next_page_button' => NULL,
      'help_block' => NULL,
    ],
  ];

  $items['user_order_list_item'] = [
    'render element' => 'elements',
    'variables' => [
      'order' => NULL,
      'order_detail_link' => NULL,
    ],
  ];

  $items['user_order_detail'] = [
    'render element' => 'elements',
    'variables' => [
      'order_error' => NULL,
      'order' => NULL,
      'barcode' => NULL,
      'order_details' => NULL,
      'products' => NULL,
      'delivery_detail_notice' => NULL,
      'online_booking_notice' => NULL,
      'account' => NULL,
      'print_link' => NULL,
      'download_link' => NULL,
      'vat_text' => NULL,
      'cancelled_products' => NULL,
      'bazaarvoice_strings' => NULL,
    ],
  ];

  $items['checkout_order_detail'] = [
    'render element' => 'elements',
    'variables' => [
      'order_error' => NULL,
      'order' => NULL,
      'barcode' => NULL,
      'order_details' => NULL,
      'products' => NULL,
      'products_count' => NULL,
      'delivery_detail_notice' => NULL,
      'account' => NULL,
      'print_link' => NULL,
      'vat_text' => NULL,
    ],
  ];

  $items['user_order_print'] = [
    'render element' => 'elements',
    'variables' => [
      'site_logo' => NULL,
      'barcode' => NULL,
      'order' => NULL,
      'order_details' => NULL,
      'products' => NULL,
      'products_count' => NULL,
      'delivery_detail_notice' => NULL,
      'online_booking_notice' => NULL,
      'account' => NULL,
      'vat_text' => NULL,
      'cancelled_products' => NULL,
    ],
  ];

  $items['user_recent_order'] = [
    'render element' => 'elements',
    'variables' => ['order' => NULL],
  ];

  $items['banktransfer_payment_details'] = [
    'variables' => [
      'account_number' => NULL,
      'address' => NULL,
      'bank_name' => NULL,
      'beneficiary_name' => NULL,
      'branch' => NULL,
      'iban' => NULL,
      'swift_code' => NULL,
      'purpose' => NULL,
    ],
    'template' => 'bank-transfer-payment-details',
  ];

  return $items;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_customer_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'recent orders' block other than user/{uid} page.
  $blocks_to_check = ['userrecentorders', 'myaccountneedhelp'];
  if ($operation == 'view' && in_array($block->id(), $blocks_to_check)) {
    $current_route = \Drupal::routeMatch()->getRouteName();
    return AccessResult::forbiddenIf($current_route != 'entity.user.canonical');
  }
}

/**
 * Implements hook_alshaya_api_update_customer_api_request_alter().
 */
function alshaya_api_alshaya_api_update_customer_api_request_alter(array &$request_options) {
  if (isset($request_options['json'], $request_options['json']['customer']['email'])) {
    $request_options['json']['customer']['extension']['communication_preference'] = [];

    /** @var \Drupal\user\Entity\User $user */
    $user = user_load_by_mail($request_options['json']['customer']['email']);

    if (!empty($user)) {
      $user_data = \Drupal::service('user.data');
      $preference = $user_data->get('user', $user->id(), 'communication_preference');

      if (empty($preference)) {
        $preference = [];
      }

      \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');
      $request_options['json']['customer']['extension']['communication_preference'] = alshaya_acm_customer_get_communication_preference_api_value($preference);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function alshaya_acm_customer_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    if (isset($form['name'], $form['name']['#element_validate'])) {
      // Disable element validate for email, we will call later if required.
      $key = array_search('email_registration_user_login_validate', $form['name']['#element_validate']);
      if ($key !== FALSE) {
        unset($form['name']['#element_validate'][$key]);
      }
    }

    // Modify the inline email validation pattern.
    $form['name']['#element_validate'] = [
      'alshaya_valid_email_address',
    ];

    // Disable validateAuthentication here, we will call later if required.
    $key = array_search('::validateAuthentication', $form['#validate']);
    if ($key !== FALSE) {
      unset($form['#validate'][$key]);
    }

    array_unshift($form['#validate'], 'alshaya_acm_customer_login_validate');
    $form['#validate'][] = 'alshaya_acm_customer_login_post_validate';
    $form['#attached']['library'][] = 'alshaya_user/email_validator_override';
  }

  if ($form_id == 'user_register_form') {
    array_unshift($form['#validate'], 'alshaya_acm_customer_first_last_name');

    // We allow Drupal admins to create only admin users and customers can be
    // created in Magento directly.
    if (\Drupal::currentUser()->isAnonymous()) {
      // Always hide customer_id field for anonymous users.
      $form['acq_customer_id']['#access'] = FALSE;

      // Disable default validateForm here, we will call later if required.
      $key = array_search('::validateForm', $form['#validate']);
      if ($key !== FALSE) {
        unset($form['#validate'][$key]);
      }

      array_unshift($form['#validate'], 'alshaya_acm_customer_register_validate');

      // Final step in validate itself, register the user.
      $form['#validate'][] = 'alshaya_acm_customer_register_validate_final';

      $key = array_search('::save', $form['actions']['submit']['#submit']);
      if ($key !== FALSE) {
        $form['actions']['submit']['#submit'][$key] = 'alshaya_acm_customer_register_submit_save';
      }
    }
  }

  if ($form_id == 'user_communication_preference') {
    $form['#submit'][] = 'alshaya_acm_customer_update_customer_after_submit';
  }

  if ($form_id == 'user_form') {
    if (\Drupal::currentUser()->isAuthenticated()) {
      // We don't want to show subscribe to newsletter field to logged in users.
      if (!empty($form['field_subscribe_newsletter'])) {
        $form['field_subscribe_newsletter']['#access'] = FALSE;
      }

      // We don't allow changing email address for customer.
      if (alshaya_acm_customer_is_customer(\Drupal::currentUser())) {
        $form['account']['mail']['#disabled'] = TRUE;
        // Access false, if only authenticated.
        $form['account']['current_pass']['#access'] = FALSE;
      }

      array_unshift($form['#validate'], 'alshaya_acm_customer_first_last_name');
      // Always hide customer_id field for none-admin users.
      $has_administer_user_permissions = \Drupal::currentUser()->hasPermission('administer users');
      $form['acq_customer_id']['#access'] = $has_administer_user_permissions;
      $form['actions']['submit']['#submit'][] = 'alshaya_acm_customer_update_customer_after_submit';

      // Hide store field for non-admin users.
      $form['field_agent_store']['#access'] = $has_administer_user_permissions;
    }
    else {
      // Add markup for terms and conditions.
      if (!empty($form['field_subscribe_newsletter'])) {
        $form['field_subscribe_newsletter']['widget']['#suffix'] = \Drupal::config('alshaya_user.settings')->get('terms_conditions.value');
      }
      // Change submit button text.
      $form['actions']['submit']['#value'] = t('Create');
    }
  }

  if ($form_id == 'change_pwd_form') {
    $form['#validate'][] = 'alshaya_acm_customer_change_pwd_form_validate_password';
    $form['#submit'][] = 'alshaya_acm_customer_change_pwd_form_update_password';

    $key = array_search('::validateForm', $form['#validate']);
    if ($key !== FALSE) {
      unset($form['#validate'][$key]);
    }

    $key = array_search('::submitForm', $form['#submit']);
    if ($key !== FALSE) {
      unset($form['#submit'][$key]);
    }
  }

  if ($form_id == 'user_pass') {
    array_unshift($form['#validate'], 'alshaya_acm_customer_user_pass_validate');
  }

  // If 'reset password' screen from 'forget password'.
  if ($form_id == 'user_pass_reset') {
    $form['#validate'][] = 'alshaya_acm_customer_user_pass_reset_validate';
  }
}

/**
 * Custom validation handler for the 'user_pass_reset' form.
 */
function alshaya_acm_customer_user_pass_reset_validate(array &$form, FormStateInterface &$form_state) {
  $email = $form['user']['#value']->getEmail();
  if (!empty($email)) {
    try {
      /** @var \Drupal\alshaya_api\AlshayaApiWrapper $api_wrapper */
      $api_wrapper = \Drupal::service('alshaya_api.api');
      // Get customer from MDC.
      $customer = $api_wrapper->getCustomer($email);
      $user = user_load_by_mail($email);

      if ($user && alshaya_acm_customer_is_customer($user)) {
        // In the next page the user session will have started. So we set
        // the customer token in the session here.
        // And since the user password is not available yet, we call
        // loadCustomerTokenForSocialAccount() to fetch the token.
        /** @var \Drupal\alshaya_spc\Helper\AlshayaSpcCustomerHelper $customer_helper */
        $customer_helper = \Drupal::service('alshaya_spc.customer_helper');
        $customer_helper->loadCustomerTokenForSocialAccount($email);

        if (isset($customer['addresses'])) {
          foreach ($customer['addresses'] as $key => $address) {
            // @todo ApiWrapper::authenticateCustomer() returns the 'extension'
            // @todo as array while ApiWrapper::getCustomer() returns 'extension'
            // @todo as object and thus we need to typecaste here.
            if (!empty($address['extension']) && !is_array($address['extension'])) {
              $customer['addresses'][$key]['extension'] = (array) $address['extension'];
            }
          }

          \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');
          // Update the user info from MDC to Drupal.
          alshaya_acm_customer_update_user_data($user, $customer);
        }
      }
    }
    catch (\Exception) {
      \Drupal::logger('alshaya_acm_customer')->error('Error while resetting password for user:@email.', [
        '@email' => $email,
      ]);
    }
  }
}

/**
 * Common submit callback to update user data after changes.
 */
function alshaya_acm_customer_update_customer_after_submit($form, FormStateInterface $form_state) {
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');

  /** @var \Drupal\user\Entity\User $user */
  if ($user = $form_state->get('user')) {
    alshaya_acm_customer_update_customer_data($user->getEmail());
  }
}

/**
 * Element validate callback for user login name field.
 *
 * Update email address error msg.
 */
function alshaya_acm_customer_user_email_validate($form, FormStateInterface $form_state) {
  $mail = $form_state->getValue('name');
  if (!empty($mail)) {
    $config = \Drupal::config('email_registration.settings');

    if ($user = user_load_by_mail($mail)) {
      $form_state->setValue('name', $user->getAccountName());
    }
    elseif (!$config->get('login_with_username')) {
      // We will set this again in alshaya_acm_customer_login_post_validate().
      $form_state->setErrorByName('name', t('Unrecognized email address or password.'));
    }
  }
}

/**
 * Post validate callback to set proper messages.
 */
function alshaya_acm_customer_login_post_validate(array &$form, FormStateInterface &$form_state) {
  // Do something here only if we have errors.
  if ($all_errors = $form_state->getErrors()) {
    // Clear all errors before setting them as expected.
    $form_state->clearErrors();

    // Set error without name ref for name error.
    if (isset($all_errors['name'])) {

      \Drupal::messenger()->addMessage($all_errors['name'], 'error');
      $form_state->setErrorByName('custom', $all_errors['name']);
      unset($all_errors['name']);
    }

    // Set all other errors.
    foreach ($all_errors as $field_name => $error) {
      $form_state->setErrorByName($field_name, $error);
    }
  }
}

/**
 * Validate callback to authenticate user against Magento.
 */
function alshaya_acm_customer_login_validate(array &$form, FormStateInterface &$form_state) {
  $mail = $form_state->getValue('name');
  $pass = $form_state->getValue('pass');

  $do_api_check = TRUE;

  /** @var \Drupal\user\Entity\User $user */
  if ($user = user_load_by_mail($mail)) {
    // For all users except just authenticated, we can rely on Drupal auth.
    $do_api_check = alshaya_acm_customer_is_customer($user);

    if ($do_api_check && !$user->isActive()) {
      $form_state->setErrorByName('name', t('Your account has not been activated or is blocked.', [], ['context' => 'alshaya_static_text|account_already_exists']));
      $do_api_check = FALSE;
    }
  }
  elseif (Settings::get('auto_fix_module_implements_cache_data', 1)) {
    // Feature-toggle workaround to clear bootstrap cache and reload the page
    // when we detect cache corruption; when no data in module_implements_alter.
    $bootstrap = \Drupal::cache('bootstrap');
    $module_implements = $bootstrap->get('module_implements');
    $module_implements_cache = $module_implements->data ?? [];

    if (empty($module_implements_cache['module_implements_alter'])) {
      \Drupal::logger('alshaya_acm_customer')
        ->error('Auto-fixing bootstrap cache bin.');

      \Drupal::service('cache.bootstrap')->invalidateAll();

      // Essentially, refresh the page by redirect.
      $currentURL = Url::fromRoute('<current>');
      $response = new RedirectResponse($currentURL->toString());
      $request = \Drupal::request();

      // Save the session so things like messages get saved.
      $request->getSession()->save();
      $response->prepare($request);

      // Make sure to trigger kernel events.
      \Drupal::service('kernel')->terminate($request, $response);
      $response->send();
      return;
    }
  }

  // Do check against Magento only if user is unknown or just authenticated.
  if ($do_api_check) {
    try {
      if ($uid = _alshaya_acm_customer_authenticate_customer($mail, $pass)) {
        $form_state->set('uid', $uid);
        return;
      }
      else {
        $form_state->setErrorByName('name', t('Unrecognized email address or password.'));
        return;
      }
    }
    catch (\Exception $e) {
      $form_state->setErrorByName('name', $e->getMessage());
      return;
    }
  }

  // For admin users, we process the email validate to have name set.
  alshaya_acm_customer_user_email_validate($form, $form_state);

  // We also process default authentication code.
  call_user_func_array(
    $form_state->prepareCallback('::validateAuthentication'),
    [&$form, &$form_state]
  );
}

/**
 * Helper function to authenticate user from Magento.
 *
 * @param string $mail
 *   Mail.
 * @param string $pass
 *   Password.
 *
 * @return int|null
 *   User id of user if successful or null.
 *
 * @throws \Exception
 */
function _alshaya_acm_customer_authenticate_customer($mail, $pass) {
  try {
    /** @var \Drupal\alshaya_spc\Helper\AlshayaSpcCustomerHelper $api_wrapper */
    $api_wrapper = \Drupal::service('alshaya_spc.customer_helper');
    $customer = $api_wrapper->authenticateCustomer($mail, $pass);
    if (!empty($customer['user'])) {
      return $customer['user']->id();
    }
  }
  catch (\Exception $e) {
    throw $e;
  }

  return NULL;
}

/**
 * Implements hook_user_login().
 */
function alshaya_acm_customer_user_login(UserInterface $account) {
  global $_alshaya_acm_customer_addressbook_processed;

  if (isset($_alshaya_acm_customer_addressbook_processed) && $_alshaya_acm_customer_addressbook_processed) {
    return;
  }

  if (!alshaya_acm_customer_is_customer($account)) {
    return;
  }

  try {
    /** @var \Drupal\alshaya_api\AlshayaApiWrapper $api_wrapper */
    $api_wrapper = \Drupal::service('alshaya_api.api');
    $customer = $api_wrapper->getCustomer($account->getEmail());

    // Allow if returned customer array is empty or customer id is the same as
    // what is available in the form.
    if (!empty($customer) && !empty($customer['customer_id']) && $customer['customer_id'] != $account->get('acq_customer_id')->getString()) {
      return;
    }

    // Update the user info from MDC to Drupal.
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');
    alshaya_acm_customer_update_user_data($account, $customer);
  }
  catch (\Exception) {
    \Drupal::logger('alshaya_acm_customer')->error('Error while resetting information for user: @email.', [
      '@email' => $account->getEmail(),
    ]);
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name === 'user_registrationpassword.confirm') {
    // We set the customer token in the session as in the next page the user
    // will be landing on the My Account page.
    // And since the user password is not available yet, we call
    // loadCustomerTokenForSocialAccount() to fetch the token.
    /** @var \Drupal\alshaya_spc\Helper\AlshayaSpcCustomerHelper $customer_helper */
    $customer_helper = \Drupal::service('alshaya_spc.customer_helper');
    $customer_helper->loadCustomerTokenForSocialAccount($account->getEmail());
  }
}

/**
 * Set first name and last name field values from full name.
 */
function alshaya_acm_customer_first_last_name(array &$form, FormStateInterface &$form_state) {
  $form_state->setValue('field_first_name', [['value' => $form_state->getTemporaryValue('first_name')]]);
  $form_state->setValue('field_last_name', [['value' => $form_state->getTemporaryValue('last_name')]]);
}

/**
 * Validate callback for user registration form to validate against Magento.
 */
function alshaya_acm_customer_register_validate(array &$form, FormStateInterface &$form_state) {
  $mail = $form_state->getValue('mail');
  $customer_id = $form_state->getValue('acq_customer_id') ? $form_state->getValue('acq_customer_id')[0]['value'] : NULL;

  try {
    /** @var \Drupal\alshaya_api\AlshayaApiWrapper $api_wrapper */
    $api_wrapper = \Drupal::service('alshaya_api.api');
    $customer = $api_wrapper->getCustomer($mail);

    // Allow if returned customer array is empty or customer id is the same as
    // what is available in the form.
    if (!empty($customer) && !empty($customer['customer_id']) && $customer['customer_id'] != $customer_id) {
      $form_state->setErrorByName('mail', t('The email address @email is already taken.', ['@email' => $mail]));
    }
    else {
      $form_state->setTemporaryValue('acq_customer_id', $customer_id);
    }
  }
  catch (\Exception $e) {
    // Do nothing except for downtime exception, we will do other validations
    // after try/catch.
    if (acq_commerce_is_exception_api_down_exception($e)) {
      $form_state->setErrorByName('custom', $e->getMessage());
      \Drupal::messenger()->addMessage($e->getMessage(), 'error');
    }
  }

  // Process default validation if no errors found.
  if (!$form_state->getErrors()) {
    call_user_func_array(
      $form_state->prepareCallback('::validateForm'),
      [&$form, &$form_state]
    );
  }
}

/**
 * Validate callback for user registration form to save in Magento.
 */
function alshaya_acm_customer_register_validate_final(array &$form, FormStateInterface &$form_state) {
  if ($form_state->getErrors()) {
    return;
  }

  $customer_id = $form_state->getTemporaryValue('acq_customer_id');
  $customer_id = !empty($customer_id) ? $customer_id : NULL;
  $email = $form_state->getValue('mail');
  $first_name = $form_state->getValue('field_first_name')[0]['value'];
  $last_name = $form_state->getValue('field_last_name')[0]['value'];
  $pass = $form_state->getValue('pass');

  /** @var \Drupal\alshaya_api\AlshayaApiWrapper $api_wrapper */
  $api_wrapper = \Drupal::service('alshaya_api.api');

  try {
    $customer_array = [
      'customer_id' => $customer_id,
      'firstname' => $first_name,
      'lastname' => $last_name,
      'email' => $email,
    ];
    $customer = $api_wrapper->updateCustomer($customer_array, [
      'password' => $pass,
    ]);
    if (empty($customer)) {
      throw new \Exception(acq_commerce_api_down_global_error_message(), APIWrapper::API_DOWN_ERROR_CODE);
    }
  }
  catch (\Exception $e) {
    // Do nothing except for downtime exception, we will do other validations
    // after try/catch.
    if (acq_commerce_is_exception_api_down_exception($e)) {
      $form_state->setErrorByName('custom', $e->getMessage());
      \Drupal::messenger()->addMessage($e->getMessage(), 'error');
    }
    else {
      \Drupal::logger('alshaya_acm_customer')->error('Error occurred during customer registration @message', [
        '@message' => $e->getMessage(),
      ]);

      // Only email address is something where our validations dont match.
      $form_state->setErrorByName('mail', t('The email address %mail is not valid.', ['%mail' => $email]));
    }
    return;
  }

  $form_state->setTemporaryValue('customer_id', $customer['customer_id']);
}

/**
 * Submit callback for user registration form to create customer in Magento.
 *
 * Here we set password into separate value in form_state and set strong
 * password and we create customer in Magento. We also update acq_customer_id.
 */
function alshaya_acm_customer_register_submit_save(array &$form, FormStateInterface &$form_state) {
  $pass = $form_state->getValue('pass');
  $form_state->setValue('pass', user_password(25));
  $subscribe = $form_state->getValue('field_subscribe_newsletter');

  // Call the ::save method of Drupal first to get account created in Drupal.
  call_user_func_array(
    $form_state->prepareCallback('::save'),
    [&$form, &$form_state]
  );

  // Get form storage.
  $storage = $form_state->getStorage();

  // Get the new user account object from storage.
  /** @var \Drupal\user\Entity\User $user */
  $user = $storage['user'];

  // Save acq_customer_id in Drupal.
  $user->get('acq_customer_id')->setValue($form_state->getTemporaryValue('customer_id'));

  // Check if request is a behat request, we activate the customer without
  // waiting for the email verification.
  if (Settings::get('is_behat_request')) {
    $user->activate();
    // Log the details for the user thus we know that this is activated as
    // during the behat request.
    \Drupal::logger('alshaya_acm_customer')->notice('User: @email was activated programmatically as request is from behat.', [
      '@email' => $user->getEmail(),
    ]);
  }

  $user->save();

  \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');

  // Save customer again to ensure all other fields are pushed.
  // For instance privilege card number.
  alshaya_acm_customer_update_customer_data($user->getEmail());

  // Add entry into hash table during registration, this is not done by module
  // for us because it checks for confirm_password field and we need a single
  // password field.
  if (\Drupal::moduleHandler()->moduleExists('alshaya_user')) {
    _alshaya_user_password_policy_history_insert_password_hash($user, $pass);
  }

  // Subscribe user to newsletter.
  if (!empty($subscribe['value'])) {
    /** @var \Drupal\alshaya_api\AlshayaApiWrapper $apiWrapper */
    $apiWrapper = \Drupal::service('alshaya_api.api');

    try {
      $apiWrapper->subscribeNewsletter($user->getEmail());
    }
    catch (\Exception $e) {
      \Drupal::logger('alshaya_acm_customer')->error('Error occurred while subscribing @email during registration. Error message: @error', [
        '@email' => $user->getEmail(),
        '@error' => $e->getMessage(),
      ]);
    }
  }

}

/**
 * Validate callback for change password form to validate against Magento.
 *
 * If the user is non-commerce user, it fallbacks to default validation.
 */
function alshaya_acm_customer_change_pwd_form_validate_password(array &$form, FormStateInterface &$form_state) {
  $current_pass_input = trim($form_state->getValue('current_pass'));
  if (empty($current_pass_input)) {
    return;
  }

  // Use the current logged in user by default.
  $user = \Drupal::currentUser();

  // Try to get user from build info.
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['args'], $build_info['args'][0]) && $build_info['args'][0] instanceof UserInterface) {
    $user = $build_info['args'][0];
  }

  // For all users who don't have customer_id, we store password only in Drupal.
  if (!alshaya_acm_customer_is_customer($user)) {
    call_user_func_array(
      $form_state->prepareCallback('::validateForm'),
      [&$form, &$form_state]
    );
    return;
  }

  try {
    /** @var \Drupal\alshaya_spc\Helper\AlshayaSpcCustomerHelper $api_wrapper */
    $api_wrapper = \Drupal::service('alshaya_spc.customer_helper');
    $customer = $api_wrapper->authenticateCustomer($user->getEmail(), $current_pass_input);

    // If a valid customer array is returned, it means current pass is valid.
    if (!empty($customer) && !empty($customer['customer_id'])) {
      return;
    }
  }
  catch (\Exception $e) {
    // Do nothing except for downtime exception, we will set the error message
    // below.
    if (acq_commerce_is_exception_api_down_exception($e)) {
      $form_state->setErrorByName('current_pass', $e->getMessage());
    }
  }

  $form_state->setErrorByName('current_pass', t('The current password you provided is incorrect.'));
}

/**
 * Submit callback for change password form to update it on Magento.
 *
 * If the user is non-commerce user, it fallbacks to default submition.
 */
function alshaya_acm_customer_change_pwd_form_update_password(array &$form, FormStateInterface &$form_state) {
  // Use the current logged in user by default.
  $user = \Drupal::currentUser();

  // Try to get user from build info.
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['args'], $build_info['args'][0]) && $build_info['args'][0] instanceof UserInterface) {
    $user = $build_info['args'][0];
  }

  // For all users except just authenticated, we store password only in Drupal.
  if (!alshaya_acm_customer_is_customer($user)) {
    call_user_func_array(
      $form_state->prepareCallback('::submitForm'),
      [&$form, &$form_state]
    );
  }
  else {
    // Get password from user's input.
    $pass = trim($form_state->getValue('pass'));

    // Update password for existing customer.
    $is_customer = alshaya_acm_customer_is_customer($user);

    if ($is_customer && !empty($pass)) {
      /** @var \Drupal\alshaya_api\AlshayaApiWrapper $api_wrapper */
      $api_wrapper = \Drupal::service('alshaya_api.api');

      $customer = [
        'customer_id' => $user->get('acq_customer_id')->getString(),
      ];

      try {
        $api_wrapper->updateCustomerPass($customer, $pass);
      }
      catch (\Exception) {
        // IF API Down or some other issue, log message is already added
        // Clear all messages first as there is success message available.
        \Drupal::messenger()->deleteAll();
        \Drupal::messenger()->addError(acq_commerce_api_down_global_error_message());
      }
    }
  }

  // Sign out user, and redirect to login page.
  user_logout();

  $form_state->setRedirect('alshaya_user.password_changed_logout');
}

/**
 * Validate callback for user_pass form to check first against Magento.
 */
function alshaya_acm_customer_user_pass_validate(array &$form, FormStateInterface &$form_state) {
  $name = trim($form_state->getValue('name'));

  // Try to load by email.
  $user = user_load_by_mail($name);

  if (!empty($user)) {
    return;
  }

  // Try once by name for admins.
  $user = user_load_by_name($name);

  if (!empty($user)) {
    return;
  }

  // Try API now.
  try {
    /** @var \Drupal\alshaya_api\AlshayaApiWrapper $api_wrapper */
    $api_wrapper = \Drupal::service('alshaya_api.api');
    $customer = $api_wrapper->getCustomer($name);

    if (!empty($customer)) {
      \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');

      /** @var \Drupal\user\Entity\User $user */
      $user = alshaya_acm_customer_create_drupal_user($customer);
    }
  }
  catch (\Exception $e) {
    // Do nothing except for downtime exception, let default validation handle
    // the error messages.
    if (acq_commerce_is_exception_api_down_exception($e)) {
      $form_state->setErrorByName('name', $e->getMessage());
    }
  }
}

/**
 * Implements hook_alshaya_i18n_onetime_translation_add().
 */
function alshaya_acm_customer_alshaya_i18n_onetime_translation_add() {
  // Save some translations.
  $strings = [];

  $strings['Unrecognized username or password. <a href=":password">Forgot your password?</a>'] = [
    'en' => 'Unrecognized email address or password.',
  ];

  $strings['Collector contact no.'] = [
    'ar' => 'رقم اتصال المستلم',
  ];

  $strings['Delivery details'] = [
    'ar' => 'تفاصيل التوصيل',
  ];

  $strings['Billing details'] = [
    'ar' => 'معلومات تحرير الفاتورة',
  ];

  alshaya_i18n_save_translations($strings);
}

/**
 * Helper function to check if user is valid customer.
 *
 * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountProxy $user
 *   User to check if it is valid customer.
 * @param bool $return_id
 *   Flag to specify if we should return id or boolean.
 *
 * @return bool|int|string
 *   Boolean or id based on the flag status.
 */
function alshaya_acm_customer_is_customer($user, bool $return_id = FALSE) {
  if ($user instanceof UserInterface) {
    // Do nothing, we need this to have else condition.
  }
  elseif ($user instanceof AccountProxy) {
    $user = User::load($user->id());
  }
  else {
    return $return_id ? 0 : FALSE;
  }

  $user_id = $user->get('acq_customer_id')->getString();
  if (empty($user_id)) {
    return $return_id ? 0 : FALSE;
  }

  return $return_id ? $user_id : TRUE;
}
