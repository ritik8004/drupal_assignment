<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_acm_customer_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['alshaya_acm_customer'];
    unset($implementations['alshaya_acm_customer']);
    $implementations['alshaya_acm_customer'] = $group;
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_customer_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['user_order_list'] = [
    'render element' => 'elements',
    'variables' => [
      'order_details' => NULL,
      'order_not_found' => NULL,
      'account' => NULL,
      'search_form' => NULL,
      'next_page_button' => NULL,
      'help_block' => NULL,
    ],
  ];

  $items['user_order_list_item'] = [
    'render element' => 'elements',
    'variables' => [
      'order' => NULL,
      'order_detail_link' => NULL,
      'currency_code' => NULL,
      'currency_code_position' => NULL,
    ],
  ];

  $items['user_order_detail'] = [
    'render element' => 'elements',
    'variables' => [
      'order' => NULL,
      'barcode' => NULL,
      'order_details' => NULL,
      'products' => NULL,
      'delivery_detail_notice' => NULL,
      'account' => NULL,
      'currency_code' => NULL,
      'currency_code_position' => NULL,
      'print_link' => NULL,
    ],
  ];

  $items['checkout_order_detail'] = [
    'render element' => 'elements',
    'variables' => [
      'order' => NULL,
      'barcode' => NULL,
      'order_details' => NULL,
      'products' => NULL,
      'products_count' => NULL,
      'delivery_detail_notice' => NULL,
      'account' => NULL,
      'currency_code' => NULL,
      'currency_code_position' => NULL,
      'print_link' => NULL,
    ],
  ];

  $items['user_order_print'] = [
    'render element' => 'elements',
    'variables' => [
      'site_logo' => NULL,
      'barcode' => NULL,
      'order' => NULL,
      'order_details' => NULL,
      'products' => NULL,
      'products_count' => NULL,
      'delivery_detail_notice' => NULL,
      'account' => NULL,
      'currency_code' => NULL,
      'currency_code_position' => NULL,
    ],
  ];

  $items['user_recent_order'] = [
    'render element' => 'elements',
    'variables' => ['order' => NULL],
  ];

  return $items;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_customer_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'recent orders' block other than user/{uid} page.
  if ($operation == 'view' && $block->id() == 'userrecentorders') {
    $current_route = \Drupal::routeMatch()->getRouteName();
    return AccessResult::forbiddenIf($current_route != 'entity.user.canonical');
  }
}

/**
 * Implements hook_acq_commerce_update_customer_api_request_alter().
 */
function alshaya_acm_customer_acq_commerce_update_customer_api_request_alter(array &$request_options) {
  if (isset($request_options['form_params'], $request_options['form_params']['customer[email]'])) {
    /** @var \Drupal\user\Entity\User $user */
    $user = user_load_by_mail($request_options['form_params']['customer[email]']);

    if (!empty($user)) {
      $user_data = \Drupal::service('user.data');
      if ($preference = $user_data->get('user', $user->id(), 'communication_preference')) {
        \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');
        $request_options['form_params']['customer[extension][communication_preference]'] = alshaya_acm_customer_get_communication_preference_api_value($preference);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_customer_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $key = array_search('email_registration_user_login_validate', $form['name']['#element_validate']);
    unset($form['name']['#element_validate'][$key]);

    array_unshift($form['#validate'], 'alshaya_acm_customer_login_validate');

    // Disable validateAuthentication here, we will call later if required.
    if ($key = array_search('::validateAuthentication', $form['#validate'])) {
      unset($form['#validate'][$key]);
    }
  }

  if ($form_id == 'user_communication_preference') {
    $form['#submit'][] = 'alshaya_acm_customer_update_customer_after_submit';
  }

  if ($form_id == 'user_form' && \Drupal::currentUser()->isAuthenticated()) {
    $form['actions']['submit']['#submit'][] = 'alshaya_acm_customer_update_customer_after_submit';
  }
}

/**
 * Common submit callback to update user data after changes.
 */
function alshaya_acm_customer_update_customer_after_submit($form, FormStateInterface $form_state) {
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');

  /** @var \Drupal\user\Entity\User $user */
  if ($user = $form_state->get('user')) {
    alshaya_acm_customer_update_customer_data($user->getEmail());
  }
}

/**
 * Element validate callback for user login name field.
 *
 * Update email address error msg.
 */
function alshaya_acm_customer_user_email_validate($form, FormStateInterface $form_state) {
  $mail = $form_state->getValue('name');
  if (!empty($mail)) {
    $config = \Drupal::config('email_registration.settings');

    if ($user = user_load_by_mail($mail)) {
      $form_state->setValue('name', $user->getAccountName());
    }
    elseif (!$config->get('login_with_username')) {
      $form_state->setErrorByName('name', t('Invalid email address.'));
    }
  }
}

/**
 * Validate callback to authenticate user against Magento.
 */
function alshaya_acm_customer_login_validate(array &$form, FormStateInterface &$form_state) {
  $mail = $form_state->getValue('name');
  $pass = $form_state->getValue('pass');

  $do_api_check = TRUE;

  /** @var \Drupal\user\Entity\User $user */
  if ($user = user_load_by_mail($mail)) {
    $roles = $user->getRoles();

    // For all users except just authenticated, we can rely on Drupal auth.
    if (count($roles) > 1) {
      $do_api_check = FALSE;
    }
  }

  // Do check against Magento only if user is unknown or just authenticated.
  if ($do_api_check) {
    try {
      $api_wrapper = \Drupal::service('acq_commerce.api');

      $customer = $api_wrapper->authenticateCustomer($mail, $pass);

      if (!empty($customer) && !empty($customer['customer_id'])) {
        \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.utility');

        // Check if user exists in Drupal.
        if ($user = user_load_by_mail($mail)) {
          // Update the data in Drupal to match the values in Magento.
          alshaya_acm_customer_update_user_data($user, $customer);
        }
        // Create user.
        else {
          /** @var \Drupal\user\Entity\User $user */
          $user = \Drupal::entityTypeManager()->getStorage('user')->create([]);
          $user->enforceIsNew();

          // Activate the user by default.
          $user->activate();

          // Set the email.
          $user->setEmail($customer['email']);

          // For Alshaya we know we are using email_registration module.
          $user->setUsername('email_registration_' . user_password());

          // Set a password entered by user for login.
          $user->setPassword(user_password(25));

          // Update the data in Drupal to match the values in Magento.
          alshaya_acm_customer_update_user_data($user, $customer);
        }

        // Some how this is not working so we set temporary and set uid again in
        // final validate function.
        $form_state->set('uid', $user->id());
        return;
      }
    }
    catch (\Exception $e) {
      // Do nothing, could be admin user.
    }
  }

  // For admin users, we process the email validate to have name set.
  alshaya_acm_customer_user_email_validate($form, $form_state);

  // We also process default authentication code.
  call_user_func_array($form_state->prepareCallback('::validateAuthentication'), [&$form, &$form_state]);
}
