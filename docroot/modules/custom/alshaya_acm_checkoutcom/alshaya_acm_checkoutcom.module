<?php

/**
 * @file
 * Contains customisations for acq_checkoutcom module.
 */

use Drupal\acq_cart\CartInterface;
use Drupal\acq_checkoutcom\CheckoutComAPIWrapper;
use Drupal\alshaya_acm_checkout\Plugin\CheckoutPane\BillingAddress;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_alshaya_acm_checkout_pre_place_order().
 */
function alshaya_acm_checkoutcom_alshaya_acm_checkout_pre_place_order(CartInterface $cart) {
  $session = \Drupal::request()->getSession();
  $selected_payment = $session->get('selected_payment_method');

  // Redirect to 3d secure screen only for checkout.com payment method.
  if ($selected_payment != 'checkout_com') {
    return;
  }

  // Redirect only for 3ds, we don't want to proceed further for 2d payment.
  $card_info = $session->get('acq_checkout_com_card', NULL);
  if (empty($card_info)) {
    return;
  }

  /** @var \Drupal\acq_checkoutcom\CheckoutComAPIWrapper $knetHelper */
  $checkoutComApi = \Drupal::service('acq_checkoutcom.checkout_api');

  $totals = $cart->totals();
  // Remove data from session, as we no longer want to use the same data again.
  $session->remove('acq_checkout_com_card');
  try {
    // Prepare parameters to send for 3d secure payment.
    $params = [
      'value' => $checkoutComApi->getCheckoutAmount($totals['grand']),
      'email' => $cart->customerEmail(),
    ];

    if ($card_info['type'] == 'new') {
      $params += [
        'cardToken' => $card_info['card_token'],
        'udf3' => $card_info['card_save'] ? CheckoutComAPIWrapper::STORE_IN_VAULT_ON_SUCCESS : '',
        'udf1' => $card_info['mada'] ? 'MADA' : NULL,
      ];
    }
    elseif ($card_info['type'] == 'existing') {
      $params += [
        'cardId' => $card_info['card_id'],
        'cvv' => $card_info['card_cvv'],
      ];
    }
    $checkoutComApi->processCardPayment($cart, $params);
  }
  catch (\Exception $e) {
    \Drupal::logger('alshaya_acm_checkoutcom')->error($e->getMessage());

    // Show generic error message to user and redirect to payment page.
    $checkoutComApi->displayGenericMessage();
    $checkoutComApi->redirectToPayment();
    exit;
  }
}

/**
 * Implements hook_alshaya_my_account_links_alter().
 */
function alshaya_acm_checkoutcom_alshaya_my_account_links_alter(array &$links) {
  if ((alshaya_acm_customer_is_customer(\Drupal::currentUser()) || \Drupal::currentUser()->hasPermission('administer users'))
      && \Drupal::service('acq_checkoutcom.agent_api')->getCheckoutcomConfig('vault_enabled')) {

    // Saved cards list.
    $links['payment_cards'] = [
      'text' => t('Payment Cards'),
      'route' => 'acq_checkoutcom.payment_cards',
      'weight' => 41,
    ];
  }
}

/**
 * Implements hook_acq_payment_method_info_alter().
 */
function alshaya_acm_checkoutcom_acq_payment_method_info_alter(array &$definitions) {
  if (isset($definitions['checkout_com'])) {
    $definitions['checkout_com']['class'] = 'Drupal\alshaya_acm_checkoutcom\Plugin\PaymentMethod\AlshayaCheckoutCom';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_checkoutcom_form_multistep_checkout_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['acm_payment_methods'], $form['acm_payment_methods']['payment_details_wrapper'], $form['acm_payment_methods']['payment_details_wrapper']['payment_method_checkout_com'], $form['acm_payment_methods']['payment_details_wrapper']['payment_method_checkout_com']['title'])) {
    $cc_form =& $form['acm_payment_methods']['payment_details_wrapper']['payment_method_checkout_com'];

    $cc_form['card_types'] = [
      '#markup' => '
        <div class="card-types-wrapper">
          <span class="card-type card-type-visa"></span>
          <span class="card-type card-type-mastercard"></span>
        </div>
      ',
    ];
  }
}

/**
 * Implements hook_acq_checkoutcom_payment_form_validate_alter().
 */
function alshaya_acm_checkoutcom_acq_checkoutcom_payment_form_validate_alter(&$errors, $request_params) {
  $addressbook_manager = \Drupal::service('alshaya_addressbook.manager');
  $checkout_helper = \Drupal::service('alshaya_acm_checkout.checkout_helper');

  $terms_accepted = isset($request_params['checkout_terms'], $request_params['checkout_terms']['terms']) && !empty($request_params['checkout_terms']['terms']);

  $billing = $request_params['billing_address'];

  if (!$terms_accepted) {
    $errors['checkout_terms[terms]'] = t('Please agree to the Terms and Conditions.', [], ['context' => 'alshaya_static_text|agree_terms_and_condition']);
  }

  // Validate billing address, to display errors in ajax response.
  if ((empty($billing['same_as_shipping'])
       || $billing['same_as_shipping'] != BillingAddress::BILLING_ADDR_CASE_SAME_AS_SHIPPING)
      && $violations = $addressbook_manager->validateAddress($billing['address']['billing'])
  ) {
    foreach ($violations as $field => $message) {
      $errors['billing_address[address][billing][' . $field . ']'] = $message;
    }
  }

  if (empty($errors)) {
    if ($billing['same_as_shipping'] == BillingAddress::BILLING_ADDR_CASE_SAME_AS_SHIPPING) {
      $checkout_helper->setBillingFromShipping(TRUE);
    }
    elseif ($violations = $addressbook_manager->validateAddress($billing['address']['billing'])) {
      $address = $addressbook_manager->getMagentoAddressFromAddressArray($billing['address']['billing']);
      $checkout_helper->setBillingInfo(FALSE, $address);
    }
  }
}
