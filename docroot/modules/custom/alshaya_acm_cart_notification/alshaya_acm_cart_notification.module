<?php

/**
 * @file
 * Contains form alter for sku base form.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\alshaya_acm\EventSubscriber\AddToCartErrorEventSubscriber;

/**
 * Implements hook_form_alter().
 */
function alshaya_acm_cart_notification_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Altering Sku base form, which is the form implementation for Simple,
  // Grouped and Configurable products.
  if ($form_id == 'sku_base_form') {
    // Adding a form element a placeholder to populate as a cart notification.
    $form['cart_notification_modal'] = [
      '#markup' => '',
      '#prefix' => '<div id = "cart_notification">',
      '#suffix' => '</div>',
    ];

    $form['add_to_cart']['#ajax'] = [
      'callback' => 'alshaya_acm_cart_notification_form_submit',
      'wrapper' => 'cart_notification',
    ];

    // Attach the js file with the add to cart form.
    $form['#attached']['library'][] = 'core/drupal.ajax';
    $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
    $form['#attached']['library'][] = 'alshaya_acm_cart_notification/cart_notification_js';
  }
}

/**
 * AJAX callback for the add to cart submit button.
 */
function alshaya_acm_cart_notification_form_submit(&$form, FormStateInterface $form_state) {

  // If there are validation failures on the form.
  if ($form_state->getErrors()) {
    $errors = $form_state->getErrors();
    // Render $errors as list so even multiple errors are properly displayed.
    $error_list = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#title' => '',
      '#items' => $errors,
      '#attributes' => ['class' => 'error-list'],
      '#wrapper_attributes' => ['class' => 'container'],
    ];

    $error_html = drupal_render($error_list);

    // Use the template to render the error.
    $output = [
      '#theme' => 'add_to_cart_error',
      '#message' => $error_html,
    ];
  }
  // Check if we have an error in Subscriber.
  elseif (AddToCartErrorEventSubscriber::getErrorStatus()) {
    // Use the template to render the error.
    $output = [
      '#theme' => 'add_to_cart_error',
      '#message' => t('Oops! Something went wrong.'),
    ];
  }
  // Show success notification of the product.
  else {
    // Get product type.
    $type = SKU::load($form_state->getValue('sku_id'))->getType();

    // Check for product type as they have different data structures.
    // Product type - Configurable.
    if ($type == 'configurable') {
      // Quantity.
      $quantity = $form_state->getValue('quantity');

      // Get form values for configurable product.
      $tree = $form_state->get('tree');
      $configurables = $form_state->getValue('configurables');
      $tree_pointer = $tree['options'];
      foreach ($configurables as $key => $value) {
        if (empty($value)) {
          continue;
        }
        // Move the tree pointer if the selection is valid.
        if (isset($tree_pointer["$key:$value"])) {
          $tree_pointer = $tree_pointer["$key:$value"];
        }
      }
      // In case the option on product is not available, $tree_pointer is an
      // array instead of SKU Object.
      // ex: We have only XL and L, but the dropdown shows S as well.
      // This may not be needed on prod as we will hide the options not
      // available.
      // @todo: Remove this check once Product page is done.
      if (!($tree_pointer instanceof SKU)) {
        // Use the template to render the error.
        $output = [
          '#theme' => 'add_to_cart_error',
          '#message' => t('Oops! Something went wrong.'),
        ];
      }
      else {
        $string_sku = $tree_pointer->getSKU();

        // Product Name.
        $product_value = SKU::loadFromSKU($string_sku)->get('name')->getValue();
        $product_name = $product_value[0]['value'];

        // Product Image.
        // Create image path.
        $image = alshaya_acm_cart_notification_get_product_image($string_sku);

        // Generating cart link.
        $url = Url::fromRoute('acq_cart.cart')->toString();

        // Use the template to render the HTML.
        $output = [
          '#theme' => 'cart_notification',
          '#quantity' => $quantity,
          '#image' => $image,
          '#product_name' => $product_name,
          '#link' => $url,
          '#link_text' => t('View Cart.'),
        ];
      }
    }
    // Product Type - Simple.
    else {
      // Product name.
      $string_sku = SKU::load($form_state->getValue('sku_id'))->getSKU();
      $product_value = SKU::loadFromSKU($string_sku)->get('name')->getValue();
      $product_name = $product_value[0]['value'];

      // Quantity.
      $quantity = $form_state->getValue('quantity');

      // Generating cart link.
      $url = Url::fromRoute('acq_cart.cart')->toString();

      // Product Image.
      // Create image path.
      $image = alshaya_acm_cart_notification_get_product_image($string_sku);

      // Use the template to render the HTML.
      $output = [
        '#theme' => 'cart_notification',
        '#quantity' => $quantity,
        '#image' => $image,
        '#product_name' => $product_name,
        '#link' => $url,
        '#link_text' => t('View Cart.'),
      ];
    }
  }

  $html = drupal_render($output);

  // Ajax Response.
  $response = new AjaxResponse();
  $response->addCommand(new HtmlCommand('#cart_notification', $html));

  return $response;
}

/**
 * Helper function to return product image.
 *
 * @param string $string_sku
 *   SKU of the product.
 *
 * @return string
 *   Returns the image URL to be passed to theme function. FALSE if not found.
 */
function alshaya_acm_cart_notification_get_product_image($string_sku) {
  // Product Image.
  // Create image path.
  $image = SKU::loadFromSKU($string_sku)
    ->get('attr_image')
    ->getValue();

  // If we have image for the product.
  if ($image != NULL) {
    $file_uri = File::load($image[0]['target_id'])->getFileUri();
    $image = ImageStyle::load('cart_notification_thumbnail')->buildUrl($file_uri);
    return $image;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_cart_notification_theme($existing, $type, $theme, $path) {
  return [
    'cart_notification' => [
      'variables' => [
        'quantity' => 0,
        'image' => '',
        'product_name' => '',
        'link' => '',
        'link_text' => '',
      ],
      'template' => 'cart-notification',
    ],
    'add_to_cart_error' => [
      'variables' => [
        'message' => '',
      ],
      'template' => 'add-to-cart-error',
    ],
  ];
}
