<?php

/**
 * @file
 * Contains form alter for sku base form.
 */

use Drupal\acq_cart\Form\CustomerCartForm;
use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_acm\EventSubscriber\AddToCartErrorEventSubscriber;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_cart_notification_form_sku_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $sku = SKU::load($form['sku_id']['#value']);

  $form['errors-container'] = [
    '#type' => 'container',
    '#weight' => -50,
    '#attributes' => [
      'class' => [
        'errors-container',
        'error-container-' . strtolower(Html::cleanCssIdentifier($sku->getSku())),
      ],
    ],
  ];

  // Altering Sku base form, which is the form implementation for Simple,
  // Grouped and Configurable products.
  $form['add_to_cart']['#ajax'] = [
    'callback' => 'alshaya_acm_cart_notification_form_submit',
    'wrapper' => 'cart_notification',
  ];

  // Attach the js file with the add to cart form.
  $form['#attached']['library'][] = 'core/drupal.ajax';
  $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
  $form['#attached']['library'][] = 'alshaya_master/ladda';
  $form['#attached']['library'][] = 'alshaya_acm_cart_notification/cart_notification_js';
}

/**
 * AJAX callback for the add to cart submit button.
 */
function alshaya_acm_cart_notification_form_submit(&$form, FormStateInterface $form_state) {
  // SKU entity.
  $sku_entity = SKU::load($form_state->getValue('sku_id'));

  // If there are validation failures on the form.
  if ($form_state->getErrors()) {
    $errors = $form_state->getErrors();
    // Render $errors as list so even multiple errors are properly displayed.
    $error_list = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#title' => '',
      '#items' => $errors,
      '#attributes' => ['class' => 'error-list'],
      '#wrapper_attributes' => ['class' => 'container'],
    ];

    $error_html = render($error_list);

    // Use the template to render the error.
    $output = [
      '#theme' => 'add_to_cart_error',
      '#message' => $error_html,
    ];
  }
  // Check if we have an error in Subscriber.
  elseif (AddToCartErrorEventSubscriber::getErrorStatus()) {
    $errors = AddToCartErrorEventSubscriber::getErrors();

    // Use the template to render the error.
    $output = [
      '#theme' => 'add_to_cart_error',
      '#message' => reset($errors),
    ];
  }
  // Show success notification of the product.
  else {
    // Get product type.
    $type = $sku_entity->getType();

    // Product Name.
    $product_name = \Drupal::entityManager()->getTranslationFromContext($sku_entity)->get('name')->getString();

    // Quantity.
    $quantity = $form_state->getValue('quantity');

    // Generating cart link.
    $url = Url::fromRoute('acq_cart.cart')->toString();

    // Include the utility file to get product image.
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

    // Check for product type as they have different data structures.
    if ($type == 'configurable') {
      // If we have a child_sku available.
      $child_sku_entity = SKU::loadFromSku($form_state->getTemporaryValue('child_sku'));
      $image = alshaya_acm_get_product_display_image($child_sku_entity, 'cart_notification_thumbnail');
    }
    else {
      $image = alshaya_acm_get_product_display_image($sku_entity, 'cart_notification_thumbnail');
    }

    // Use the template to render the HTML.
    $output = [
      '#theme' => 'cart_notification',
      '#quantity' => $quantity,
      '#image' => $image,
      '#product_name' => $product_name,
      '#link' => $url,
      '#link_text' => t('view cart'),
    ];
  }

  // Unset all status messages as we already show the message in modal.
  unset($_SESSION['messages']['status']);

  // Get the rendered html to pass into HtmlCommand.
  $html = render($output);

  // Get the interval we want to show the message for on our ladda button.
  $interval = \Drupal::config('alshaya_master.settings')->get('ajax_spinner_message_interval');
  $data['interval'] = $interval;

  // Prepare the ajax Response.
  $response = new AjaxResponse();
  $data['message'] = $output['#theme'] == 'cart_notification' ? 'success' : 'failure';
  $response->addCommand(new InvokeCommand(NULL, 'stopSpinner', [$data]));

  $sku_css_id = strtolower(HTML::cleanCssIdentifier($sku_entity->getSku()));

  if ($output['#theme'] == 'add_to_cart_error') {
    $response->addCommand(new HtmlCommand('.error-container-' . $sku_css_id . ':visible', $html));
    $response->addCommand(new InvokeCommand(NULL, 'cartGenericScroll', ['.error-container-' . $sku_css_id]));
  }
  else {
    // Update mini cart Block.
    $cart_storage = \Drupal::service('acq_cart.cart_storage');
    $customer_cart_form_class = new CustomerCartForm($cart_storage);
    $customer_cart_form = \Drupal::formBuilder()->getForm($customer_cart_form_class);
    $response->addCommand(new ReplaceCommand('.customer-cart-form', $customer_cart_form));

    $mini_cart_html = \Drupal::service('acq_cart.mini_cart')->getMiniCart();

    $response->addCommand(new HtmlCommand('.error-container-' . $sku_css_id, ''));
    $response->addCommand(new HtmlCommand('#block-cartminiblock', $mini_cart_html));
    $response->addCommand(new InvokeCommand(NULL, 'cartNotificationScroll'));
    $response->addCommand(new HtmlCommand('#cart_notification', $html));
  }
  return $response;
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_cart_notification_theme($existing, $type, $theme, $path) {
  return [
    'cart_notification' => [
      'variables' => [
        'quantity' => 0,
        'image' => '',
        'product_name' => '',
        'link' => '',
        'link_text' => '',
      ],
      'template' => 'cart-notification',
    ],
    'add_to_cart_error' => [
      'variables' => [
        'message' => '',
      ],
      'template' => 'add-to-cart-error',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function alshaya_acm_cart_notification_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $routmatch = \Drupal::routeMatch();
  if ($routmatch->getRouteName() == 'entity.node.canonical') {
    $node = \Drupal::request()->attributes->get('node');

    $is_add_to_cart = !empty($variables['element']['#id']) && ($variables['element']['#id'] == 'edit-add-to-cart');
    if ($node->bundle() == 'acq_product' && $is_add_to_cart) {
      $suggestions[] = 'input__add_to_cart';
      $variables['element']['#attributes']['class'][] = 'ladda-button';
    }
  }
}
