<?php

/**
 * @file
 * Module for for privilege card fields and validation.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\webform\Element\WebformCreditCardNumber;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Get validation settings stored for validation.
 *
 * @return array
 *   Return the array with keys length and value start with.
 */
function alshaya_loyalty_get_validation_settings() {
  $loyalty = &drupal_static(__FUNCTION__, []);

  if (empty($loyalty)) {
    // Get alshaya loyalty settings.
    $config = \Drupal::config('alshaya_loyalty.settings');
    $loyalty = [
      'length' => (int) $config->get('apcn_max_length'),
      'value_start_with' => $config->get('apcn_value_starts_with'),
      'enable_disable_loyalty' => $config->get('enable_disable_loyalty'),
    ];
  }

  return $loyalty;
}

/**
 * Clean the card number without hyphens.
 *
 * @param string $value
 *   The Card number with hyphes.
 *
 * @return string
 *   Return the card number without hyphens.
 */
function _alshaya_loyalty_clean_card_number($value) {
  return str_replace('-', '', $value);
}

/**
 * Implements hook_form_alter().
 */
function alshaya_loyalty_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $add_privilege_fields = FALSE;
  // Get loyalty settings.
  $loyalty_settings = alshaya_loyalty_get_validation_settings();

  switch ($form_id) {
    case 'field_storage_config_edit_form':
      if ($form_state->getFormObject()->getEntity()->getType() == 'string') {
        if ($form_state->get('field_config')->getName() == 'field_privilege_card_number') {
          $form['settings']['max_length']['#default_value'] = 19;
          $form['settings']['max_length']['#disabled'] = TRUE;
        }
      }
      break;

    // Add privilege card number fields to cart form.
    case 'customer_cart_form':
      // Get the current cart.
      $cart = \Drupal::service('acq_cart.cart_storage')->getCart();

      // Get current cart items.
      $cart_items = $cart ? $cart->items() : NULL;

      // Add Privilege cart form elements only if there is something in cart.
      if (!empty($cart_items)) {
        $add_privilege_fields = TRUE;
        // Save the value of privilege card to field_privilege_card.
        array_unshift($form['#submit'], 'alshaya_loyalty_save_privilege_card_number');
      }
      break;

    // Add privilege card number fields to Register form.
    case 'user_register_form':
      if (\Drupal::currentUser()->isAnonymous()) {
        $form['field_privilege_card_number']['#access'] = FALSE;
        $add_privilege_fields = TRUE;
        // Save the value of privilege card to field_privilege_card.
        array_unshift($form['actions']['submit']['#submit'], 'alshaya_loyalty_register_user_set_privilege_card_number');
      }
      else {
        _alshaya_loyalty_field_privilege_card_number_element_validate($form, $form_state);
      }
      break;

    case 'user_form':
      // Allow loyalty only if its enabled.
      if ($loyalty_settings['enable_disable_loyalty']) {
        $form['field_privilege_card_number']['widget'][0]['value']['#type'] = 'tel';
        _alshaya_loyalty_field_privilege_card_number_element_validate($form, $form_state);
      }
      else {
        $form['field_privilege_card_number']['#access'] = FALSE;
      }
      break;
  }

  // Allow loyalty only if its enabled.
  if ($loyalty_settings['enable_disable_loyalty']) {
    // Add privilege card number fields to the form.
    if ($add_privilege_fields) {
      alshaya_loyalty_add_privilege_card_fields($form, $form_state);
    }
  }
}

/**
 * Add element_validate for field_privilege_card_number.
 */
function _alshaya_loyalty_field_privilege_card_number_element_validate(&$form, FormStateInterface $form_state) {
  $validation = alshaya_loyalty_get_validation_settings();

  if (!empty($form['field_privilege_card_number']['widget'][0]['value'])) {
    if (empty($form['field_privilege_card_number']['widget'][0]['value']['#default_value'])) {
      $form['field_privilege_card_number']['widget'][0]['value']['#default_value'] = $validation['value_start_with'];
    }
  }

  $form['field_privilege_card_number']['widget'][0]['value']['#maxlength'] = 19;

  // Validate privilege card number.
  $form['field_privilege_card_number']['#element_validate'] = [
    '_alshaya_loyalty_validate_field_value',
  ];
  _alshaya_loyalty_form_attachements($form, $form_state, $validation);
  // Save the value of privilege card number with the prefixed value.
  array_unshift($form['actions']['submit']['#submit'], 'alshaya_loyalty_register_user_set_privilege_card_number');
}

/**
 * Element validate callback.
 */
function _alshaya_loyalty_validate_field_value(&$element, FormStateInterface $form_state, &$complete_form) {
  // Get current field.
  $field = end($element['#array_parents']);
  // Get the field value.
  $field_val = $form_state->getValue($field);
  // Get the Element value.
  //
  // We need to check the value of the field is string or array and based on
  // that we need to get the value in a variable to validate.
  // Because we are using the same validate function for the custom privilege
  // card number elements and for the field that we create with field api for
  // user form.
  //
  // Check if the value is string.
  if (is_string($field_val)) {
    $element_raw_value = $field_val;
  }

  // Check if the value is array.
  if (is_array($field_val)) {
    $element_raw_value = $field_val[0]['value'];
  }

  // Clean the element value.
  $element_value = _alshaya_loyalty_clean_card_number($element_raw_value);

  // Validate the field if the value is not empty.
  if (!empty($element_value)) {
    $validation = alshaya_loyalty_get_validation_settings();
    // Check if the field value contains the settings value only.
    // Validate number against validation settings.
    if (($element_value != $validation['value_start_with'])
        && !alshaya_loyalty_check_valid_apc_number($element_value, $validation['length'], $validation['value_start_with'])) {
      $form_state->setErrorByName($field, t("@number is not a valid privilege card number.", ['@number' => alshaya_loyalty_format_card_number($element_value)]));
    }
  }
  else {
    $form_state->setValue($field, NULL);
  }
}

/**
 * Set privilege card number value for register form.
 */
function alshaya_loyalty_register_user_set_privilege_card_number(array &$form, FormStateInterface $form_state) {
  if ($apc_number = $form_state->getValue('privilege_card_number')) {
    $value = $apc_number;
  }
  elseif ($apc_number = $form_state->getValue('field_privilege_card_number')) {
    $value = $apc_number[0]['value'];
  }
  // Get the loyalty card number validation settings.
  $validation = alshaya_loyalty_get_validation_settings();
  // Clean the element value.
  $processed_value = _alshaya_loyalty_clean_card_number($value);

  // If the field value is empty or not a valid apc number.
  // Try to Get the value from temp store if exists.
  if (empty($processed_value) || !alshaya_loyalty_check_valid_apc_number($processed_value, $validation['length'], $validation['value_start_with'])) {
    $temp_store = \Drupal::service('user.private_tempstore')->get('alshaya_loyalty');
    $processed_value = $temp_store->get('card_number') ? $temp_store->get('card_number') : NULL;
  }
  // Validate the final value to be stored.
  if (!empty($processed_value) && alshaya_loyalty_check_valid_apc_number($processed_value, $validation['length'], $validation['value_start_with'])) {
    $form_state->setValue('field_privilege_card_number', [['value' => $processed_value]]);
  }
  elseif (isset($form['field_privilege_card_number'])) {
    $form_state->setValue('field_privilege_card_number', [['value' => NULL]]);
  }
}

/**
 * Save privilege card number for current user.
 */
function alshaya_loyalty_save_privilege_card_number(array &$form, FormStateInterface $form_state) {
  if ($apc_number = $form_state->getValue('privilege_card_number')) {
    // Get the loyalty card number validation settings.
    $validation = alshaya_loyalty_get_validation_settings();
    // Get user temp.store to store temporary value for current session.
    $temp_store = \Drupal::service('user.private_tempstore')->get('alshaya_loyalty');
    // Clean the element value.
    $apc_number = _alshaya_loyalty_clean_card_number($apc_number);

    if ($apc_number != $validation['value_start_with']) {
      if (\Drupal::currentUser()->isAuthenticated()) {
        $user = User::load(\Drupal::currentUser()->id());
        $user->get('field_privilege_card_number')->set(0, $apc_number);
        $user->save();
      }
      elseif (Drupal::currentUser()->isAnonymous()) {
        $temp_store->set('card_number', $apc_number);
      }

      $cart = \Drupal::service('acq_cart.cart_storage')->getCart();
      $cart->setExtension('loyalty', $apc_number);
    }
    elseif ($temp_store->get('card_number')) {
      $temp_store->delete('card_number');
    }
  }
}

/**
 * Compare the value against the settings.
 *
 * @param string $value
 *   The value to validate.
 * @param int $max_length
 *   The maximum length of the string.
 * @param string $value_start_with
 *   The value should start with.
 *
 * @return bool
 *   Return true of false.
 */
function alshaya_loyalty_check_valid_apc_number($value, $max_length, $value_start_with) {
  if (!is_numeric($value)) {
    return FALSE;
  }

  if (!preg_match('/^\d{16}$/', $value)) {
    return FALSE;
  }

  if (substr($value, 0, strlen($value_start_with)) != $value_start_with) {
    return FALSE;
  }
  // Validate loyalty card number with Luhn formula.
  return WebformCreditCardNumber::validCreditCardNumber($value);
}

/**
 * Add privilege card fields to the form.
 */
function alshaya_loyalty_add_privilege_card_fields(&$form, FormStateInterface $form_state) {
  $validation = alshaya_loyalty_get_validation_settings();

  $default_value = NULL;
  if (\Drupal::currentUser()->isAuthenticated()) {
    $user = User::load(\Drupal::currentUser()->id());
    $default_value = $user->get('field_privilege_card_number')->getString();
  }
  elseif (\Drupal::currentUser()->isAnonymous()) {
    $temp_store = \Drupal::service('user.private_tempstore')->get('alshaya_loyalty');
    $default_value = $temp_store->get('card_number') ? $temp_store->get('card_number') : NULL;
  }

  $form['privilege_card_wrapper'] = [
    '#type' => 'details',
    '#title' => t('Enter a privilege card number'),
    '#open' => $default_value ? TRUE : FALSE,
    '#weight' => 3,
    '#after_build' => ['alshaya_loyalty_privilege_card_wrapper_after_build'],
    '#prefix' => '<div id="details-privilege-card-wrapper">',
    '#suffix' => '</div>',
  ];

  $form['privilege_card_wrapper']['privilege_card_number'] = [
    '#type' => 'tel',
    '#title' => t('Privilege Card Number'),
    '#maxlength' => 19,
    '#element_validate' => [
      '_alshaya_loyalty_validate_field_value',
    ],
    '#ajax' => [
      'callback' => 'alshaya_loyalty_privilege_card_validation_ajax_callback',
      'event' => 'change',
      'method' => 'replace',
      'wrapper' => 'details-privilege-card-wrapper',
    ],
    '#default_value' => !empty($default_value) ? $default_value : $validation['value_start_with'],
    '#limit_validation_errors' => [['privilege_card_number']],
    '#disabled' => !empty($default_value) && \Drupal::currentUser()->isAuthenticated() ? TRUE : FALSE,
    '#prefix' => '<div class="details-privilege-card-wrapper-inside">',
  ];

  $form['privilege_card_wrapper']['privilege_card_number2'] = [
    '#type' => 'tel',
    '#title' => t('Re-enter Privilege Card Number'),
    '#maxlength' => 19,
    '#states' => [
      'required' => [
        ':input[name="privilege_card_number"]' => ['empty' => FALSE],
      ],
    ],
    '#element_validate' => [
      '_alshaya_loyalty_compare_field_values',
    ],
    '#ajax' => [
      'callback' => 'alshaya_loyalty_privilege_card_validation_ajax_callback',
      'event' => 'change',
      'method' => 'replace',
      'wrapper' => 'details-privilege-card-wrapper',
    ],
    '#limit_validation_errors' => [['privilege_card_number'], ['privilege_card_number2']],
    '#default_value' => !empty($default_value) ? $default_value : $validation['value_start_with'],
    '#disabled' => !empty($default_value) && \Drupal::currentUser()->isAuthenticated() ? TRUE : FALSE,
    '#suffix' => '</div>',
  ];

  _alshaya_loyalty_form_attachements($form, $form_state, $validation);
}

/**
 * Ajax callback: to validate for privilege card number.
 */
function alshaya_loyalty_privilege_card_validation_ajax_callback(&$form, FormStateInterface $form_state) {
  return $form['privilege_card_wrapper'];
}

/**
 * After build callback: for Privilege card number wrapper.
 *
 * Keep open the wrapper when privilege card number value for one of the field
 * filled up.
 */
function alshaya_loyalty_privilege_card_wrapper_after_build($element, FormStateInterface $form_state) {
  // Get user input for the form.
  $inputs = &$form_state->getUserInput();
  $validation = alshaya_loyalty_get_validation_settings();

  // Mark open true, if privilege card number value filled up.
  if (!empty($inputs) && (!empty($inputs['privilege_card_number']) || !empty($inputs['privilege_card_number2']))) {
    if (_alshaya_loyalty_clean_card_number($inputs['privilege_card_number']) !== $validation['value_start_with'] ||
        _alshaya_loyalty_clean_card_number($inputs['privilege_card_number2']) !== $validation['value_start_with']) {
      $element['#open'] = TRUE;
    }
  }

  return $element;
}

/**
 * Compare two field values.
 */
function _alshaya_loyalty_compare_field_values(&$form, FormStateInterface $form_state, &$complete_form) {
  $card1 = $form_state->getValue('privilege_card_number');
  $card2 = $form_state->getValue('privilege_card_number2');

  if (!empty($card1) && ($card1 != $card2)) {
    $form_state->setErrorByName('privilege_card_number2', t("Specified Privilege card numbers do not match."));
  }
}

/**
 * Add js attachments for the privilege card number forms.
 *
 * @param array $validation
 *   Validation settings array.
 */
function _alshaya_loyalty_form_attachements(&$form, FormStateInterface $form_state, array $validation = []) {
  if (empty($validation)) {
    $validation = alshaya_loyalty_get_validation_settings();
  }
  $form['#attached']['library'][] = 'alshaya_master/ladda';
  $form['#attached']['drupalSettings']['alshaya_loyalty'] = [
    'card_validate' => [
      'init_value' => $validation['value_start_with'],
    ],
  ];
}

/**
 * Implements THEMENAME_preprocess_input().
 */
function alshaya_loyalty_preprocess_input(&$variables) {
  // Attach library for privilege card input field.
  if (isset($variables['element'], $variables['element']['#name']) && strpos($variables['element']['#name'], 'privilege_card_number') !== FALSE) {
    $variables['attributes']['class'][] = 'c-input__privilege-card ';
    $variables['#attached']['library'][] = 'alshaya_loyalty/privilege_card_number';
  }
}

/**
 * Implements hook_preprocess_user().
 */
function alshaya_loyalty_preprocess_user(&$variables) {
  /* @var \Drupal\user\Entity\User $user */
  $user = $variables['user'];
  $card = $user->get('field_privilege_card_number')->getString();
  if (empty($card)) {
    $block = Block::load('jointheclub');
    $variables['joinclub'] = \Drupal::entityTypeManager()->getViewBuilder('block')->view($block);
  }
}

/**
 * Format loyalty card number.
 *
 * @param string $number
 *   The loyalty card number.
 * @param bool $space
 *   Add space around glue.
 *
 * @return string
 *   Return the formatted string.
 */
function alshaya_loyalty_format_card_number($number, $space = FALSE) {
  $number = str_replace(['-', ' '], '', $number);
  $cc_length = strlen($number);
  $processed_number = substr($number, -4);

  for ($i = $cc_length - 5; $i >= 0; $i--) {
    $calc = ((($i + 1) - $cc_length) % 4);
    if ($calc == 0) {
      $glue = $space ? ' - ' : '-';
      $processed_number = $glue . $processed_number;
    }
    $processed_number = $number[$i] . $processed_number;
  }

  return $processed_number;
}

/**
 * Mask Loyalty card number.
 *
 * @param string $number
 *   The loyalty card number.
 *
 * @return string
 *   Return masked string of card number.
 */
function alshaya_loyalty_mask_card_number($number) {
  return 'XXXX-XXXX-XXXX-' . substr($number, -4);
}

/**
 * Implements hook_alshaya_acm_customer_update_account_alter().
 */
function alshaya_loyalty_alshaya_acm_customer_update_account_alter(User $user, array $customer) {
  // Update privilege card number if available in customer data.
  if (isset($customer['extension'], $customer['extension']['loyalty_card_number'])) {
    $user->get('field_privilege_card_number')->setValue($customer['extension']['loyalty_card_number']);
  }
}

/**
 * Implements hook_acq_commerce_update_customer_api_request_alter().
 */
function alshaya_loyalty_acq_commerce_update_customer_api_request_alter(array &$request_options) {
  if (isset($request_options['json'], $request_options['json']['customer']['email'])) {
    /** @var \Drupal\user\Entity\User $user */
    $user = user_load_by_mail($request_options['json']['customer']['email']);

    if (!empty($user)) {
      $privilege_card_number = $user->get('field_privilege_card_number')->getString();
      $request_options['json']['customer']['extension']['loyalty_card_number'] = $privilege_card_number;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_loyalty_user_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $build['#cache']['tags'][] = 'loyalty-on-off';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * For the 'checkout order confirmation' step.
 */
function alshaya_loyalty_preprocess_checkout_order_detail(&$variables) {
  if (!empty($variables['account']['privilege_card_number'])) {
    $loyalty_settings = alshaya_loyalty_get_validation_settings();
    // If site has loyalty 'off'.
    if (!$loyalty_settings['enable_disable_loyalty']) {
      $variables['account']['privilege_card_number'] = '';
    }
  }
}
