<?php

/**
 * @file
 * Alshaya master module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\user\Entity\Role;

/**
 * Implements hook_acsf_staging_scrub_admin_roles_alter().
 */
function alshaya_master_acsf_staging_scrub_admin_roles_alter(array &$admin_roles) {
  // Don't scrub admin/back-office accounts.
  $roles = Role::loadMultiple();

  // Remove authenticated role from list.
  unset($roles[Role::AUTHENTICATED_ID]);

  // Remove anonymous role from list.
  unset($roles[Role::ANONYMOUS_ID]);

  $admin_roles = array_merge($admin_roles, array_keys($roles));
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function alshaya_master_editor_js_settings_alter(array &$settings) {
  if (isset($settings['editor']['formats']['rich_text'])) {
    // Remove the editor's built in context menu.
    // context menu is dependent on tableTools and tableResize plugins, so need
    // to remove those too.
    $settings['editor']['formats']['rich_text']['editorSettings']['removePlugins'] = 'contextmenu,tabletools,tableresize';
  }
}

/**
 * Implements hook_block_build_alter().
 */
function alshaya_master_block_build_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getPluginId() == 'system_branding_block') {
    $build['#cache']['contexts'][] = 'url.path';
  }
}

/**
 * Implements hook_form_alter().
 */
function alshaya_master_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!in_array($form_id, ['customer_cart_form'])) {
    $form['#error_no_message'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_master_form_system_site_maintenance_mode_alter(&$form, FormStateInterface $form_state) {
  $form['maintenance_mode_message']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_master_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Logo settings, only available when file.module is enabled.
  if (\Drupal::moduleHandler()->moduleExists('file')) {
    $build_info = $form_state->getBuildInfo();
    if (isset($build_info['args'][0]) && ($theme = $build_info['args'][0])) {
      $form['email_logo'] = [
        '#type' => 'details',
        '#title' => t('E-mail logo image'),
        '#open' => TRUE,
      ];

      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $config = \Drupal::configFactory()->get('alshaya_master.theme.' . $theme . '.' . $lang);
      $form['email_logo']['settings']['email_logo_path'] = [
        '#type' => 'textfield',
        '#title' => t('Path to custom logo'),
        '#default_value' => $config->get('email_logo_path'),
      ];
      $form['email_logo']['settings']['email_logo_upload'] = [
        '#type' => 'file',
        '#title' => t('Upload logo image'),
        '#maxlength' => 40,
        '#description' => t("If you don't have direct file access to the server, use this field to upload your logo."),
      ];

      $key = array_search('::validateForm', $form['#validate']);
      $form['#validate'][$key] = 'alshaya_master_override_default_validate_system_theme_settings_form';
      array_unshift($form['#submit'], 'alshaya_master_save_system_theme_settings');
    }
  }
}

/**
 * Override default theme settings for validation.
 *
 * Allow svg extension file to be uploaded as site logo image & validate email
 * logo file upload.
 *
 * @see \Drupal\system\Form\ThemeSettingsForm::validateForm()
 */
function alshaya_master_override_default_validate_system_theme_settings_form(array &$form, FormStateInterface $form_state) {
  if (\Drupal::moduleHandler()->moduleExists('file')) {
    // Handle file uploads.
    $validators = ['file_validate_extensions' => ['png gif jpg jpeg apng svg']];

    // Check for a new uploaded logo.
    $file = file_save_upload('logo_upload', $validators, FALSE, 0);
    if (isset($file)) {
      // File upload was attempted.
      if ($file) {
        // Put the temporary file in form_values so we can save it on submit.
        $form_state->setValue('logo_upload', $file);
      }
      else {
        // File upload failed.
        $form_state->setErrorByName('logo_upload', t('The logo could not be uploaded.'));
      }
    }

    $validators = ['file_validate_extensions' => ['ico png gif jpg jpeg apng svg']];

    // Check for a new uploaded favicon.
    $file = file_save_upload('favicon_upload', $validators, FALSE, 0);
    if (isset($file)) {
      // File upload was attempted.
      if ($file) {
        // Put the temporary file in form_values so we can save it on submit.
        $form_state->setValue('favicon_upload', $file);
      }
      else {
        // File upload failed.
        $form_state->setErrorByName('favicon_upload', t('The favicon could not be uploaded.'));
      }
    }

    // When intending to use the default logo, unset the logo_path.
    if ($form_state->getValue('default_logo')) {
      $form_state->unsetValue('logo_path');
    }

    // When intending to use the default favicon, unset the favicon_path.
    if ($form_state->getValue('default_favicon')) {
      $form_state->unsetValue('favicon_path');
    }

    // If the user provided a path for a logo or favicon file, make sure a file
    // exists at that path.
    if ($form_state->getValue('logo_path')) {
      $path = alshaya_master_validate_path($form_state->getValue('logo_path'));
      if (!$path) {
        $form_state->setErrorByName('logo_path', t('The custom logo path is invalid.'));
      }
    }
    if ($form_state->getValue('favicon_path')) {
      $path = alshaya_master_validate_path($form_state->getValue('favicon_path'));
      if (!$path) {
        $form_state->setErrorByName('favicon_path', t('The custom favicon path is invalid.'));
      }
    }

    // Handle email logo file upload and validation.
    // Handle file uploads.
    $validators = ['file_validate_extensions' => ['png gif jpg jpeg apng svg']];

    // Check for a new uploaded logo.
    $file = file_save_upload('email_logo_upload', $validators, FALSE, 0);
    if (isset($file)) {
      // File upload was attempted.
      if ($file) {
        // Put the temporary file in form_values so we can save it on submit.
        $form_state->setValue('email_logo_upload', $file);
      }
      else {
        // File upload failed.
        $form_state->setErrorByName('email_logo_upload', t('The logo could not be uploaded.'));
      }
    }

  }
}

/**
 * Save email logo for selected theme.
 */
function alshaya_master_save_system_theme_settings(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['args'][0])) {
    $theme = $build_info['args'][0];
  }

  if (!empty($values['logo_upload'])) {
    $filename = file_unmanaged_copy($values['logo_upload']->getFileUri());
    $values['default_logo'] = 0;
    $values['logo_path'] = $filename;
  }

  // If the user entered a path relative to the system files directory for
  // a logo or favicon, store a public:// URI so the theme system can handle it.
  if (!empty($values['logo_path'])) {
    $values['logo_path'] = alshaya_master_validate_path($values['logo_path']);
  }

  // Save different logo for language.
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $themeConfig = \Drupal::languageManager()->getLanguageConfigOverride($langcode, $theme . '.settings');
  $themeConfig->set('logo.path', $values['logo_path'])->save();
  $form_state->unsetValue('logo_path');
  $form_state->unsetValue('logo_upload');

  // Save email logo.
  $settings = ['email_logo_upload', 'email_logo_path'];
  foreach ($settings as $setting_name) {
    ${$setting_name} = $form_state->getValue($setting_name);
    $form_state->unsetValue($setting_name);
  }

  // If the user uploaded a new logo or favicon, save it to a permanent location
  // and use it in place of the default theme-provided file.
  if (!empty($email_logo_upload)) {
    $filename = file_unmanaged_copy($email_logo_upload->getFileUri());
    $logo_path = $filename;
  }

  if (!empty($email_logo_path) && empty($email_logo_upload)) {
    $logo_path = alshaya_master_validate_path($email_logo_path);
  }

  if (isset($logo_path)) {
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $config = \Drupal::configFactory()->getEditable('alshaya_master.theme.' . $theme . '.' . $lang);
    $config->set('email_logo_path', $logo_path);
    $config->set('email_logo_url', file_create_url($logo_path));
    $config->save();
  }
}

/**
 * Helper function to Validate the file path.
 *
 * @param string $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 *
 * @return bool|string
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function alshaya_master_validate_path($path) {
  // Absolute local file paths are invalid.
  if (drupal_realpath($path) == $path) {
    return FALSE;
  }
  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }
  // Prepend 'public://' for relative file paths within public filesystem.
  if (file_uri_scheme($path) === FALSE) {
    $path = 'public://' . $path;
  }
  if (is_file($path)) {
    return $path;
  }
  return FALSE;
}

/**
 * Get email logo settings.
 *
 * @param null|string $theme
 *   The theme name for which we have return the logo.
 *
 * @return array
 *   Return array of logo path and url.
 */
function alshaya_master_get_email_logo($theme = NULL, $lang = NULL) {
  $cache = &drupal_static(__FUNCTION__, []);
  // If no key is given, use the current theme if we can determine it.
  if (!isset($theme)) {
    $theme = \Drupal::theme()->getActiveTheme()->getName();
  }

  if (empty($cache[$theme])) {
    // Get email logo based on the language.
    if (!isset($lang)) {
      $lang = \Drupal::currentUser()->getPreferredLangcode();
    }
    $config = \Drupal::configFactory()->get('alshaya_master.theme.' . $theme . '.' . $lang);
    $cache[$theme]['logo_path'] = $config->get('email_logo_path');
    if (!empty($cache[$theme]['logo_path'])) {
      $cache[$theme]['logo_url'] = file_create_url($config->get('email_logo_path'));
    }
  }

  return $cache[$theme];
}

/**
 * Implements hook_block_access().
 */
function alshaya_master_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'breadcrumb' block on some pages.
  if ($operation == 'view' && $block->getPluginId() == 'system_breadcrumb_block') {
    $current_route = \Drupal::routeMatch()->getRouteName();
    $forbidden_routes = [
      'user.login',
      'user.register',
      'user.pass',
      'user.cancel_confirm',
      'user.reset.login',
      'user.reset.form',
      'user.reset',
    ];
    $front_page = \Drupal::service('path.matcher')->isFrontPage();
    return AccessResult::forbiddenIf(in_array($current_route, $forbidden_routes) || $front_page);
  }
}

/**
 * Implements hook_r4032login_redirect_option_alter().
 */
function alshaya_master_r4032login_redirect_option_alter(array &$options) {
  // Unset destination query parameter for both logged-in and anon user.
  unset($options['query']);
}

/**
 * Function to sort an array based on a specific key.
 *
 * @param array $array
 *   Array to sort.
 * @param string $key
 *   Key of the array or object to sort with.
 * @param string $order
 *   Sorting order asc/desc.
 * @param string $key2
 *   Optional secondary key for sorting when first key has equal value.
 */
function alshaya_master_utility_usort(array &$array, $key, $order = 'desc', $key2 = NULL, $order2 = 'asc') {
  usort($array, function ($item_1, $item_2) use ($key, $order, $key2) {
    $val1 = is_array($item_1) ? $item_1[$key] : $item_1->$key;
    $val2 = is_array($item_2) ? $item_2[$key] : $item_2->$key;

    $order = _alshaya_master_utility_usort_check_order($val1, $val2, $order);

    // Add check for secondary key.
    if ($key2 && $order === 0) {
      $val3 = is_array($item_1) ? $item_1[$key2] : $item_1->$key2;
      $val4 = is_array($item_2) ? $item_2[$key2] : $item_2->$key2;
      return _alshaya_master_utility_usort_check_order($val3, $val4, $order);
    }

    return $order;
  });
}

/**
 * Helper function to get order between two values.
 *
 * @param mixed $val1
 *   First value.
 * @param mixed $val2
 *   Second value.
 * @param string $order
 *   Ascending or descending.
 *
 * @return int
 *   Returns the order value - 0, 1 or -1.
 */
function _alshaya_master_utility_usort_check_order($val1, $val2, $order) {
  if ($val1 == $val2) {
    return 0;
  }
  if ($order == 'asc') {
    return ($val1 < $val2) ? -1 : 1;
  }
  elseif ($order == 'desc') {
    return ($val1 > $val2) ? -1 : 1;
  }
}

/**
 * Implements hook_back_to_top_admin_prevent_alter().
 */
function alshaya_master_back_to_top_admin_prevent_alter(&$is_admin) {
  $route = \Drupal::routeMatch();
  // If user/edit route.
  if ($route->getRouteName() == 'entity.user.edit_form') {
    // If current user has access to administration theme, means user/edit will
    // open in the admin theme. In that case nothing to do.
    $current_user = \Drupal::currentUser();
    if (!$current_user->hasPermission('view the administration theme')) {
      $is_admin = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_master_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state) {
  $disable_message = \Drupal::configFactory()->getEditable('alshaya_master.settings')->get('js_disable_message');
  $form['js_disable_message'] = [
    '#type' => 'textarea',
    '#title' => t('Disabled js message'),
    '#description' => t('Message to be shown when JS is disabled on site'),
    '#default_value' => $disable_message,
  ];

  $form['#submit'][] = '_alshaya_admin_site_information_submit';
}

/**
 * Submit handler for the site information form.
 */
function _alshaya_admin_site_information_submit($form, FormStateInterface $form_state) {
  $disable_message = $form_state->getValue('js_disable_message');
  \Drupal::configFactory()->getEditable('alshaya_master.settings')
    ->set('js_disable_message', $disable_message)
    ->save();
}

/**
 * Implements hook_config_translation_info_alter().
 */
function alshaya_admin_config_translation_info_alter(&$info) {
  $info['system.site_information_settings']['names'][] = 'alshaya_master.settings';
}

/**
 * Implements hook_element_info_alter().
 */
function alshaya_master_element_info_alter(array &$info) {
  if (isset($info['mobile_number']['#process'])) {
    $info['mobile_number']['#process'][] = '_alshaya_master_mobile_number_process';
    $info['mobile_number']['#value_callback'] = '_alshaya_master_mobile_number_value_callback';
    array_unshift($info['mobile_number']['#element_validate'], '_alshaya_master_mobile_number_validate');
  }
}

/**
 * Processor for the mobile number field to disable the country code.
 */
function _alshaya_master_mobile_number_process(array &$element, FormStateInterface $form_state) {
  $default_site_country = _alshaya_custom_get_site_level_country_code();

  // Set default country as per site.
  $element['country-code']['#value'] = $default_site_country;
  $options = $element['country-code']['#options'];
  $element['country-code']['#options'] = [$default_site_country => $options[$default_site_country]];
  $element['country-code']['#attributes']['class'][] = 'hidden-important';

  // Remove space to avoid issues in RTL.
  if (!empty($element['mobile']['#default_value'])) {
    $element['mobile']['#default_value'] = str_replace(' ', '', $element['mobile']['#default_value']);
  }

  // Add maxlength from config.
  // This config doesn't contain any form as length of mobile number is not
  // expected to change except for changing country. Changing country is a major
  // change and also means new install so it can be set in specific country
  // specific module install.
  $mobile_number_settings = \Drupal::config('alshaya_master.mobile_number_settings');
  $element['mobile']['#maxlength'] = $mobile_number_settings->get('maxlength');

  // Make mobile number required only for few forms.
  $mobile_number_required_forms = [
    'webform_submission_alshaya_contact_add_form',
    'profile_address_book_add_form',
    'profile_address_book_edit_form',
    'profile_address_book_form',
    'multistep_checkout',
  ];

  if (in_array($form_state->getBuildInfo()['form_id'], $mobile_number_required_forms)) {
    $element['mobile']['#attributes']['data-msg-required'] = t('@title is required.', ['@title' => $element['#title']]);
    $element['mobile']['#required'] = TRUE;
  }

  // Add input prefix library.
  $element['#attached']['library'][] = 'alshaya_master/mobile_number';

  // Country code.
  $country_mobile_code = alshaya_master_get_country_mobile_code();
  if ($country_mobile_code) {
    $element['mobile']['#attributes']['mobile-prefix'] = $country_mobile_code;
    $element['#attached']['drupalSettings']['alshaya_mobile_prefix'] = $country_mobile_code;
  }

  return $element;
}

/**
 * Validate callback: To remove the country code prefix added in mobile field.
 */
function _alshaya_master_mobile_number_validate(array &$element, FormStateInterface $form_state) {
  $tree_parents = $element['#parents'];
  // Country code.
  $country_mobile_code = alshaya_master_get_country_mobile_code();
  // Get user input as validation function is using the input value to validate.
  // @see \Drupal\mobile_number\Element\MobileNumber::mobileNumberValidate
  $input = $form_state->getUserInput();
  $pp = NestedArray::getValue($form_state->getUserInput(), $tree_parents);
  // Remove country code from the value, as we are using a single input for
  // country code and mobile number or local number.
  if (!empty($pp['local_number'])) {
    $pp['local_number'] = str_replace($country_mobile_code, '', $pp['local_number']);
  }
  $pp['mobile'] = str_replace($country_mobile_code, '', $pp['mobile']);
  NestedArray::setValue($input, $tree_parents, $pp);
  $form_state->setUserInput($input);
}

/**
 * Value callback for the mobile number field to remove the prefix.
 */
function _alshaya_master_mobile_number_value_callback(&$element, $input, FormStateInterface $form_state) {
  /** @var \Drupal\mobile_number\MobileNumberUtilInterface $util */
  $util = \Drupal::service('mobile_number.util');

  if ($input) {
    $country = !empty($input['country-code']) ? $input['country-code'] : (count($element['#allowed_countries']) == 1 ? key($element['#allowed_countries']) : NULL);

    // Remove the country code prefix added in mobile field.
    $country_mobile_code = alshaya_master_get_country_mobile_code($country, $util);
    $input['mobile'] = str_replace($country_mobile_code, '', $input['mobile']);

    $mobile_number = $util->getMobileNumber($input['mobile'], $country);
    $result = [
      'value' => $mobile_number ? $util->getCallableNumber($mobile_number) : '',
      'country' => $country,
      'local_number' => $input['mobile'],
      'tfa' => !empty($input['tfa']) ? 1 : 0,
      'verified' => 0,
      'verification_token' => !empty($input['verification_token']) ? $input['verification_token'] : NULL,
      'verification_code' => !empty($input['verification_code']) ? $input['verification_code'] : NULL,
    ];
  }
  else {
    $result = !empty($element['#default_value']) ? $element['#default_value'] : [];
  }

  return $result;
}

/**
 * Get country mobile code.
 *
 * @param null|string $country
 *   (optional) The site country code.
 * @param null|object $util
 *   (optional) The mobile utility functions.
 *
 * @return string
 *   Return country code.
 */
function alshaya_master_get_country_mobile_code($country = NULL, $util = NULL) {
  if (empty($country)) {
    $country = _alshaya_custom_get_site_level_country_code();
  }

  if (empty($util)) {
    $util = \Drupal::service('mobile_number.util');
  }

  return '+' . $util->getCountryCode($country);
}

/**
 * Helper function to convert date received from API to site timezone date.
 *
 * @param string $date
 *   Date string received from API.
 * @param string $format
 *   Drupal date format to get the return string.
 *
 * @return mixed
 *   Formated date in site's timezone.
 */
function alshaya_master_get_site_date_from_api_date($date, $format = '') {
  // @TODO: We need confirmation from Magento that we will always have UTC.
  // Get UTC timezone.
  $tz_utc = new DateTimeZone('UTC');

  // Get local site timezone.
  $tz_local = new DateTimeZone(date_default_timezone_get());

  // Get date object for date string.
  $dt = new DateTime($date, $tz_utc);

  // Convert the timezone.
  $dt->setTimezone($tz_local);

  // Return formated date in site's timezone.
  return \Drupal::service('date.formatter')->format($dt->getTimestamp(), $format);
}

/**
 * Implements hook_alshaya_master_post_drupal_install().
 */
function alshaya_master_alshaya_master_post_drupal_install() {
  // Update default site-mail on prod.
  if (alshaya_is_env_prod()) {
    $config = \Drupal::configFactory()->getEditable('system.site');
    $config->set('mail', 'no-reply@alshaya.com');
    $config->save();
  }

  // Disable unwanted core views.
  if ($views_to_disable = Settings::get('views_to_disable')) {
    $view_storage = \Drupal::service('entity.manager')->getStorage('view');
    foreach ($views_to_disable as $view_machine_name) {
      // Disable the view.
      if ($view = $view_storage->load($view_machine_name)) {
        $view->disable()->save();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_master_webform_submission_presave(EntityInterface $entity) {
  $data = $entity->getData();
  $value_changed = FALSE;
  // Mobile number field gives value as array and it gets stored in database
  // as "Array". so, we need to Walk through the submitted data and search for
  // mobile number value and replace the array with value string.
  array_walk($data, function (&$value) use (&$value_changed) {
    if (is_array($value) && isset($value['mobile'])) {
      $value_changed = TRUE;
      $value = $value['value'];
    }
  });

  if ($value_changed) {
    $entity->setData($data);
  }
}
