<?php

/**
 * @file
 * Alshaya master module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\views\Views;
use Drupal\user\Entity\Role;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\Core\Cache\Cache;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

// phpcs:ignore
define('ALSHAYA_MASTER_CUSTOM_LOGO_TYPES', ['email', 'mobile']);

/**
 * Implements hook_acsf_registry().
 *
 * Adding our custom class to the registry that changes Alshaya configuration.
 */
function alshaya_master_acsf_registry() {
  return [
    'events' => [
      [
        'weight' => 15,
        'type' => 'site_duplication_scrub',
        'class' => '\Drupal\alshaya_master\Event\AlshayaAcsfDuplicationScrubUsersHandler',
      ],
    ],
  ];
}

/**
 * Implements hook_acsf_staging_scrub_admin_roles_alter().
 */
function alshaya_master_acsf_staging_scrub_admin_roles_alter(array &$admin_roles) {
  // Don't scrub admin/back-office accounts.
  $roles = Role::loadMultiple();

  // Remove authenticated role from list.
  unset($roles[Role::AUTHENTICATED_ID]);

  // Remove anonymous role from list.
  unset($roles[Role::ANONYMOUS_ID]);

  $admin_roles = array_merge($admin_roles, array_keys($roles));

  try {
    $date = \Drupal::service('date.formatter')->format(
      time(),
      'custom',
      DateTimeItemInterface::DATETIME_STORAGE_FORMAT,
      DateTimeItemInterface::STORAGE_TIMEZONE
    );

    // Re-use if user exists.
    $admin_user = user_load_by_mail('user3+admin@example.com');
    if (!($admin_user instanceof UserInterface)) {
      // Create default administrator user.
      $admin_user = User::create();
      $admin_user->enforceIsNew();
      $admin_user->setUsername('admin1');
      $admin_user->setEmail('user3+admin@example.com');
      $admin_user->addRole('administrator');
    }

    // Set expiration to not-expired.
    $admin_user->set('field_last_password_reset', $date);
    $admin_user->set('field_password_expiration', '0');
    $admin_user->setPassword('AlShAyAU1admin');
    $admin_user->activate();
    $admin_user->save();

    // Re-use if user exists.
    $webmaster_user = user_load_by_mail('user3+webmaster@example.com');
    if (!($webmaster_user instanceof UserInterface)) {
      // Create default webmaster user.
      $webmaster_user = User::create();
      $webmaster_user->enforceIsNew();
      $webmaster_user->setEmail('user3+webmaster@example.com');
      $webmaster_user->setUsername('webmaster_acq');
      $webmaster_user->addRole('webmaster');
    }

    // Set expiration to not-expired.
    $webmaster_user->set('field_last_password_reset', $date);
    $webmaster_user->set('field_password_expiration', '0');
    $webmaster_user->setPassword('AlShAyAU1webmaster');
    $webmaster_user->activate();
    $webmaster_user->save();
  }
  catch (\Exception) {
    // Do nothing, we don't want staging operation to fail because of this.
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function alshaya_master_editor_js_settings_alter(array &$settings) {
  if (isset($settings['editor']['formats']['rich_text'])) {
    // Remove the editor's built in context menu.
    // context menu is dependent on tableTools and tableResize plugins, so need
    // to remove those too.
    $settings['editor']['formats']['rich_text']['editorSettings']['removePlugins'] = 'contextmenu,tabletools,tableresize';
  }
}

/**
 * Implements hook_block_build_alter().
 */
function alshaya_master_block_build_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getPluginId() == 'system_branding_block') {
    $build['#cache']['contexts'][] = 'url.path';
  }
}

/**
 * Implements hook_form_alter().
 */
function alshaya_master_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach form error JS to all forms(except forms on admin pages & user edit
  // form) to make sure the first error element is focused in case of error.
  if (!\Drupal::service('router.admin_context')->isAdminRoute() ||
    (\Drupal::routeMatch()->getRouteName() === 'entity.user.edit_form')) {
    $form['#attached']['library'][] = 'alshaya_master/focus_form_error';
  }

  if (!in_array($form_id, ['customer_cart_form'])) {
    $form['#disable_inline_form_errors_summary'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_master_form_system_site_maintenance_mode_alter(&$form, FormStateInterface $form_state) {
  $form['maintenance_mode_message']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_master_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Logo settings, only available when file.module is enabled.
  if (\Drupal::moduleHandler()->moduleExists('file')) {
    $build_info = $form_state->getBuildInfo();
    if (isset($build_info['args'][0]) && ($theme = $build_info['args'][0])) {
      foreach (ALSHAYA_MASTER_CUSTOM_LOGO_TYPES as $type) {
        $form['logo'][$type . '_logo'] = [
          '#type' => 'details',
          '#title' => t('@field logo image', ['@field' => $type]),
          '#open' => TRUE,
          '#tree' => FALSE,
        ];

        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $config = \Drupal::configFactory()->get('alshaya_master.theme.' . $theme . '.' . $lang);
        $form['logo'][$type . '_logo']['settings'][$type . '_logo_path'] = [
          '#type' => 'textfield',
          '#title' => t('Path to custom logo'),
          '#default_value' => $config->get($type . '_logo_path'),
        ];
        $form['logo'][$type . '_logo']['settings'][$type . '_logo_upload'] = [
          '#type' => 'file',
          '#title' => t('Upload logo image'),
          '#maxlength' => 40,
          '#description' => t("If you don't have direct file access to the server, use this field to upload your logo."),
        ];
      }

      $key = array_search('::validateForm', $form['#validate']);
      $form['#validate'][$key] = 'alshaya_master_override_default_validate_system_theme_settings_form';
      array_unshift($form['#submit'], 'alshaya_master_save_system_theme_settings');
    }
  }
}

/**
 * Override default theme settings for validation.
 *
 * Allow svg extension file to be uploaded as site logo image & validate email
 * logo file upload.
 *
 * @see \Drupal\system\Form\ThemeSettingsForm::validateForm()
 */
function alshaya_master_override_default_validate_system_theme_settings_form(array &$form, FormStateInterface $form_state) {
  if (\Drupal::moduleHandler()->moduleExists('file')) {
    // Handle file uploads.
    $logo_validators = ['file_validate_extensions' => ['png gif jpg jpeg apng svg']];
    $favicon_validators = ['file_validate_extensions' => ['ico png gif jpg jpeg apng svg']];

    // Check for a new uploaded logo.
    $file = file_save_upload('logo_upload', $logo_validators, FALSE, 0);
    if (isset($file)) {
      // File upload was attempted.
      if ($file) {
        // Put the temporary file in form_values so we can save it on submit.
        $form_state->setValue('logo_upload', $file);
      }
      else {
        // File upload failed.
        $form_state->setErrorByName('logo_upload', t('The logo could not be uploaded.'));
      }
    }

    // Check for a new uploaded favicon.
    $file = file_save_upload('favicon_upload', $favicon_validators, FALSE, 0);
    if (isset($file)) {
      // File upload was attempted.
      if ($file) {
        // Put the temporary file in form_values so we can save it on submit.
        $form_state->setValue('favicon_upload', $file);
      }
      else {
        // File upload failed.
        $form_state->setErrorByName('favicon_upload', t('The favicon could not be uploaded.'));
      }
    }

    // When intending to use the default logo, unset the logo_path.
    if ($form_state->getValue('default_logo')) {
      $form_state->unsetValue('logo_path');
    }

    // When intending to use the default favicon, unset the favicon_path.
    if ($form_state->getValue('default_favicon')) {
      $form_state->unsetValue('favicon_path');
    }

    // If the user provided a path for a logo or favicon file, make sure a file
    // exists at that path.
    if ($form_state->getValue('logo_path')) {
      $path = alshaya_master_validate_path($form_state->getValue('logo_path'));
      if (!$path) {
        $form_state->setErrorByName('logo_path', t('The custom logo path is invalid.'));
      }
    }
    if ($form_state->getValue('favicon_path')) {
      $path = alshaya_master_validate_path($form_state->getValue('favicon_path'));
      if (!$path) {
        $form_state->setErrorByName('favicon_path', t('The custom favicon path is invalid.'));
      }
    }

    // Handle email & mobile logo file upload and validation.
    foreach (ALSHAYA_MASTER_CUSTOM_LOGO_TYPES as $type) {
      $file = file_save_upload($type . '_logo_upload', $logo_validators, FALSE, 0);
      if (isset($file)) {
        // File upload was attempted.
        if ($file) {
          // Put the temporary file in form_values so we can save it on submit.
          $form_state->setValue($type . '_logo_upload', $file);
        }
        else {
          // File upload failed.
          $form_state->setErrorByName($type . '_logo_upload', t('The logo could not be uploaded.'));
        }
      }
    }
  }
}

/**
 * Save email logo for selected theme.
 */
function alshaya_master_save_system_theme_settings(&$form, FormStateInterface $form_state) {
  $theme = NULL;
  $values = $form_state->getValues();

  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['args'][0])) {
    $theme = $build_info['args'][0];
  }

  if (!empty($values['logo_upload'])) {
    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
    $source = $values['logo_upload']->getFileUri();
    $destination = file_build_uri(\Drupal::service('file_system')->basename($source));
    $values['default_logo'] = 0;
    $values['logo_path'] = \Drupal::service('file_system')->copy($source, $destination);
  }

  // If the user entered a path relative to the system files directory for
  // a logo or favicon, store a public:// URI so the theme system can handle it.
  if (!empty($values['logo_path'])) {
    $values['logo_path'] = alshaya_master_validate_path($values['logo_path']);
  }

  // Save different logo for language.
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $themeConfig = \Drupal::languageManager()->getLanguageConfigOverride($langcode, $theme . '.settings');
  $themeConfig->set('logo.path', $values['logo_path'])->save();
  $form_state->unsetValue('logo_path');
  $form_state->unsetValue('logo_upload');

  $uploads = [];
  // Save email and mobile logos.
  foreach (ALSHAYA_MASTER_CUSTOM_LOGO_TYPES as $type) {
    $logo_upload = $form_state->getValue($type . '_logo_upload');
    $form_state->unsetValue($type . '_logo_upload');

    $logo_path = $form_state->getValue($type . '_logo_path');
    $form_state->unsetValue($type . '_logo_path');

    // If the user uploaded a new logo or favicon, save it to a permanent
    // location and use it in place of the default theme-provided file.
    if (!empty($logo_upload)) {
      /** @var \Drupal\Core\File\FileSystemInterface $file_system */
      $source_path = $values['logo_upload']->getFileUri();
      $destination_path = file_build_uri(\Drupal::service('file_system')->basename($source_path));
      $logo_path = \Drupal::service('file_system')->copy($source_path, $destination_path);
    }

    if (!empty($logo_path) && empty($logo_upload)) {
      $logo_path = alshaya_master_validate_path($logo_path);
    }

    $uploads[$type] = $logo_path;
  }

  $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $config = \Drupal::configFactory()->getEditable('alshaya_master.theme.' . $theme . '.' . $lang);
  $config_save = FALSE;
  foreach ($uploads as $type => $logo_path) {
    if (!empty($logo_path)) {
      $config_save = TRUE;
      $config->set($type . '_logo_path', $logo_path);
      $config->set($type . '_logo_url', file_create_url($logo_path));
    }
  }

  if ($config_save) {
    $config->save();
  }

  Cache::invalidateTags(['config:system.site']);
}

/**
 * Helper function to Validate the file path.
 *
 * @param string $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 *
 * @return bool|string
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function alshaya_master_validate_path($path) {
  // Absolute local file paths are invalid.
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $realpath = \Drupal::service('file_system')->realpath($path);
  if ($realpath == $path) {
    return FALSE;
  }
  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }
  // Prepend 'public://' for relative file paths within public filesystem.
  /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
  $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
  if ($stream_wrapper_manager->getScheme($path) === FALSE) {
    $path = 'public://' . $path;
  }
  if (is_file($path)) {
    return $path;
  }
  return FALSE;
}

/**
 * Get email logo settings.
 *
 * @param null|string $theme
 *   The theme name for which we have return the logo.
 *
 * @return array
 *   Return array of logo path and url.
 */
function alshaya_master_get_email_logo($theme = NULL, $lang = NULL) {
  return alshaya_master_get_custom_logo('email', $theme, $lang);
}

/**
 * Get mobile logo settings.
 *
 * @param null|string $theme
 *   The theme name for which we have return the logo.
 *
 * @return array
 *   Return array of logo path and url.
 */
function alshaya_master_get_mobile_logo($theme = NULL, $lang = NULL) {
  if (empty($lang)) {
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  }
  return alshaya_master_get_custom_logo('mobile', $theme, $lang);
}

/**
 * Get email/mobile logo settings.
 *
 * @param null|string $theme
 *   The theme name for which we have return the logo.
 *
 * @return array
 *   Return array of logo path and url.
 */
function alshaya_master_get_custom_logo($type, $theme = NULL, $lang = NULL) {
  $cache = &drupal_static(__FUNCTION__, []);
  // If no key is given, use the current theme if we can determine it.
  if (!isset($theme)) {
    $theme = \Drupal::theme()->getActiveTheme()->getName();
  }

  if (empty($cache[$theme][$type])) {
    // Get email logo based on the language.
    if (!isset($lang)) {
      $lang = \Drupal::currentUser()->getPreferredLangcode();
    }
    $cache[$theme][$type] = [];
    $config = \Drupal::configFactory()->get('alshaya_master.theme.' . $theme . '.' . $lang);
    if ($cache[$theme][$type]['logo_path'] = $config->get($type . '_logo_path')) {
      $logo_url = file_create_url($config->get($type . '_logo_path'));
      $cache[$theme][$type]['logo_url'] = ($type === 'email')
        ? $logo_url
        : file_url_transform_relative($logo_url);
    }
  }

  return $cache[$theme][$type];
}

/**
 * Implements hook_block_access().
 */
function alshaya_master_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'breadcrumb' block on some pages.
  if ($operation == 'view' && $block->getPluginId() == 'system_breadcrumb_block') {
    $current_route = \Drupal::routeMatch()->getRouteName();
    $forbidden_routes = [
      'user.login',
      'user.register',
      'user.pass',
      'user.cancel_confirm',
      'user.reset.login',
      'user.reset.form',
      'user.reset',
    ];
    $front_page = \Drupal::service('path.matcher')->isFrontPage();
    return AccessResult::forbiddenIf(in_array($current_route, $forbidden_routes) || $front_page);
  }
}

/**
 * Implements hook_back_to_top_admin_prevent_alter().
 */
function alshaya_master_back_to_top_admin_prevent_alter(&$is_admin) {
  $route = \Drupal::routeMatch();
  // If user/edit route.
  if ($route->getRouteName() == 'entity.user.edit_form') {
    // If current user has access to administration theme, means user/edit will
    // open in the admin theme. In that case nothing to do.
    $current_user = \Drupal::currentUser();
    if (!$current_user->hasPermission('view the administration theme')) {
      $is_admin = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_master_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state) {
  $settings = \Drupal::configFactory()->getEditable('alshaya_master.settings');
  $form['js_disable_message'] = [
    '#type' => 'textarea',
    '#title' => t('Disabled js message'),
    '#description' => t('Message to be shown when JS is disabled on site'),
    '#default_value' => $settings->get('js_disable_message'),
  ];

  $form['sub_brand_logo_img'] = [
    '#type' => 'textfield',
    '#title' => t('Sub brand logo image'),
    '#description' => t('Path of the logo image for header. The same filename with PNG extension will be used for print confirmation page. Example - /themes/custom/transac/alshaya_american_eagle/aerie.svg. In order to this work, Both sub brabd logo image and link needs to be configured.'),
    '#default_value' => $settings->get('sub_brand_logo_img'),
  ];

  $form['sub_brand_logo_link'] = [
    '#type' => 'textfield',
    '#title' => t('Sub brand logo link'),
    '#description' => t('Link where the sub brand logo will redirect on click. This should be absolute url like "https://google.com".'),
    '#default_value' => $settings->get('sub_brand_logo_link'),
  ];

  $form['#submit'][] = '_alshaya_admin_site_information_submit';
}

/**
 * Submit handler for the site information form.
 */
function _alshaya_admin_site_information_submit($form, FormStateInterface $form_state) {
  $disable_message = $form_state->getValue('js_disable_message');
  \Drupal::configFactory()->getEditable('alshaya_master.settings')
    ->set('js_disable_message', $disable_message)
    ->set('sub_brand_logo_img', $form_state->getValue('sub_brand_logo_img'))
    ->set('sub_brand_logo_link', $form_state->getValue('sub_brand_logo_link'))
    ->save();
}

/**
 * Implements hook_config_translation_info_alter().
 */
function alshaya_admin_config_translation_info_alter(&$info) {
  $info['system.site_information_settings']['names'][] = 'alshaya_master.settings';
}

/**
 * Implements hook_element_info_alter().
 */
function alshaya_master_element_info_alter(array &$info) {
  if (isset($info['mobile_number']['#process'])) {
    $info['mobile_number']['#process'][] = '_alshaya_master_mobile_number_process';
    $info['mobile_number']['#value_callback'] = '_alshaya_master_mobile_number_value_callback';
    array_unshift($info['mobile_number']['#element_validate'], '_alshaya_master_mobile_number_validate');
  }
}

/**
 * Processor for the mobile number field to disable the country code.
 */
function _alshaya_master_mobile_number_process(array &$element, FormStateInterface $form_state) {
  if (strpos($form_state->getBuildInfo()['form_id'], '_api_form') > -1) {
    return $element;
  }

  $default_site_country = _alshaya_custom_get_site_level_country_code();

  // Set default country as per site.
  $element['country-code']['#value'] = $default_site_country;
  $options = $element['country-code']['#options'];
  $element['country-code']['#options'] = [$default_site_country => $options[$default_site_country]];
  $element['country-code']['#attributes']['class'][] = 'hidden-important';

  $element['mobile']['#type'] = 'tel';
  $element['mobile']['#required'] = $element['#required'];
  // Remove space to avoid issues in RTL.
  if (!empty($element['mobile']['#default_value'])) {
    $element['mobile']['#default_value'] = str_replace(' ', '', $element['mobile']['#default_value']);
  }

  // Add maxlength from config.
  // This config doesn't contain any form as length of mobile number is not
  // expected to change except for changing country. Changing country is a major
  // change and also means new install so it can be set in specific country
  // specific module install.
  $mobile_number_settings = \Drupal::config('alshaya_master.mobile_number_settings');
  $element['mobile']['#maxlength'] = $mobile_number_settings->get('maxlength');

  // Make mobile number required only for few forms.
  $mobile_number_required_forms = [
    'profile_address_book_add_form',
    'profile_address_book_edit_form',
    'profile_address_book_form',
    'multistep_checkout',
  ];

  if (in_array($form_state->getBuildInfo()['form_id'], $mobile_number_required_forms)) {
    $element['mobile']['#attributes']['data-msg-required'] = t('@title is required.', ['@title' => $element['#title']]);
    $element['mobile']['#required'] = TRUE;
  }

  // Add input prefix library.
  $element['#attached']['library'][] = 'alshaya_master/mobile_number';

  // Country code.
  $country_mobile_code = alshaya_master_get_country_mobile_code();
  if ($country_mobile_code) {
    $element['mobile']['#attributes']['mobile-prefix'] = $country_mobile_code;
    $element['#attached']['drupalSettings']['alshaya_mobile_prefix'] = $country_mobile_code;
  }

  return $element;
}

/**
 * Validate callback: To remove the country code prefix added in mobile field.
 */
function _alshaya_master_mobile_number_validate(array &$element, FormStateInterface $form_state) {
  $tree_parents = $element['#parents'];
  // Country code.
  $country_mobile_code = alshaya_master_get_country_mobile_code();
  // Get user input as validation function is using the input value to validate.
  // @see \Drupal\mobile_number\Element\MobileNumber::mobileNumberValidate
  $input = $form_state->getUserInput();
  $pp = NestedArray::getValue($input, $tree_parents);
  if (empty($pp)) {
    return;
  }

  // Remove country code from the value, as we are using a single input for
  // country code and mobile number or local number.
  if (!empty($pp['local_number'])) {
    $pp['local_number'] = str_replace($country_mobile_code, '', $pp['local_number']);
  }
  $pp['mobile'] = str_replace($country_mobile_code, '', $pp['mobile']);
  NestedArray::setValue($input, $tree_parents, $pp);
  $form_state->setUserInput($input);
}

/**
 * Value callback for the mobile number field to remove the prefix.
 */
function _alshaya_master_mobile_number_value_callback(&$element, $input, FormStateInterface $form_state) {
  /** @var \Drupal\mobile_number\MobileNumberUtilInterface $util */
  $util = \Drupal::service('mobile_number.util');

  if ($input) {
    $country = !empty($input['country-code']) ? $input['country-code'] : ((is_countable($element['#allowed_countries']) ? count($element['#allowed_countries']) : 0) == 1 ? key($element['#allowed_countries']) : NULL);

    // Remove the country code prefix added in mobile field.
    $country_mobile_code = alshaya_master_get_country_mobile_code($country, $util);
    $input['mobile'] = str_replace($country_mobile_code, '', $input['mobile']);

    $mobile_number = $util->getMobileNumber($input['mobile'], $country);
    $result = [
      'value' => $mobile_number ? $util->getCallableNumber($mobile_number) : '',
      'country' => $country,
      'local_number' => $input['mobile'],
      'tfa' => !empty($input['tfa']) ? 1 : 0,
      'verified' => 0,
      'verification_token' => !empty($input['verification_token']) ? $input['verification_token'] : NULL,
      'verification_code' => !empty($input['verification_code']) ? $input['verification_code'] : NULL,
    ];
  }
  else {
    $result = !empty($element['#default_value']) ? $element['#default_value'] : [];
  }

  return $result;
}

/**
 * Get country mobile code.
 *
 * @param null|string $country
 *   (optional) The site country code.
 * @param null|object $util
 *   (optional) The mobile utility functions.
 *
 * @return string
 *   Return country code.
 */
function alshaya_master_get_country_mobile_code($country = NULL, $util = NULL) {
  if (empty($country)) {
    $country = _alshaya_custom_get_site_level_country_code();
  }

  if (empty($util)) {
    $util = \Drupal::service('mobile_number.util');
  }

  return '+' . $util->getCountryCode($country);
}

/**
 * Helper function to convert date received from API to site timezone date.
 *
 * @param string $date
 *   Date string received from API.
 * @param string $format
 *   Drupal date format to get the return string.
 *
 * @return mixed
 *   Formated date in site's timezone.
 */
function alshaya_master_get_site_date_from_api_date($date, $format = '') {
  // @todo We need confirmation from Magento that we will always have UTC.
  // Get UTC timezone.
  $tz_utc = new DateTimeZone('UTC');

  // Get local site timezone.
  $tz_local = new DateTimeZone(date_default_timezone_get());

  // Get date object for date string.
  $dt = new DateTime($date, $tz_utc);

  // Convert the timezone.
  $dt->setTimezone($tz_local);

  // Return formated date in site's timezone.
  return \Drupal::service('date.formatter')->format($dt->getTimestamp(), $format);
}

/**
 * Implements hook_alshaya_master_post_drupal_install().
 */
function alshaya_master_alshaya_master_post_drupal_install() {
  // Update default site-mail on prod.
  if (alshaya_is_env_prod()) {
    $config = \Drupal::configFactory()->getEditable('system.site');
    $config->set('mail', 'no-reply@alshaya.com');
    $config->save();
  }

  // Disable unwanted core views.
  if ($views_to_disable = Settings::get('views_to_disable')) {
    $view_storage = \Drupal::service('entity_type.manager')->getStorage('view');
    foreach ($views_to_disable as $view_machine_name) {
      // Disable the view.
      if ($view = $view_storage->load($view_machine_name)) {
        $view->disable()->save();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_master_webform_submission_presave(EntityInterface $entity) {
  $data = $entity->getData();
  $value_changed = FALSE;
  // Mobile number field gives value as array and it gets stored in database
  // as "Array". so, we need to Walk through the submitted data and search for
  // mobile number value and replace the array with value string.
  array_walk($data, function (&$value) use (&$value_changed) {
    if (is_array($value) && isset($value['mobile'])) {
      $value_changed = TRUE;
      $value = $value['value'];
    }
  });

  if ($value_changed) {
    $entity->setData($data);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function alshaya_master_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Attach a library to element as widget not showing proper palette in arabic
  // version of site.
  if ($context['widget']->getPluginId() == 'jquery_minicolors_widget') {
    $element['#attached']['library'][] = 'alshaya_master/jquery_minicolor_arabic';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function alshaya_master_library_info_alter(&$libraries, $extension) {
  if ($extension == 'clientside_validation_jquery' && isset($libraries['jquery.validate'])) {
    // Add support for inline_form_errors module.
    // @todo Check if we can make the template/markup used by both
    // modules same and make it work without this JS.
    $libraries['jquery.validate']['dependencies'][] = 'alshaya_master/cv_ife';
  }
}

/**
 * Get array of all child terms recursively.
 *
 * @param int $tid
 *   Term id.
 *
 * @return array
 *   Array of Child tid + the passed tid.
 */
function _alshaya_master_get_recursive_child_terms($tid) {
  $terms = [];
  if (($taxonomy_term = Term::load($tid)) instanceof TermInterface) {
    $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $term_items = $storage->loadTree($taxonomy_term->bundle(), $taxonomy_term->id(), NULL, FALSE);
    $terms[] = $taxonomy_term->id();
    if (!empty($term_items)) {
      // Loop to get children term names.
      foreach ($term_items as $term_item) {
        $terms[] = $term_item->tid;
      }
    }
  }

  return $terms;
}

/**
 * Get the results from the views by name and display id.
 *
 * @param string $view_id
 *   View name.
 * @param string $display_id
 *   View display id.
 * @param array $args
 *   Arguments to pass to views.
 * @param int $page
 *   Page number.
 *
 * @return array|\Drupal\views\ResultRow[]
 *   Array of result.
 */
function _alshaya_master_get_views_result($view_id, $display_id, array $args = [], $page = 0) {
  $view = Views::getView($view_id);
  if ($view) {
    $view->setDisplay($display_id);
    $view->setArguments($args);
    $view->preExecute();
    $view->setCurrentPage($page);

    if ($view->execute()) {
      return $view->result;
    }
  }

  return [];
}

/**
 * Convert given string value to float.
 *
 * @param string $amount
 *   Value which needs to convert.
 *
 * @return float
 *   Return float value.
 */
function alshaya_master_convert_amount_to_float($amount) {
  return floatval(str_replace(',', '', $amount));
}

/**
 * Enable brand AMP theme and set AMP page logo and favicon.
 *
 * @param string $theme_name
 *   AMP theme name to enable.
 */
function _alshaya_master_initialize_amp($theme_name) {
  // Enable alshaya_amp module.
  \Drupal::service('module_installer')->install(['alshaya_amp']);

  // Enable and set default amp theme.
  \Drupal::service('theme_installer')->install([$theme_name], TRUE);
  \Drupal::configFactory()->getEditable('amp.theme')->set('amptheme', $theme_name)->save();

  // Get the current theme settings.
  $config = \Drupal::configFactory()->get(\Drupal::theme()->getActiveTheme()->getName() . '.settings')->get();
  // Set same to installed AMP theme.
  \Drupal::configFactory()->getEditable($theme_name . '.settings')->setData($config)->save();

  \Drupal::languageManager()
    ->getLanguageConfigOverride('ar', $theme_name . '.settings')
    ->setData([
      'logo' => [
        'path' => \Drupal::theme()->getActiveTheme()->getPath() . '/site-logo-ar.svg',
      ],
    ])
    ->save();
}

/**
 * Enable brand theme and set the site logo, favicon icon and email logo path.
 *
 * @param string $brand_theme
 *   Brand theme name to enable.
 */
function _alshaya_master_initialize_brand_theme($brand_theme) {
  // Enable and set brand theme as default theme.
  \Drupal::service('theme_installer')->install([$brand_theme], TRUE);
  \Drupal::configFactory()->getEditable('system.theme')->set('default', $brand_theme)->save();

  // Get current active theme.
  $active_theme = \Drupal::theme()->getActiveTheme();
  // Get current theme name.
  $current_theme = $active_theme->getName();
  // Default site logo path with default name.
  $site_logo = $active_theme->getPath() . '/site-logo';
  // Default site favicon path with default name.
  $site_favicon = $active_theme->getPath() . '/favicon';

  // Save default site logo.
  \Drupal::configFactory()->getEditable($current_theme . '.settings')
    ->setData([
      'logo' => [
        'path' => $site_logo . '.svg',
      ],
    ])
    ->save();
  // Save arabic site logo.
  \Drupal::languageManager()
    ->getLanguageConfigOverride('ar', $current_theme . '.settings')
    ->setData([
      'logo' => [
        'path' => $site_logo . '-ar.svg',
      ],
    ])
    ->save();

  // Save default site favicon.
  \Drupal::configFactory()->getEditable($current_theme . '.settings')
    ->set('favicon', ['path' => $site_favicon . '.ico'])
    ->save();

  // Save default logo for email.
  \Drupal::configFactory()->getEditable('alshaya_master.theme.' . $current_theme . '.en')
    ->set('email_logo_path', $site_logo . '.png')
    ->save();
  // Save arabic logo for email.
  \Drupal::configFactory()->getEditable('alshaya_master.theme.' . $current_theme . '.ar')
    ->set('email_logo_path', $site_logo . '-ar.png')
    ->save();
}

/**
 * Implements hook_acquia_search_get_list_of_possible_cores_alter().
 */
function alshaya_master_acquia_search_get_list_of_possible_cores_alter(&$possible_core_ids, $core_service) {

  // phpcs:ignore
  global $acsf_site_code;

  $ah_env = preg_replace('@[^a-zA-Z0-9]+@', '', $core_service['ah_env']);

  // We want to use SOLR from 01 stack all the time.
  if (!str_starts_with($ah_env, '01')) {
    $ah_env = '01' . substr($ah_env, 2);
  }

  // During the production deployment, `01update` env is used and there we
  // don't have appropriate solr cores. So use `01live` solr.
  if ($ah_env == '01update') {
    $ah_env = '01live';
  }
  // For non-prod env, we have env likes `01dev3up`, `01qaup` which are used
  // during release/deployment. We just remove last `up` from the env name
  // to use the original env. For example - original env for `01dev3up` will
  // be `01dev3`.
  elseif (substr($ah_env, -2) == 'up') {
    $ah_env = substr($ah_env, 0, -2);
  }

  array_unshift($possible_core_ids, $core_service['identifier'] . '.' . $ah_env . '.' . $acsf_site_code);
}

/**
 * Get sub brand logo and images.
 *
 * @return array
 *   Sub brand logo and link.
 */
function _alshaya_master_get_subbrand_logo_image_link() {
  $data = [];
  $settings = \Drupal::config('alshaya_master.settings');
  $sub_brand_logo_img = $settings->get('sub_brand_logo_img');
  $sub_brand_logo_link = $settings->get('sub_brand_logo_link');
  if ($sub_brand_logo_img && $sub_brand_logo_link) {
    $data['sub_brand_logo_img'] = $sub_brand_logo_img;
    $data['sub_brand_logo_link'] = $sub_brand_logo_link;
    $data['sub_brand_logo_title'] = t('Sub brand logo title');
    $data['sub_brand_logo_alt'] = t('Sub brand logo alt');
  }

  return $data;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function alshaya_master_preprocess_html(&$variables) {
  $variables['#attached']['library'][] = 'alshaya_master/common_fixes';
  // Add Alshaya library for managing local storage.
  $variables['#attached']['library'][] = 'alshaya_master/local_storage_manager';
}
