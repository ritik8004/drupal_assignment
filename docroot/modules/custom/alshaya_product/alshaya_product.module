<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Database\Query\SelectInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_views_query_alter().
 */
function alshaya_product_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'taxonomy_term' && \Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    // Get the term from args.
    /** @var \Drupal\taxonomy\Entity\Term $term */
    $term = \Drupal::request()->attributes->get('taxonomy_term');

    // Remove content for product category page.
    if ($term->getVocabularyId() == 'acq_product_category') {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if ($condition['field'] == 'taxonomy_index.tid = :taxonomy_index_tid') {
            $condition['value'][':taxonomy_index_tid'] = -1;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function alshaya_product_views_pre_execute(ViewExecutable $view) {
  if ($view->id() == 'taxonomy_term' && \Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    // Get the term from args.
    /** @var \Drupal\taxonomy\Entity\Term $term */
    $term = \Drupal::request()->attributes->get('taxonomy_term');

    // Remove feeds for product category page.
    if ($term->getVocabularyId() == 'acq_product_category') {
      unset($view->feedIcons);
    }
  }
}

/**
 * Implements hook_alshaya_i18n_onetime_translation_add().
 */
function alshaya_product_alshaya_i18n_onetime_translation_add() {
  // Add translations for PLP page view.
  $product_list_view = \Drupal::languageManager()->getLanguageConfigOverride('ar', 'views.view.alshaya_product_list');

  $product_list_view->set('display.default.display_options.exposed_form.options.exposed_sorts_label', 'رتب حسب');
  $product_list_view->set('display.default.display_options.exposed_form.options.bef.sort.advanced.combine_rewrite', 'ما ننصح به تصاعدي|ما ننصح به
الاسم تصاعدي|الاسم من أ إلى ي
الاسم تنازلي|الاسم من ي إلى أ 
السعر تنازلي|السعر من الأعلى إلى الأدنى
السعر تصاعدي|السعر من الأدنى إلى الأعلى');
  $product_list_view->set('display.default.display_options.exposed_form.options.sort_asc_label', 'تصاعدي');
  $product_list_view->set('display.default.display_options.exposed_form.options.sort_desc_label', 'تنازلي');
  $product_list_view->set('display.default.display_options.sorts.price.expose.label', 'السعر');
  $product_list_view->set('display.default.display_options.sorts.final_price.expose.label', 'السعر');
  $product_list_view->set('display.default.display_options.sorts.title.expose.label', 'الاسم');
  $product_list_view->set('display.default.display_options.header.result.content', '@total القطع');
  $product_list_view->set('display.default.display_options.pager.options.views_infinite_scroll.button_text', 'عرض المزيد');
  $product_list_view->set('display.block_1.display_options.sorts.nid.expose.label', 'ما ننصح به');

  $product_list_view->save();
}

/**
 * Implements hook_sharethis_attributes_alter().
 */
function alshaya_product_sharethis_attributes_alter(&$attributes) {
  // Add title to sharethis span.
  if (isset($attributes['displayText'])) {
    $attributes['title'] = ucfirst($attributes['displayText']);
  }
}

/**
 * Implements hook_search_api_db_query_alter().
 */
function alshaya_product_search_api_db_query_alter(SelectInterface &$db_query, QueryInterface $query) {
  if ($query->hasTag('views_alshaya_product_list')) {
    $sorts =& $query->getSorts();

    if (empty($sorts['stock'])) {
      $sorts = ['stock' => QueryInterface::SORT_DESC] + $sorts;
    }
  }
}
