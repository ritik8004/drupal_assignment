<?php

/**
 * @file
 * Module file.
 */

use Drupal\alshaya_acm_product\SkuManager;
use Drupal\node\NodeInterface;
use Drupal\search_api\IndexInterface;
use AlgoliaSearch\Client;

/**
 * Implements hook_search_api_algolia_sorts_alter().
 */
function alshaya_search_algolia_search_api_algolia_sorts_alter(array &$sorts, IndexInterface $index) {
  // We have added stock as ranking already in all the replicas.
  // It is added in views to keep consistency with solr / db.
  unset($sorts['stock']);

  // Sort by relevance is default index.
  if (isset($sorts['search_api_relevance'])) {
    unset($sorts['search_api_relevance']);
  }
}

/**
 * Implements hook_alshaya_reset_config_configs_to_reset_alter().
 */
function alshaya_search_algolia_alshaya_reset_config_configs_to_reset_alter(array &$reset) {
  $reset[] = 'search_api.server.algolia';
  $reset[] = 'block.block.autocompletewidgetofalgolia';
}

/**
 * Implements hook_acq_sku_base_fields_updated().
 */
function alshaya_search_algolia_acq_sku_base_fields_updated(array $fields, $op = 'add') {
  $backend_config = \Drupal::configFactory()->get('search_api.server.algolia')->get('backend_config');
  $client_config = \Drupal::configFactory()->get('search_api.index.alshaya_algolia_index')->get('options');
  $client = new Client($backend_config['application_id'], $backend_config['api_key']);
  $index_name = $client_config['algolia_index_name'];

  switch ($op) {
    case 'add':
      foreach ($fields as $field_code => $field) {
        if (empty($field['facet'])) {
          continue;
        }

        foreach (\Drupal::languageManager()->getLanguages() as $language) {
          $index = $client->initIndex($index_name . '_' . $language->getId());
          $settings = $index->getSettings();
          $settings['attributesForFaceting'][] = 'attr_' . $field_code;
          $index->setSettings($settings);

          foreach ($settings['replicas'] as $replica) {
            $replicaIndex = $client->initIndex($replica);
            $replicaSettings = $replicaIndex->getSettings();
            $replicaSettings['attributesForFaceting'][] = 'attr_' . $field_code;
            $replicaIndex->setSettings($replicaSettings);
          }
        }
      }

      break;

    case 'remove':
      // @TODO: Add code here to remove facet from Algolia settings.
      break;
  }

}

/**
 * Implements hook_search_api_algolia_objects_alter().
 */
function alshaya_search_algolia_search_api_algolia_objects_alter(array &$objects, IndexInterface $index, array $items) {
  if ($index->id() !== 'alshaya_algolia_index') {
    return;
  }

  // Disable alshaya_color_split hook calls.
  SkuManager::$colorSplitMergeChildren = FALSE;

  $logger = \Drupal::logger('alshaya_search_algolia');
  $algolia_index = \Drupal::service('alshaya_search_algolia.index_helper');
  foreach ($objects as $id => &$object) {
    $node = $items[$id]->getOriginalObject()->getValue();

    if (!$node instanceof NodeInterface || $node->bundle() != 'acq_product') {
      continue;
    }

    try {
      $algolia_index->processIndexItem($object, $node);
    }
    catch (\Throwable $e) {
      if ($e->getCode() != 200) {
        $logger->warning('Indexing failed for the node:@nid message:@message', [
          '@nid' => $object->id(),
          '@message' => $e->getMessage(),
        ]);
      }
      unset($objects[$id]);
    }
  }
}
