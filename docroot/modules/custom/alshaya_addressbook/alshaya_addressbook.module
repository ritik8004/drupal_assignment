<?php

/**
 * @file
 * Module file.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_addressbook_form_profile_address_book_add_form_alter(array &$form, FormStateInterface $form_state) {
  $user_id = \Drupal::currentUser()->getAccount()->id();
  /* @var \Drupal\user\Entity\User $user */
  $user = User::load($user_id);
  /** @var \Drupal\profile\Entity\ProfileInterface|bool $default_address */
  $default_address = \Drupal::entityTypeManager()->getStorage('profile')
    ->loadByUser($user, 'address_book');

  $form['#prefix'] = '<div id="address-book-form-open">';
  $form['#suffix'] = '</div>';

  // If user doesn't have any default address yet.
  if (!$default_address) {
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['set_default']['#value'] = t('add address');
  }
  else {
    $form['actions']['set_default']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('add address');
    $form['actions']['submit']['#ajax'] = [
      'callback' => 'alshaya_addressbook_save_ajax_callback',
      'wrapper' => 'address-book-form-open',
    ];
  }

  // Get the default country from 'admin/config/regional/settings' site
  // regional settings.
  $default_site_country = _alshaya_custom_get_site_level_country_code();

  // Set the default country.
  $form['field_address']['widget'][0]['address']['#default_value']['country_code'] = $default_site_country;

  // For profile add.
  _alshaya_addressbook_form_alter($form, $form_state);

}

/**
 * Submit Ajax callback to reload the page.
 */
function alshaya_addressbook_save_ajax_callback(&$form, FormStateInterface $form_state) {
  if (!$form_state->getErrors()) {
    $entity   = $form_state->getFormObject()->getEntity();
    $response = new AjaxResponse();
    $response->addCommand(new RedirectCommand(Url::fromRoute('entity.profile.type.address_book.user_profile_form', [
      'user'         => $entity->getOwnerId(),
      'profile_type' => $entity->bundle(),
    ])->toString()));
    return $response;
  }

  return $form;
}

/**
 * Processor for the country in address field.
 */
function _alshaya_addressbook_country_process(array &$element, FormStateInterface $form_state) {
  $default_country_code = $element['#default_value']['country_code'];
  $element['country_code'] = [
    '#type' => 'hidden',
    '#value' => $default_country_code,
  ];

  // Validation for first and last name.
  $element['given_name']['#element_validate'][] = '_alshaya_addressbook_firstname_validate';
  $element['given_name']['#maxlength'] = 255;
  $element['family_name']['#element_validate'][] = '_alshaya_addressbook_lastname_validate';
  $element['family_name']['#maxlength'] = 255;

  $element['locality'] = [
    '#type' => 'email',
    '#required' => TRUE,
    '#default_value' => $element['locality']['#default_value'],
    '#title' => t('Email', [], ['context' => 'Address label']),
    '#description' => t("We'll send your order confirmation here."),
  ];

  $element['given_name']['#title'] = t('First Name', [], ['context' => 'Address label']);
  $element['family_name']['#title'] = t('Last Name', [], ['context' => 'Address label']);

  // Only for 'Kuwait'.
  if ($default_country_code == 'KW') {
    $administrative_area_default_value = $element['administrative_area']['#default_value'];
    $element['administrative_area'] = [
      '#type' => 'select',
      '#title' => t('Area'),
      '#required' => TRUE,
      '#multiple' => FALSE,
      '#default_value' => $administrative_area_default_value,
      '#options' => ['' => t('Select Area')] + _alshaya_addressbook_area_list(),
    ];
    $element['address_line1']['#title'] = t('Street Name / No.', [], ['context' => 'Address label']);
    $element['dependent_locality']['#title'] = t('Building Name / No.', [], ['context' => 'Address label']);
    $element['organization']['#title'] = t('Block', [], ['context' => 'Address label']);
    $element['address_line2']['#title'] = t('Floor (Optional)', [], ['context' => 'Address label']);
    $element['address_line2']['#title_display'] = 'before';
  }

  // Adding mobile number.
  $mobile_number = [
    'mobile_number' => [
      '#type' => 'mobile_number',
      '#title' => t('Mobile Number'),
      '#verify' => 0,
      '#tfa' => 0,
      '#required' => TRUE,
    ],
  ];

  if (!empty($form_state->getTemporaryValue('default_value_mobile'))) {
    $mobile_number['mobile_number']['#default_value'] = $form_state->getTemporaryValue('default_value_mobile');
  }

  // Adding mobile number field to appropriate position.
  $element = _alshaya_addressbook_array_insert($element, $mobile_number, 'locality');

  $element['#prefix'] = '<div class="address-book-address">';
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Validation for first name.
 */
function _alshaya_addressbook_firstname_validate($element, FormStateInterface $form_state) {
  return _alshaya_addressbook_name_validation($element, $form_state, 'given_name');
}

/**
 * Validation for the last name.
 */
function _alshaya_addressbook_lastname_validate($element, FormStateInterface $form_state) {
  return _alshaya_addressbook_name_validation($element, $form_state, 'family_name');
}

/**
 * Adding validation for the name.
 */
function _alshaya_addressbook_name_validation($element, FormStateInterface $form_state, $field_name) {
  $string = $element['#default_value'];
  if (preg_match('/[#$\_\!@%^&*()+=\-\[\]\';,.\/{}|":<>?~\\\\]/', $string)) {
    $field_name = $field_name == 'given_name' ? 'first name' : 'last name';
    $form_state->setError($element, t('Invalid @name', ['@name' => $field_name]));
  }

  return $element;
}

/**
 * Implements hook_element_info_alter().
 */
function alshaya_addressbook_element_info_alter(array &$info) {
  if (isset($info['address']['#process'])) {
    $info['address']['#process'][] = '_alshaya_addressbook_country_process';
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function alshaya_addressbook_profile_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // If the address is default address, not allow user to delete it.
  if ($operation == 'delete' && $entity->bundle() == 'address_book') {
    if ($entity->isDefault() && $entity->getOwnerId() == $account->id()) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Implements hook_user_view_alter().
 */
function alshaya_addressbook_user_view_alter(&$build) {
  // Remove/Hide the 'address_book' info on 'user/uid' page.
  if (isset($build['profile_address_book'])) {
    unset($build['profile_address_book']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_addressbook_form_profile_address_book_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#prefix'] = '<div id="address-book-form-open">';
  $form['#suffix'] = '</div>';

  // Save profile form.
  $form['actions']['submit']['#ajax'] = [
    'callback' => 'alshaya_addressbook_save_ajax_callback',
    'wrapper' => 'address-book-form-open',
  ];

  $form['actions']['set_default']['#access'] = FALSE;
  // Set default profile profile form.
  $form['actions']['set_default']['#ajax'] = [
    'callback' => 'alshaya_addressbook_save_ajax_callback',
    'wrapper' => 'address-book-form-open',
  ];

  // For profile edit.
  _alshaya_addressbook_form_alter($form, $form_state);

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_addressbook_form_profile_address_book_form_alter(array &$form, FormStateInterface $form_state) {
  // For profile form.
  _alshaya_addressbook_form_alter($form, $form_state);
}

/**
 * Alter the address book form.
 */
function _alshaya_addressbook_form_alter(array &$form, FormStateInterface $form_state) {
  // This is internal field to be used only for synchronisation with Magento.
  $form['field_address_id']['#access'] = \Drupal::currentUser()->hasPermission('administer users');

  $form['#validate'][] = '_alshaya_addressbook_mobile_process_validate';

  // Get default value.
  $default_value_mobile = $form['field_mobile_number']['widget'][0]['#default_value'];
  if (!empty($default_value_mobile) && is_array($default_value_mobile)) {
    $form_state->setTemporaryValue('default_value_mobile', $default_value_mobile);
  }
  $form['field_mobile_number']['#access'] = FALSE;
}

/**
 * Process the mobile number during validation check.
 */
function _alshaya_addressbook_mobile_process_validate($form, FormStateInterface $form_state) {
  // If no error.
  if (!$form_state->getErrors()) {
    $mobile = $form_state->getValue('field_address')[0]['address']['mobile_number'];
    $util = \Drupal::service('mobile_number.util');
    $mobile_country_code = $util->getCountryCode($mobile['country-code']);
    $value[] = [
      'country' => $mobile['country-code'],
      'local_number' => $mobile['mobile'],
      'value' => '+' . $mobile_country_code . $mobile['mobile'],
      'country-code' => $mobile['country-code'],
      'mobile' => $mobile['mobile'],
    ];
    $form_state->setValue('field_mobile_number', $value);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function alshaya_addressbook_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['profile']->setFormClass('delete', 'Drupal\alshaya_addressbook\Form\AlshayaProfileDeleteForm');
  $entity_types['profile']->setFormClass('add', 'Drupal\alshaya_addressbook\Form\AlshayaProfileForm');
  $entity_types['profile']->setFormClass('edit', 'Drupal\alshaya_addressbook\Form\AlshayaProfileForm');
}

/**
 * Implements hook_alshaya_i18n_onetime_translation_add().
 */
function alshaya_addressbook_alshaya_i18n_onetime_translation_add() {
  $strings = [
    'First name' => [
      'ar' => 'الاسم الأول',
      'context' => 'Address label',
    ],
    'Last name' => [
      'ar' => 'اسم العائلة',
      'context' => 'Address label',
    ],
    'Company' => [
      'ar' => 'الشركة',
      'context' => 'Address label',
    ],
    'Street address' => [
      'en' => 'Street',
      'context' => 'Address label',
    ],
    'Street address' => [
      'ar' => 'اسم الشارع',
      'context' => 'Address label',
    ],
    'Street name/number' => [
      'ar' => 'اسم الشارع',
      'context' => 'Address label',
    ],
    'City' => [
      'ar' => 'المدينة',
      'context' => 'Address label',
    ],
    'Emirate/city' => [
      'ar' => 'المدينة',
      'context' => 'Address label',
    ],
    'Postal code' => [
      'ar' => 'الرمز البريدي',
      'context' => 'Address label',
    ],
    'Building name/number' => [
      'ar' => 'رقم المبنى / اسم المبنى',
      'context' => 'Address label',
    ],
    'Block' => [
      'ar' => 'رقم القطعة',
      'context' => 'Address label',
    ],
    'Floor (optional)' => [
      'ar' => 'رقم الدور(اختياري)',
      'context' => 'Address label',
    ],
    'Select Area' => [
      'ar' => 'يرجى اختيار المنطقة / القطعة',
      'context' => 'Address label',
    ],
  ];

  // Save the translation.
  alshaya_i18n_save_translations($strings);
}

/**
 * Returns list of areas for a given country.
 *
 * @param string $country_code
 *   The country code.
 *
 * @return array
 *   List or areas.
 */
function _alshaya_addressbook_area_list($country_code = 'KW') {
  $term_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('area_list', 0, NULL, TRUE);
  $area_list = [];
  if (!empty($term_tree)) {
    /* \Drupal\taxonomy\Entity\Term $term */
    foreach ($term_tree as $term) {
      $term = \Drupal::service('entity.repository')->getTranslationFromContext($term);
      $area_list[$term->id()] = $term->getName();
    }
  }

  return $area_list;
}

/**
 * Insert an array into another array before/after a certain key.
 *
 * @param array $array
 *   Initial array.
 * @param array $pairs
 *   Added array.
 * @param mixed $key
 *   Position key.
 * @param string $position
 *   Position.
 *
 * @return array
 *   Updated array.
 */
function _alshaya_addressbook_array_insert(array $array, array $pairs, $key, $position = 'after') {
  $key_pos = array_search($key, array_keys($array));
  if ('after' == $position) {
    $key_pos++;
  }
  if (FALSE !== $key_pos) {
    $result = array_slice($array, 0, $key_pos);
    $result = array_merge($result, $pairs);
    $result = array_merge($result, array_slice($array, $key_pos));
  }
  else {
    $result = array_merge($array, $pairs);
  }
  return $result;
}

/**
 * Implements hook_alshaya_acm_customer_update_account_alter().
 */
function alshaya_addressbook_alshaya_acm_customer_update_account_alter(AccountInterface $user, array $customer) {
  /** @var \Drupal\alshaya_addressbook\AlshayaAddressBookManager $address_book_manager */
  $address_book_manager = \Drupal::service('alshaya_addressbook.manager');

  // Update privilege card number if available in customer data.
  if (isset($customer['addresses'])) {
    // Delete all existing addresses.
    $address_book_manager->deleteUserAddresses($user);

    foreach ($customer['addresses'] as $address) {
      $address_book_manager->saveUserAddressFromApi($user, $address);
    }
  }
}

/**
 * Implements template_preprocess_profile().
 */
function alshaya_addressbook_preprocess_profile__address_book(&$variables) {
  /* @var \Drupal\profile\Entity\Profile $profile */
  if (isset($variables['elements'], $variables['elements']['#profile'])) {
    $profile = $variables['elements']['#profile'];
  }
  else {
    return;
  }

  $values = $profile->get('field_address')->getValue();

  $variables['delivery_to'] = '';
  $variables['delivery_address'] = '';

  // Contact info.
  $telephone = $profile->get('field_mobile_number')->getValue();
  $variables['contact_no'] = '';

  if (isset($telephone[0]) && !empty($telephone[0]['value'])) {
    $variables['contact_no'] = $telephone[0]['value'];
  }

  if (isset($values[0])) {
    // If name is available.
    if (isset($values[0]['given_name']) && !empty($values[0]['given_name'])) {
      $variables['delivery_to'] = $values[0]['given_name'] . ' ' . $values[0]['family_name'];
    }

    // Address info.
    // @TODO: We should change keys here to match the validations doc so for FE
    // it becomes the final implementation and we then just need to change
    // value assignment here.
    $variables['delivery_address'] = [
      'organization' => $values[0]['organization'],
      'address_line1' => $values[0]['address_line1'],
      'address_line2' => $values[0]['address_line2'],
      'postal_code' => $values[0]['postal_code'],
      'sorting_code' => $values[0]['sorting_code'],
      'dependent_locality' => $values[0]['dependent_locality'],
      'locality' => $values[0]['locality'],
      'administrative_area' => '',
    ];

    $administrative_area = $values[0]['administrative_area'];
    if (!empty($administrative_area)) {
      $variables['administrative_area'] = $administrative_area;

      $term = Term::load($administrative_area);
      if ($term) {
        $term = \Drupal::service('entity.repository')->getTranslationFromContext($term);
        $variables['administrative_area'] = $term->getName();
      }
    }

    // Get country list.
    $country_list = \Drupal::service('address.country_repository')->getList();
    $variables['delivery_address']['country'] = $country_list[$values[0]['country_code']];

    // If profile is default profile.
    $variables['is_default_profile'] = $profile->isDefault() ?: '';

    // Operation links.
    $variables['edit_operation'] = '';
    $variables['delete_operation'] = '';
    $variables['set_default_operation'] = '';

    $current_user = \Drupal::currentUser();

    // Current language.
    $current_language = \Drupal::languageManager()->getCurrentLanguage();

    $route_match = \Drupal::routeMatch();
    if ($route_match->getRouteName() == 'acq_checkout.form') {
      $variables['deliver_to_this_address'] = [
        '#type' => 'link',
        '#title' => t('deliver to this address'),
        '#url' => Url::fromRoute('alshaya_acm_checkout.use_delivery_address',
          ['profile' => $profile->id()],
          [
            'attributes' => [
              'class' => ['use-ajax'],
            ],
          ]
        ),
      ];

      // Edit operation.
      if ($profile->access('update') && $profile->hasLinkTemplate('edit-form')) {
        // Edit operation.
        $variables['edit_operation'] = [
          'title' => t('Edit'),
          'url' => Url::fromRoute('alshaya_addressbook.edit_address_ajax',
            ['profile' => $profile->id(), 'js' => 'nojs'],
            [
              'attributes' => [
                'class' => ['use-ajax'],
                'rel' => 'address-book-form-wrapper',
              ],
              'query' => [
                'from' => 'checkout',
              ],
            ]
          ),
        ];
      }
    }
    else {
      // Edit operation.
      if ($profile->access('update') && $profile->hasLinkTemplate('edit-form')) {
        $variables['edit_operation'] = [
          'title' => t('Edit'),
          'url' => Url::fromRoute('alshaya_addressbook.edit_address_ajax',
            ['profile' => $profile->id(), 'js' => 'nojs'],
            [
              'attributes' => [
                'class' => ['use-ajax'],
                'rel' => 'address-book-form-wrapper',
              ],
            ]),
        ];
      }

      // Delete operation.
      if ($profile->access('delete') && $profile->hasLinkTemplate('delete-form')) {
        $variables['delete_operation'] = [
          'title' => t('Delete'),
          'url' => $profile->urlInfo('delete-form', [
            'attributes' => [
              'class' => ['use-ajax'],
              'data-dialog-type' => 'modal',
              'data-dialog-options' => Json::encode(['width' => '341']),
            ],
            'language' => $current_language,
          ]),
        ];
      }

      // Primary address operation.
      if ($profile->isDefault()) {
        $variables['set_default_operation'] = [
          '#markup' => '<span>' . t('Primary address') . '</span>',
        ];
      }
      else {
        $set_default_url = $profile->toUrl('set-default', [
          'query' => [
            'destination' => Url::fromRoute("entity.profile.type.address_book.user_profile_form", ["user" => $current_user->id(), "profile_type" => "address_book"])->toString(),
          ],
        ]);

        $variables['set_default_operation'] = [
          '#type' => 'link',
          '#title' => t('Primary address'),
          '#url' => $set_default_url,
        ];
      }
    }
  }

  $variables['#cache']['contexts'][] = 'route';
  $variables['#attached']['library'][] = 'core/drupal.ajax';
}
