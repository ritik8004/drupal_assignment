<?php

/**
 * @file
 * Module file for seo.
 */

use Drupal\alshaya_i18n\AlshayaI18nLanguages;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\acq_sku\Entity\SKU;

/**
 * Function to check if we should process GTM code for current request.
 *
 * @return bool
 *   Whether to process or not.
 */
function _alshaya_seo_process_gtm() {
  static $process = NULL;

  if ($process !== NULL) {
    return $process;
  }

  $currentUser = \Drupal::currentUser();
  $current_route_name = \Drupal::routeMatch()->getRouteName();

  $route_params = \Drupal::routeMatch()->getRawParameters();

  // Disable SEO modifications for non-customer users (admins).
  if ($currentUser->isAuthenticated() && !alshaya_acm_customer_is_customer($currentUser)) {
    $process = FALSE;
  }
  // Don't process for AJAX requests.
  elseif ((stripos(\Drupal::request()->getRequestUri(), 'ajax') > -1) && ($current_route_name !== 'views.ajax')) {
    $process = FALSE;
  }
  elseif (!\Drupal::service('router.admin_context')->isAdminRoute()
    || ($current_route_name === 'entity.user.edit_form')) {
    $process = TRUE;
  }
  else {
    // Return false by default.
    $process = FALSE;
  }

  return $process;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function alshaya_seo_preprocess_html(&$variables) {
  if (_alshaya_seo_process_gtm()) {
    /** @var \Drupal\alshaya_seo\AlshayaGtmManager $gtmManager */
    $gtm_manager = \Drupal::service('alshaya_seo.gtm_manager');
    $variables['attributes']['gtm-currency'] = \Drupal::configFactory()->get('acq_commerce.currency')->getRawData()['currency_code'];
    $variables['attributes']['gtm-container'] = $gtm_manager->convertCurrentRouteToGtmPageName($gtm_manager->getGtmContainer());
    $variables['attributes']['gtm-list-name'] = $gtm_manager->convertCurrentRouteToGtmListName($gtm_manager->getGtmContainer());
  }
}

/**
 * Implements hook_page_attachments().
 */
function alshaya_seo_page_attachments(array &$attachments) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }

  $gkg_config = \Drupal::config('alshaya_seo.google_knowledge_graph');

  $gkg_data = [];

  $gkg_data['@context'] = 'http://schema.org';
  // As checked in current prod, following text is not to be translated.
  $gkg_data['@type'] = 'Organization';
  $gkg_data['name'] = \Drupal::config('system.site')->get('name');
  $gkg_data['url'] = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
  $gkg_data['logo'] = Url::fromUserInput(theme_get_setting('logo.url'), ['absolute' => TRUE])->toString();

  // Add all sameAs links as provided in Config.
  if ($same_as = $gkg_config->get('same_as')) {
    foreach (explode(PHP_EOL, $same_as) as $same_as_link) {
      // Remove \r as well if string contains \r\n.
      $same_as_link = trim($same_as_link, "\r");

      if (!empty($same_as_link)) {
        $gkg_data['sameAs'][] = $same_as_link;
      }
    }
  }

  // Add all contact options. Basic check added to have contact_type set in
  // config to show the whole object.
  if ($gkg_config->get('contact_telephone')) {
    $contact['@type'] = 'ContactPoint';
    $contact['telephone'] = $gkg_config->get('contact_telephone');
    $contact['contactType'] = $gkg_config->get('contact_type');
    $contact['areaServed'] = $gkg_config->get('contact_areaserved');
    $contact['contactOption'] = $gkg_config->get('contact_option');

    // Add all site languages as available language.
    foreach (\Drupal::languageManager()->getLanguages() as $language) {
      $contact['availableLanguage'][] = $language->getName();
    }

    // As required, we want it to be array of objects.
    $gkg_data['contactPoint'][] = $contact;
  }

  // Add/Edit rich snippet for the PDP page.
  $gkg_data = _alshaya_seo_pdp_rich_snippet($gkg_data);

  $attachments['#attached']['html_head']['alshaya_seo'] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => [
        'type' => 'application/ld+json',
      ],
      // Adding PHP_EOL on both sides to make it look exactly same as expected.
      '#value' => PHP_EOL . json_encode($gkg_data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . PHP_EOL,
      '#weight' => 100,
    ],
    'gpg',
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_seo_page_attachments_alter(&$page) {
  if (_alshaya_seo_process_gtm()) {
    $page['#attached']['library'][] = 'alshaya_seo/gtm';
  }
}

/**
 * Implements hook_simple_sitemap_links_alter().
 */
function alshaya_seo_simple_sitemap_links_alter(&$links) {
  foreach ($links as &$link) {
    // We don't want to use langcode but want to use the country code for
    // that language. Altering data here.
    if (isset($link['alternate_urls'])) {
      $alternate_urls = $link['alternate_urls'];

      foreach ($alternate_urls as $language_id => $alternate_url) {
        if ($hreflangcode = AlshayaI18nLanguages::getHrefLangCountry($language_id)) {
          unset($link['alternate_urls'][$language_id]);
          $link['alternate_urls'][$hreflangcode] = $alternate_url;
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_node().
 */
function alshaya_seo_preprocess_node(&$variables) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }

  $view_mode = $variables['view_mode'];
  /** @var \Drupal\node\Entity\Node $entity */
  $entity = $variables['node'];

  if (($entity->bundle() === 'acq_product') &&
  (\Drupal::languageManager()->getCurrentLanguage()->getId() === $entity->language()->getId())) {
    /** @var \Drupal\alshaya_seo\AlshayaGtmManager $alshayaGtmManager */
    $gtm_manager = \Drupal::service('alshaya_seo.gtm_manager');
    $product_node = $gtm_manager->fetchProductGtmAttributes($entity, $view_mode);
    $variables['gtm_attributes']['#markup'] = $gtm_manager->convertAttrsToString($product_node);
  }
}

/**
 * Adding google rich snippet to product.
 *
 * @param array $snippet
 *   Rich snippet array.
 *
 * @return array
 *   Rich snippet array.
 */
function _alshaya_seo_pdp_rich_snippet(array $snippet = []) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.node.canonical') {
    /* @var \Drupal\node\Entity\Node $node */
    $node = $route_match->getParameter('node');
    // If 'product' node.
    if ($node && $node->getType() == 'acq_product') {
      if ($sku_field = $node->get('field_skus')) {
        $sku_id = $sku_field->first()->getString();
        $sku_entity = SKU::loadFromSku($sku_id);
        $product_title = "";

        // Including the utility file.
        \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
        $product_image = _alshaya_acm_get_product_display_image_url($sku_entity);

        $product_description = _alshaya_seo_get_node_meta_description();
        $final_price = "";
        $currency = \Drupal::configFactory()->get('acq_commerce.currency')->get('currency_code');

        // If sku name is available.
        if ($sku_entity->get('name')) {
          $product_title = $sku_entity->get('name')->getString();
        }

        // If final price is available.
        if ($sku_entity->get('final_price')) {
          $final_price = (float) $sku_entity->get('final_price')->getString();
        }

        // Prepare rich snippet.
        $snippet['@type'] = 'Product';
        $snippet['name'] = $product_title;
        $snippet['description'] = $product_description;
        $snippet['image'] = $product_image;
        // @Todo: Change this once brand field is available.
        $snippet['brand'] = [
          '@type' => 'Thing',
          'name' => \Drupal::config('system.site')->get('name'),
        ];
        $snippet['offers'] = [
          '@type' => "Offer",
          'priceCurrency' => $currency,
          'price' => $final_price,
        ];
      }
    }
  }

  return $snippet;
}

/**
 * Get the meta tag description.
 *
 * @return string
 *   Meta tag description.
 */
function _alshaya_seo_get_node_meta_description() {
  $meta_description = '';
  // Get meta tag for the route.
  $meta_tags = metatag_get_tags_from_route();
  if (!empty($meta_tags)) {
    $tags = $meta_tags['#attached']['html_head'];
    if (!empty($tags)) {
      foreach ($tags as $tag) {
        // If meta description tag.
        if ($tag[1] == 'description') {
          $meta_description = $tag[0]['#attributes']['content'];
        }
      }
    }
  }

  return $meta_description;
}

/**
 * Implements hook_theme().
 */
function alshaya_seo_theme($existing, $type, $theme, $path) {
  return [
    'alshaya_sitemap' => [
      'template' => 'alshaya-sitemap',
      'variables' => [
        'term_tree' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_datalayer_alter().
 */
function alshaya_seo_datalayer_alter(&$data_layer) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }

  /** @var \Drupal\alshaya_seo\AlshayaGtmManager $gtm_manager */
  $gtm_manager = \Drupal::service('alshaya_seo.gtm_manager');
  $currency_code = \Drupal::configFactory()->get('acq_commerce.currency')->getRawData()['currency_code'];

  try {
    $current_route = $gtm_manager->getGtmContainer();
    $general_dl_attributes = $gtm_manager->fetchGeneralPageAttributes($data_layer);

    // Preserve attributes before overriding the datalayer attributes.
    if (isset($data_layer['deliveryCity'])) {
      unset($data_layer['deliveryCity']);
    }

    if (isset($data_layer['deliveryArea'])) {
      $general_dl_attributes['deliveryArea'] = $data_layer['deliveryArea'];
    }

    $data_layer = $general_dl_attributes;

    $page_type = $gtm_manager->convertCurrentRouteToGtmPageName($gtm_manager->getGtmContainer());
    switch ($current_route['route_name']) {
      case 'entity.node.canonical':
        if (isset($current_route['route_params'], $current_route['route_params']['node'])) {
          /** @var \Drupal\node\Entity\Node $node */
          $node = $current_route['route_params']['node'];
          if ($node->bundle() === 'acq_product') {
            $attributes = $gtm_manager->fetchProductGtmAttributes($node, 'full');
            $processed_attributes = $gtm_manager->processAttributesForPdp($attributes);
            $data_layer = array_merge($data_layer, $processed_attributes);
            $data_layer['pageType'] = $gtm_manager->convertCurrentRouteToGtmPageName($gtm_manager->getGtmContainer());
          }
        }
        break;

      case 'acq_checkout.form':
        if (in_array($current_route['route_params']['step'],
          ['login', 'delivery', 'payment'], TRUE)) {

          $cart_item_attributes = $gtm_manager->fetchCartItemAttributes();

          $products = [];
          $data_layer['privilegeOrder'] = $cart_item_attributes['privilegeOrder'];
          $data_layer['privilegesCardNumber'] = $cart_item_attributes['privilegesCardNumber'];
          $step = isset($cart_item_attributes['step']) ? $cart_item_attributes['step'] : NULL;
          unset($cart_item_attributes['privilegeOrder'], $cart_item_attributes['privilegesCardNumber'], $cart_item_attributes['step']);

          foreach ($cart_item_attributes as $key => $cart_item) {
            $product = $gtm_manager->convertHtmlAttributesToDatalayer($cart_item);
            $product['quantity'] = $cart_item['quantity'];
            $products[] = $product;
          }

          // Set the correct step id.
          switch ($current_route['route_params']['step']) {
            case 'login':
              $step = 1;
              break;

            case 'delivery':
              $step = !empty($step) ? $step : 2;
              break;

            case 'payment':
              $step = 4;
              break;
          }

          $data_layer_cart = [
            'ecommerce' => [
              'currencyCode' => $currency_code,
              'checkout' => [
                'actionField' => [
                  'step' => $step,
                ],
                'products' => $products,
              ],
            ],
          ];

          $data_layer = array_merge($data_layer, $data_layer_cart);

        }
        elseif (in_array($current_route['route_params']['step'], ['confirmation'], TRUE)) {
          $order = _alshaya_acm_checkout_get_last_order_from_session();

          // We check if we have valid order id.
          if (empty($order)) {
            return;
          }

          $cookie_key = 'alshaya_gtm_confirmation_visited_' . $order['order_id'];

          $already_visited = (int) \Drupal::request()->cookies->get('Drupal_visitor_' . $cookie_key);

          // Send order complete confirmation to GTM only once.
          if ($already_visited !== 1) {
            $attributes = $gtm_manager->fetchCompletedOrderAttributes($order);
            $data_layer = array_merge($data_layer, $attributes['general']);

            $data_layer['privilegeOrder'] = $attributes['previlegeOrder'] ? 'order with privilege club' : 'order without privilege club';

            $data_layer['ecommerce'] = [
              'currencyCode' => $currency_code,
              'purchase' => [
                'actionField' => $attributes['actionField'],
                'products' => $attributes['products'],
              ],
            ];

            /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
            $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');
            if ($attributes['general']['deliveryOption'] === $checkout_options_manager->getClickandColectShippingMethod()) {
              $data_layer['event'] = 'VirtualPageView';
              $data_layer['virtualPageUrl'] = '/virtualpv/click-and-collect/step4/order-success';
              $data_layer['virtualPageTitle'] = 'C&C Step 4 – Order Success';
            }

            user_cookie_save([$cookie_key => 1]);
          }
        }

        break;
    }

    // Generic handling of page type for user pages.
    if ($page_type === 'not defined') {
      $current_route = $gtm_manager->getGtmContainer();
      $current_path = $current_route['pathinfo']->getpath();
      if (preg_match('/^\/user\/{user}\/(\S*)$/', $current_path, $matches)) {
        if (strpos($matches[1], '{') === 0) {
          $route_param_identifier = trim($matches[1], '{}');
          $route_param_val = $current_route['route_params'][$route_param_identifier]->id();
          $matches[1] = $route_param_val;
        }
        $page_type = 'user-' . $matches[1];
      }
    }

    $data_layer['pageType'] = $page_type;
    $page_dl_attributes = $gtm_manager->fetchPageSpecificAttributes($page_type, $current_route);
    $data_layer = array_merge($data_layer, $page_dl_attributes);
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->error('Error while fetching GTM attributes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Implements template preprocess_input().
 */
function alshaya_seo_preprocess_input(&$variables) {
  if ($variables['element']['#type'] === 'submit') {
    $value = $variables['element']['#value'];
    if (($value instanceof TranslatableMarkup) && (Unicode::strcasecmp($value->getUntranslatedString(), 'Add to cart') === 0)) {
      $variables['attributes']['gtm-type'] = 'add-cart-link';
    }
  }
}

/**
 * Implements template_preprocess_alshaya_cart_product_name().
 */
function alshaya_seo_preprocess_alshaya_cart_product_name(&$variables) {
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
  if (empty($variables['item_code'])) {
    return;
  }

  /** @var \Drupal\alshaya_seo\AlshayaGtmManager $gtmManager */
  $gtm_manager = \Drupal::service('alshaya_seo.gtm_manager');

  $sku_attributes = $gtm_manager->fetchSkuAtttributes($variables['item_code']);

  // Fetch product for this sku to get the category.
  $product_node = alshaya_acm_product_get_display_node($variables['item_code']);

  $sku_attributes['gtm-category'] = implode('/', $gtm_manager->fetchProductCategories($product_node));
  $sku_attributes['gtm-main-sku'] = $product_node->get('field_skus')->first()->getString();
  $sku_attributes['gtm-type'] = 'gtm-remove-cart-wrapper';
  $sku_attributes['gtm-size'] = isset($variables['sku_attributes'], $variables['sku_attributes']['attr_size']) ? $variables['sku_attributes']['attr_size']['value'] : '';

  $variables['gtm_attributes']['#markup'] = $gtm_manager->convertAttrsToString($sku_attributes);
}

/**
 * Implements template_preprocess_menu().
 */
function alshaya_seo_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'account') {
    foreach ($variables['items'] as $key => $item) {
      $my_account_menu_item_options['attributes']['class'] = [];
      $my_account_menu_item_options['attributes']['class'][] = strtolower(str_replace(' ', '', $item['title'])) . '-link';
      if (Unicode::strcasecmp($item['title'], t('Sign in')) === 0) {
        $my_account_menu_item_options['attributes']['class'][] = 'gtm-sign-in';
        $my_account_menu_item_options['attributes']['set_active_class'] = 1;
      }
      $variables['items'][$key]['url']->setOptions($my_account_menu_item_options);
    }
  }
  elseif ($variables['menu_name'] === 'footer') {
    foreach ($variables['items'] as $key => $item) {
      $footer_url_options = [
        'attributes' => [
          'class' => ['c-footer-menu__link'],
        ],
      ];

      $variables['items'][$key]['url']->setOptions($footer_url_options);
    }
  }
}

/**
 * Implements template_preprocess_alshaya_main_menu_level2().
 */
function alshaya_seo_preprocess_alshaya_main_menu_level2(&$variables) {
  $sub_nav_label = str_replace(' ', '-', strtolower($variables['data']['label']));
  $sub_nav_class = 'sub-nav-' . $sub_nav_label;
  $variables['data']['sub_nav_class'] = 'sub-nav-' . $sub_nav_label;
  foreach ($variables['data']['child'] as $key1 => $value) {
    $variables['data']['child'][$key1]['sub_nav_class'] = $sub_nav_class;
    foreach ($value['child'] as $key2 => $value2) {
      $variables['data']['child'][$key1]['child'][$key2]['sub_nav_class'] = $sub_nav_class;
    }
  }
}

/**
 * Implements template_preprocess_views_view_field().
 */
function alshaya_seo_preprocess_views_view_field(&$variables) {
  $field = $variables['field'];
  $view = $variables['view'];

  $is_product_level_3_view = ((($view->id() === 'product_category_level_3') && ($view->current_display === 'block_1')) ||
      ($view->id() === 'product_category_level_2_3') && ($view->current_display === 'block_2'));
  if (($is_product_level_3_view) &&
    ($field->getPluginId() === 'term_name')) {
    $args = $view->args;
    $parents = \Drupal::entityManager()->getStorage('taxonomy_term')->loadParents($args[0]);
    $parent_term = array_shift($parents);
    $term_classes = [];
    if ($parent_term) {
      $parent_term_name = $parent_term->getName();
      $term_classes[] = 'vert-nav-' . str_replace(' ', '-', strtolower($parent_term_name));
    }

    $term = $variables['row']->_entity;
    $term_class_name = str_replace(' ', '-', strtolower(preg_replace('/[^A-Za-z0-9-\s]/', '', $term->getName())));
    $term_classes[] = 'left-nav-' . $term_class_name;

    $options = [
      'attributes' => [
        'class' => $term_classes,
      ],
    ];

    $variables['output'] = $term->toLink($term->getName(), '', $options)->toString();
  }
}

/**
 * Implements hook_user_login().
 */
function alshaya_seo_user_login($account) {
  user_cookie_save(['alshaya_gtm_user_logged_in' => $account->id()]);
}

/**
 * Implements hook_user_logout().
 */
function alshaya_seo_user_logout($account) {
  user_cookie_save(['alshaya_gtm_user_logged_out' => $account->id()]);
}

/**
 * Implements hook_entity_presave().
 */
function alshaya_seo_entity_presave(EntityInterface $entity) {
  try {
    if ($entity->getEntityTypeId() === 'user' &&
      $entity->get('field_subscribe_newsletter')->getString()) {
      $original_entity = $entity->original;

      // Check if the user updated his subscription status from 0 to 1.
      if (($original_entity) &&
        ($original_entity->get('field_subscribe_newsletter')->getString() !== "1") &&
        ($entity->get('field_subscribe_newsletter')->getString() === "1")) {
        user_cookie_save(['alshaya_gtm_update_user_lead' => $entity->id()]);
      }
      // Handle registrations with subscrition checked.
      elseif (($original_entity === NULL) &&
        ($entity->get('field_subscribe_newsletter')->getString() === "1")) {
        user_cookie_save(['alshaya_gtm_update_user_lead' => $entity->id()]);
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->critical('Field subscribe newsletter not found.');
  }
}

/**
 * Implements hook_entity_insert().
 */
function alshaya_seo_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'user') {
    $path_info = \Drupal::request()->getPathInfo();

    try {
      if ($entity->get('field_subscribe_newsletter')->getString()) {
        user_cookie_save(['alshaya_gtm_create_user_lead' => $entity->id()]);
        user_cookie_save(['alshaya_gtm_create_user_pagename' => $path_info]);
      }
    }
    catch (Exception $e) {
      \Drupal::logger('alshaya_seo')->warning('Field subscribe newsletter not found.');
    }

    try {
      if ($entity->get('field_privilege_card_number')->getString()) {
        user_cookie_save([
          'alshaya_gtm_create_user_pc' => $entity->get('field_privilege_card_number')->getString(),
        ]);
      }
    }
    catch (Exception $e) {
      // Do nothing, loyalty might by off.
    }
  }
}
