<?php

/**
 * @file
 * Module file for seo transac.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\acq_commerce\SKUInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function alshaya_seo_transac_preprocess_html(&$variables) {
  if (_alshaya_seo_process_gtm()) {
    /** @var \Drupal\alshaya_seo_transac\AlshayaGtmManager $gtmManager */
    $gtm_manager = \Drupal::service('alshaya_seo_transac.gtm_manager');
    $variables['attributes']['gtm-currency'] = $gtm_manager->getGtmCurrency();
    $variables['attributes']['gtm-container'] = $gtm_manager->convertCurrentRouteToGtmPageName($gtm_manager->getGtmContainer());
    $variables['attributes']['gtm-list-name'] = $gtm_manager->convertCurrentRouteToGtmListName($gtm_manager->getGtmContainer());
    if ($variables['attributes']['gtm-list-name'] == 'PDP' || $variables['attributes']['gtm-list-name'] == 'CartPage') {
      $variables['attributes']['gtm-list-name'] = $variables['attributes']['gtm-list-name'] . '-placeholder';
    }
    \Drupal::moduleHandler()->invokeAll('gtm_list_name_alter', [&$variables['attributes']['gtm-list-name']]);
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_seo_transac_page_attachments_alter(&$page) {
  if (_alshaya_seo_process_gtm()) {
    $page['#attached']['library'][] = 'alshaya_seo_transac/gtm';
    $page['#attached']['drupalSettings']['gtm']['disabled_vars'] = \Drupal::config('alshaya_seo.disabled_gtm_vars')->get('disabled_vars');
  }
}

/**
 * Implements template_preprocess_node().
 */
function alshaya_seo_transac_preprocess_node(&$variables) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }

  $view_mode = $variables['view_mode'];
  /** @var \Drupal\node\Entity\Node $entity */
  $entity = $variables['node'];

  if (($entity->bundle() === 'acq_product') &&
    (\Drupal::languageManager()->getCurrentLanguage()->getId() === $entity->language()->getId())) {
    /** @var \Drupal\alshaya_seo_transac\AlshayaGtmManager $alshayaGtmManager */
    $gtm_manager = \Drupal::service('alshaya_seo_transac.gtm_manager');
    $product_node = $gtm_manager->fetchProductGtmAttributes($entity, $view_mode);
    $variables['gtm_attributes']['#markup'] = $gtm_manager->convertAttrsToString($product_node);
  }
}

/**
 * Implements hook_alshaya_acm_product_add_to_cart_ajax_response_alter().
 */
function alshaya_seo_transac_alshaya_acm_product_add_to_cart_ajax_response_alter(AjaxResponse $response, SKUInterface $sku, SKUInterface $selected_sku = NULL) {
  // Update title of parent product based on selected sku if available.
  if ($selected_sku instanceof SKUInterface) {
    $final_price = (float) $selected_sku->get('final_price')->getString();
    $response->addCommand(
      new InvokeCommand(
        'article[gtm-type="gtm-product-link"]',
        'attr',
        ['gtm-product-sku', $selected_sku->getSku()]
      )
    );
    $response->addCommand(
      new InvokeCommand(
        'article[gtm-type="gtm-product-link"]',
        'attr',
        ['gtm-price', _alshaya_acm_format_price_with_decimal($final_price)]
      )
    );
  }
}

/**
 * Adding google rich snippet to product.
 *
 * @param array $snippet
 *   Rich snippet array.
 *
 * @return array
 *   Rich snippet array.
 */
function _alshaya_seo_transac_pdp_rich_snippet(array $snippet = []) {
  $route_match = \Drupal::routeMatch();
  $gtm_manager = \Drupal::service('alshaya_seo_transac.gtm_manager');

  /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
  $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

  if ($route_match->getRouteName() == 'entity.node.canonical') {
    /* @var \Drupal\node\Entity\Node $node */
    $node = $route_match->getParameter('node');
    // If 'product' node.
    if ($node && $node->getType() == 'acq_product') {
      /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
      $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

      $sku_id = $skuManager->getSkuForNode($node);
      if ($sku_id) {
        $sku_entity = SKU::loadFromSku($sku_id);

        if (empty($sku_entity)) {
          return [];
        }

        $product_title = "";
        $product_image = $skuImagesManager->getFirstImageUrl($sku_entity, TRUE);
        $product_description = _alshaya_seo_get_node_meta_description();
        $final_price = "";
        $currency = $gtm_manager->getGtmCurrency();

        // If sku name is available.
        if ($sku_entity->get('name')) {
          $product_title = $sku_entity->get('name')->getString();
        }

        // If final price is available.
        if ($sku_entity->get('final_price')) {
          $final_price = (float) $sku_entity->get('final_price')->getString();
        }

        // Prepare rich snippet.
        $snippet['@type'] = 'Product';
        $snippet['name'] = $product_title;
        $snippet['description'] = $product_description;
        $snippet['image'] = $product_image;
        // @Todo: Change this once brand field is available.
        $snippet['brand'] = [
          '@type' => 'Thing',
          'name' => \Drupal::config('system.site')->get('name'),
        ];
        $snippet['offers'] = [
          '@type' => "Offer",
          'priceCurrency' => $currency,
          'price' => $final_price,
        ];
      }
    }
  }

  return $snippet;
}

/**
 * Implements hook_datalayer_alter().
 */
function alshaya_seo_transac_datalayer_alter(&$data_layer) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }

  /** @var \Drupal\alshaya_seo_transac\AlshayaGtmManager $gtm_manager */
  $gtm_manager = \Drupal::service('alshaya_seo_transac.gtm_manager');

  try {
    $current_route = $gtm_manager->getGtmContainer();
    $general_dl_attributes = $gtm_manager->fetchGeneralPageAttributes($data_layer);

    // Preserve attributes before overriding the datalayer attributes.
    if (isset($data_layer['deliveryCity'])) {
      $general_dl_attributes['deliveryCity'] = $data_layer['deliveryCity'];
    }

    if (isset($data_layer['deliveryArea'])) {
      $general_dl_attributes['deliveryArea'] = $data_layer['deliveryArea'];
    }

    $data_layer = $general_dl_attributes;

    $page_type = $gtm_manager->convertCurrentRouteToGtmPageName($gtm_manager->getGtmContainer());
    switch ($current_route['route_name']) {
      case 'entity.node.canonical':
        if (isset($current_route['route_params'], $current_route['route_params']['node'])) {
          /** @var \Drupal\node\Entity\Node $node */
          $node = $current_route['route_params']['node'];
          if ($node->bundle() === 'acq_product') {
            $attributes = $gtm_manager->fetchProductGtmAttributes($node, 'full');
            $processed_attributes = $gtm_manager->processAttributesForPdp($attributes);
            $data_layer = array_merge($data_layer, $processed_attributes);
            $data_layer['pageType'] = $gtm_manager->convertCurrentRouteToGtmPageName($gtm_manager->getGtmContainer());
          }
        }
        break;

      case 'acq_checkout.form':
        if (in_array($current_route['route_params']['step'],
          ['login', 'delivery', 'payment'], TRUE)) {

          $cart_item_attributes = $gtm_manager->fetchCartItemAttributes();

          $products = [];
          $data_layer['privilegeCustomer'] = $cart_item_attributes['privilegeCustomer'];
          $data_layer['privilegesCardNumber'] = $cart_item_attributes['privilegesCardNumber'];
          $step = isset($cart_item_attributes['step']) ? $cart_item_attributes['step'] : NULL;
          unset($cart_item_attributes['privilegeCustomer'], $cart_item_attributes['privilegesCardNumber'], $cart_item_attributes['step']);

          foreach ($cart_item_attributes as $key => $cart_item) {
            $product = $gtm_manager->convertHtmlAttributesToDatalayer($cart_item);
            $product['quantity'] = $cart_item['quantity'];
            $products[] = $product;
          }

          // Set the correct step id.
          switch ($current_route['route_params']['step']) {
            case 'login':
              $step = 1;
              break;

            case 'delivery':
              if (!empty($data_layer['deliveryArea'])) {
                $step = 3;
                $page_type = 'checkout sub-delivery page';
              }
              else {
                // For logged in users, we show delivery methods only when
                // click on 'Deliver this address' and thus will always be
                // step 2.
                if (\Drupal::currentUser()->isAuthenticated()) {
                  $step = 2;
                }
              }
              $step = !empty($step) ? $step : 2;
              break;

            case 'payment':
              $step = 4;
              break;
          }

          $data_layer_cart = [
            'event' => 'checkout',
            'ecommerce' => [
              'currencyCode' => $gtm_manager->getGtmCurrency(),
              'checkout' => [
                'actionField' => [
                  'step' => $step,
                ],
                'products' => $products,
              ],
            ],
          ];

          $data_layer = array_merge($data_layer, $data_layer_cart);

        }
        elseif (in_array($current_route['route_params']['step'], ['confirmation'], TRUE)) {
          $order = _alshaya_acm_checkout_get_last_order_from_session();

          // We check if we have valid order id.
          if (empty($order)) {
            return;
          }

          $cookie_key = 'alshaya_gtm_confirmation_visited_' . $order['order_id'];

          $already_visited = (int) \Drupal::request()->cookies->get('Drupal_visitor_' . $cookie_key);

          // Send order complete confirmation to GTM only once.
          if ($already_visited !== 1) {
            $attributes = $gtm_manager->fetchCompletedOrderAttributes($order);
            $data_layer = array_merge($data_layer, $attributes['general']);

            $data_layer['privilegeOrder'] = $attributes['privilegeCustomer'] ? 'order with privilege club' : 'order without privilege club';

            $data_layer['ecommerce'] = [
              'currencyCode' => $gtm_manager->getGtmCurrency(),
              'purchase' => [
                'actionField' => $attributes['actionField'],
                'products' => $attributes['products'],
              ],
            ];

            /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
            $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');
            if ($attributes['general']['deliveryOption'] === $checkout_options_manager->getClickandColectShippingMethod()) {
              $data_layer['event'] = 'VirtualPageView';
              $data_layer['virtualPageUrl'] = '/virtualpv/click-and-collect/step4/order-success';
              $data_layer['virtualPageTitle'] = 'C&C Step 4 – Order Success';
            }

            user_cookie_save([$cookie_key => 1]);
          }
        }
        break;
    }

    // Generic handling of page type for user pages.
    $current_route = $gtm_manager->getGtmContainer();
    $current_path = $current_route['pathinfo']->getpath();

    // General logic to calculate page-type in case of my account pages &
    // undefined pages.
    $path_parts = explode('/', $current_path);

    // Remove characters not suitable for page type.
    $blacklisted_user_url_parts = [
      'user',
      '',
      '{user}',
      '{order_id}',
      '{uid}',
      '{timestamp}',
      '{hash}',
      'new',
      '{profile_type}',
      '{webform}',
    ];

    foreach ($path_parts as $key => $part) {
      if (is_numeric($part) ||
        (in_array($part, $blacklisted_user_url_parts))) {
        unset($path_parts[$key]);
      }
    }

    if (strpos($current_path, '/user') === 0) {
      $page_type = trim('myaccount ' . implode('', $path_parts));
    }
    elseif ($page_type === 'not defined') {
      $page_type = ltrim(implode('-', $path_parts), '-');
    }

    $data_layer['pageType'] = $page_type;
    $page_dl_attributes = $gtm_manager->fetchPageSpecificAttributes($page_type, $current_route);
    $data_layer = array_merge($data_layer, $page_dl_attributes);

    // Unset few attributes specifically for HD page.
    if (($current_route['route_name'] === 'acq_checkout.form') &&
      ($current_route['route_params']['step'] == 'delivery') &&
      (!isset($current_route['query']['method']) || $current_route['query']['method'] === 'hd')) {
      unset($data_layer['storeAddress'], $data_layer['storeLocation'], $data_layer['deliveryOption'], $data_layer['deliveryType']);
    }
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->error('Error while fetching GTM attributes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Implements hook_page_attachments().
 */
function alshaya_seo_transac_page_attachments(array &$attachments) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }

  /** @var \Drupal\alshaya_seo_transac\AlshayaGtmManager $gtm_manager */
  $gtm_manager = \Drupal::service('alshaya_seo_transac.gtm_manager');

  try {
    $current_route = $gtm_manager->getGtmContainer();
    if ($current_route['route_name'] == 'acq_checkout.form' && in_array($current_route['route_params']['step'], ['confirmation'], TRUE)) {
      $order = _alshaya_acm_checkout_get_last_order_from_session();
      // We check if we have valid order id.
      if (empty($order)) {
        return;
      }

      $already_visited = (int) \Drupal::request()->cookies->get('Drupal_visitor_' . 'alshaya_gtm_confirmation_visited_' . $order['order_id']);
      // Send order complete confirmation data only once.
      if ($already_visited !== 1) {
        $attributes = $gtm_manager->fetchCompletedOrderAttributes($order);
        $attachments['#attached']['drupalSettings']['gtmOrderConfirmation'] = [
          'currencyCode' => $gtm_manager->getGtmCurrency(),
          'purchase' => [
            'actionField' => $attributes['actionField'],
            'products' => $attributes['products'],
          ],
        ];
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->error('Error while fetching GTM attributes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Implements template_preprocess_alshaya_cart_product_name().
 */
function alshaya_seo_transac_preprocess_alshaya_cart_product_name(&$variables) {
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
  if (empty($variables['item_code'])) {
    return;
  }

  /** @var \Drupal\alshaya_seo_transac\AlshayaGtmManager $gtmManager */
  $gtm_manager = \Drupal::service('alshaya_seo_transac.gtm_manager');

  $sku_attributes = $gtm_manager->fetchSkuAtttributes($variables['item_code']);

  // Fetch product for this sku to get the category.
  $product_node = alshaya_acm_product_get_display_node($variables['item_code']);

  if ($product_node instanceof NodeInterface) {
    $sku_attributes['gtm-category'] = implode('/', $gtm_manager->fetchProductCategories($product_node));

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_attributes['gtm-main-sku'] = $skuManager->getSkuForNode($product_node);
  }

  $sku_attributes['gtm-type'] = 'gtm-remove-cart-wrapper';
  $sku_attributes['gtm-size'] = isset($variables['sku_attributes'], $variables['sku_attributes']['attr_size']) ? $variables['sku_attributes']['attr_size']['value'] : '';

  $variables['gtm_attributes']['#markup'] = $gtm_manager->convertAttrsToString($sku_attributes);
}

/**
 * Implements hook_alshaya_seo_google_knowledge_graph_alter().
 */
function alshaya_seo_transac_alshaya_seo_google_knowledge_graph_alter(&$gkg_data) {
  $gkg_data = _alshaya_seo_transac_pdp_rich_snippet($gkg_data);
}

/**
 * Implements template_preprocess_alshaya_main_menu_level2().
 */
function alshaya_seo_transac_preprocess_alshaya_main_menu_level2(&$variables) {
  $sub_nav_label = str_replace(' ', '-', strtolower($variables['data']['label']));
  $sub_nav_class = 'sub-nav-' . $sub_nav_label;
  $variables['data']['sub_nav_class'] = 'sub-nav-' . $sub_nav_label;
  foreach ($variables['data']['child'] as $key1 => $value) {
    $variables['data']['child'][$key1]['sub_nav_class'] = $sub_nav_class;
    foreach ($value['child'] as $key2 => $value2) {
      $variables['data']['child'][$key1]['child'][$key2]['sub_nav_class'] = $sub_nav_class;
    }
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_seo_transac_theme($existing, $type, $theme, $path) {
  return [
    'alshaya_sitemap' => [
      'template' => 'alshaya-sitemap',
      'variables' => [
        'term_tree' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_seo_transac_form_acq_commerce_currency_settings_alter(&$form, FormStateInterface $form_state) {
  $form['gtm_currency_code'] = [
    '#type' => 'textfield',
    '#description' => t('Currency code to be sent to GTM. If this is not set, ISO Currency Code will be used for GTM.'),
    '#title' => t('GTM Currency Code'),
    '#required' => FALSE,
    '#default_value' => \Drupal::configFactory()->get('acq_commerce.currency')->get('gtm_currency_code'),
  ];
  $form['#submit'][] = '_alshaya_seo_transac_acq_commerce_currency_settings_submit_handler';
}

/**
 * Submit handler for acq_commerce_settings form.
 */
function _alshaya_seo_transac_acq_commerce_currency_settings_submit_handler(array &$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('acq_commerce.currency')
    ->set('gtm_currency_code', $form_state->getValue('gtm_currency_code'))
    ->save();
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_seo_transac_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $gtm_disabled_vars = \Drupal::config('alshaya_seo.disabled_gtm_vars')
    ->get('disabled_vars');
  if ($entity->bundle() == 'acq_product' && $view_mode == 'full' && !in_array('dimension6', $gtm_disabled_vars)) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $sku = $skuManager->getSkuForNode($entity);
    if (!empty($sku)) {
      // Always load the en values for GTM.
      $sku_entity = SKU::loadFromSku($sku);
      if ($sku_entity instanceof SKU) {
        // We always use en for tracking.
        if ($sku_entity->hasTranslation('en')) {
          $sku_entity = $sku_entity->getTranslation('en');
          $alshaya_product_size_config = $sku_entity->get('attr_size');
          $build['#attached']['drupalSettings']['alshaya_product_size_config'] = $alshaya_product_size_config;
        }
      }
    }
  }
}
