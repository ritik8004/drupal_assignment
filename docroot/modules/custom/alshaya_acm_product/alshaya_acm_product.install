<?php

/**
 * @file
 * Contains install, update, uninstall hooks for alshaya_acm_product module.
 */

use Drupal\acq_sku\ProductOptionsManager;
use Drupal\node\Entity\Node;

/**
 * Implements hook_update_N().
 *
 * Set the number of items to show in a gallery on PDP.
 */
function alshaya_acm_product_update_8020() {
  // Set default items from cross sell/up sell carausel for mobile.
  \Drupal::configFactory()->getEditable('alshaya_acm_product.settings')
    ->set('pdp_slider_items_settings.pdp_slider_items_number', 5)
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Install config for product display settings.
 */
function alshaya_acm_product_update_8019() {
  alshaya_config_install_configs(['alshaya_acm_product.display_settings'], 'alshaya_acm_product');
}

/**
 * Implements hook_update_N().
 */
function alshaya_acm_product_update_8018() {
  // Adding configuration for back_to_list.
  alshaya_config_install_configs(['alshaya_acm_product.settings'], 'alshaya_acm_product');
}

/**
 * Implements hook_post_update_NAME().
 *
 * Re-save index to create required tables.
 *
 * We do this in post update hook as it doesn't work together with config update
 * in normal hook_update.
 */
function alshaya_acm_product_post_update_8017(&$sandbox) {
  _alshaya_search_resave_indexes();
}

/**
 * Implements hook_update_N().
 *
 * Add color_description attribute in SKU and index it.
 * Add new setting 'list_view_auto_page_load_count'.
 */
function alshaya_acm_product_update_8017() {
  alshaya_config_install_configs(['alshaya_acm_product.sku_base_fields'], 'alshaya_acm_product');
  \Drupal::service('acq_sku.fields_manager')->addFields();

  // Since we know we will have both alshaya_product and alshaya_search enabled
  // for all transact sites, we do it here - one common place.
  alshaya_config_install_configs(['search_api.index.product'], 'alshaya_product');
  alshaya_config_install_configs(['search_api.index.acquia_search_index'], 'alshaya_search');

  // Update page load more count for SRP/PLP.
  alshaya_config_install_configs(['alshaya_acm_product.settings'], 'alshaya_acm_product');
}

/**
 * Implements hook_update_N().
 *
 * Update default items from cross sell/up sell carausel.
 */
function alshaya_acm_product_update_8016() {
  // Set default items from cross sell/up sell carausel for mobile.
  \Drupal::configFactory()->getEditable('alshaya_acm_product.settings')
    ->set('cross_up_sell_items_settings.pdp_carousel_items_size_0', 2)
    ->save();

  // Set default items from cross sell/up sell carausel for tablet.
  \Drupal::configFactory()->getEditable('alshaya_acm_product.settings')
    ->set('cross_up_sell_items_settings.pdp_carousel_items_size_768', 2)
    ->save();

  // Set default items from cross sell/up sell carausel for desktop.
  \Drupal::configFactory()->getEditable('alshaya_acm_product.settings')
    ->set('cross_up_sell_items_settings.pdp_carousel_items_size_1025', 3)
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Update settings for the carousel limit to show carousel every-time.
 */
function alshaya_acm_product_update_8015() {
  alshaya_config_install_configs(['alshaya_acm_product.carousel_settings'], 'alshaya_acm_product');
}

/**
 * Implements hook_update_N().
 *
 * Add new setting 'show_cart_form_in_related'.
 */
function alshaya_acm_product_update_8014() {
  alshaya_config_install_configs(['alshaya_acm_product.settings'], 'alshaya_acm_product');
}

/**
 * Implements hook_update_N().
 *
 * Adding settings for the carousel limit to show items.
 */
function alshaya_acm_product_update_8013() {
  alshaya_config_install_configs(['alshaya_acm_product.carousel_settings'], 'alshaya_acm_product', 'install');
}

/**
 * Implements hook_update_N().
 *
 * Add new 'image position on pdp' field to product settings form.
 */
function alshaya_acm_product_update_8012() {
  alshaya_config_install_configs(['alshaya_acm_product.settings'], 'alshaya_acm_product', 'install');
}

/**
 * Implements hook_update_N().
 *
 * Configure view mode for product teaser & SKU entity teaser.
 */
function alshaya_acm_product_update_8011() {
  // Re-install acq product teaser view mode to use sku teaser view mode.
  $install_configs = [
    'core.entity_view_display.node.acq_product.teaser',
  ];

  alshaya_config_install_configs($install_configs, 'acq_sku');

  // Re-install SKU simple/configurable view mode configs to hide display price
  // field. We using Product's price field to render the price everywhere.
  $optional_configs = [
    'core.entity_view_display.acq_sku.simple.teaser',
    'core.entity_view_display.acq_sku.configurable.teaser',
  ];

  alshaya_config_install_configs($optional_configs, 'acq_sku', 'optional');
}

/**
 * Implements hook_update_N().
 *
 * Moving size guide config to node.
 */
function alshaya_acm_product_update_8010() {
  // Import the new config for size guide.
  alshaya_config_install_configs(['alshaya_acm_product.size_guide'], 'alshaya_acm_product');
  // Fetch the old config for size guide.
  $config = \Drupal::config('alshaya_acm_product.settings');
  if ($config->get('size_guide_link') == TRUE) {
    // Create a new node with the size guide content.
    $node = Node::create([
      'type'  => 'static_html',
      'title' => 'Size guide content',
      'body'  => [
        'value' => $config->get('size_guide_modal_content.value'),
        'format' => 'mail_text',
      ],
    ]);
    $node->save();
    $config = \Drupal::languageManager()->getLanguageConfigOverride('ar', 'alshaya_acm_product.settings');
    if ($config->get('size_guide_modal_content.value')) {
      // Create a translation of the size guide node.
      $node_ar = $node->addTranslation('ar');
      $node_ar->title = 'Size guide content Arabic';
      $node_ar->body->value = $config->get('size_guide_modal_content.value');
      $node_ar->body->format = 'mail_text';
      $node_ar->save();
    }

    // Save the size guide node to the config.
    \Drupal::configFactory()->getEditable('alshaya_acm_product.size_guide')
      ->set('size_guide_enabled', TRUE)
      ->set('size_guide_modal_content_node', $node->id())
      ->save();
  }

  // Update the old config.
  alshaya_config_install_configs(['alshaya_acm_product.settings'], 'alshaya_acm_product');
}

/**
 * Implements hook_update_N().
 *
 * Set the config to display specifications to TRUE.
 */
function alshaya_acm_product_update_8009() {
  \Drupal::configFactory()->getEditable('alshaya_acm.settings')->set('pdp_show_specifications', TRUE)->save();
}

/**
 * Implements hook_update_N().
 *
 * Add config for pdp gallery pager limit.
 */
function alshaya_acm_product_update_8008() {
  alshaya_config_install_configs(['alshaya_acm_product.settings'], 'alshaya_acm_product', 'install');
}

/**
 * Implements hook_update_N().
 *
 * Change cardinality for article_warning field to 1.
 */
function alshaya_acm_product_update_8007() {
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
  alshaya_acm_product_update_field_cardinality_from_unlimited_to_unique('attr_article_warning', 'article_warning');
}

/**
 * Implements hook_update_N().
 *
 * Avoid rendering cross-sell by default.
 */
function alshaya_acm_product_update_8006() {
  \Drupal::configFactory()->getEditable('alshaya_acm.settings')->set('display_crosssell', FALSE)->save();
}

/**
 * Implements hook_update_N().
 *
 * Install the new fields.
 * Revert product_slider view to use nid instead of field_skus.
 */
function alshaya_acm_product_update_8005() {
  alshaya_config_install_configs(['alshaya_acm_product.sku_base_fields'], 'alshaya_acm_product');

  // Add base fields from the updated sku_base_fields config.
  \Drupal::service('acq_sku.fields_manager')->addFields();

  $reverter = \Drupal::service('config_update.config_update');
  $reverter->revert('view', 'product_slider');
}

/**
 * Implements hook_update_N().
 *
 * Add default value for new setting - list_view_items_per_page.
 */
function alshaya_acm_product_update_8004() {
  $settings = \Drupal::configFactory()->getEditable('alshaya_acm_product.settings');
  $settings->set('list_view_items_per_page', 30);
  $settings->save();
}

/**
 * Implements hook_update_N().
 *
 * Add the index key in config to use for adding data in parent for configurable
 * products.
 */
function alshaya_acm_product_update_8003() {
  $sku_base_fields_config = Drupal::configFactory()->getEditable('alshaya_acm_product.sku_base_fields');
  $sku_base_fields_config->set('fields.color.index', 1);
  $sku_base_fields_config->set('fields.size.index', 1);
  $sku_base_fields_config->save();
}

/**
 * Implements hook_update_N().
 *
 * Set weight on product options.
 */
function alshaya_acm_product_update_8002() {
  $option_sets = \Drupal::service('acq_commerce.api')->getProductOptions();

  $weight = 0;
  foreach ($option_sets as $options) {
    foreach ($options['options'] as $key => $value) {
      db_query(
        'UPDATE {taxonomy_term_field_data} AS ttfd
INNER JOIN {taxonomy_term__field_sku_attribute_code} ttfsac ON ttfsac.entity_id = ttfd.tid
INNER JOIN {taxonomy_term__field_sku_option_id} ttfsoi ON ttfsoi.entity_id = ttfd.tid
SET ttfd.weight = :weight
WHERE ttfd.vid = :vid AND ttfsac.field_sku_attribute_code_value = :attr_code AND ttfsoi.field_sku_option_id_value = :attr_value_id',
        [
          ':weight' => $weight++,
          ':vid' => ProductOptionsManager::PRODUCT_OPTIONS_VOCABULARY,
          ':attr_code' => $options['attribute_code'],
          ':attr_value_id' => $key,
        ]
      );
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Apply entity updates to apply t() for field labels in SKU entity.
 */
function alshaya_acm_product_update_8001() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Implements hook_install().
 */
function alshaya_acm_product_install() {
  // Make meta tags visible in form of acq_product.
  $product_config_factory = Drupal::configFactory()->getEditable('core.entity_form_display.node.acq_product.default');
  $content = $product_config_factory->get('content');
  $content['field_meta_tags'] = [
    'weight' => 110,
    'settings' => [],
    'third_party_settings' => [],
    'type' => 'metatag_firehose',
  ];
  $product_config_factory->set('content', $content);
  $product_config_factory->save();

  $product_config_factory = Drupal::configFactory()->getEditable('core.entity_view_display.node.acq_product.teaser');
  $content = $product_config_factory->get('content');
  $content['field_skus'] = [
    'weight' => 1,
    'settings' => [
      'view_mode' => 'teaser',
    ],
    'label' => 'hidden',
    'third_party_settings' => [],
    'type' => 'sku_formatter',
  ];
  $product_config_factory->set('content', $content);
  $product_config_factory->save();
}

/**
 * Implements hook_update_dependencies().
 */
function alshaya_acm_product_update_dependencies() {
  return [
    'alshaya_admin' => [
      '8002' => [
        'alshaya_acm_product' => '8010',
      ],
    ],
  ];
}
