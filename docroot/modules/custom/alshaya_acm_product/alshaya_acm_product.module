<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\block\Entity\Block;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\BaseCommand;
use Drupal\Core\Ajax\InsertCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\search_api\IndexInterface;
use Drupal\views\ViewExecutable;

/**
 * Alter the items that are indexed.
 *
 * @param \Drupal\search_api\IndexInterface $index
 *   The search index on which items will be indexed.
 * @param \Drupal\search_api\Item\ItemInterface[] $items
 *   The items that will be indexed.
 */
function alshaya_acm_product_search_api_index_items_alter(IndexInterface $index, array &$items) {
  // Get the configurable fields we want to capture separately as fields.
  $fields = \Drupal::config('alshaya_acm_product.sku_base_fields')->get('fields');
  $indexFields = array_filter($fields, function ($field) {
    return !empty($field['index']);
  });

  $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');

  foreach ($items as $item_id => $item) {
    $object = $item->getOriginalObject()->getValue();
    $type = $object->getEntityType()->id();
    $bundle = $object->bundle();

    // Deal with all indexable fields not available by default in configurable
    // parent but available in the variants.
    // Deal with final price of configurable that needs to come from variants.
    if ($type == 'node' && $bundle == 'acq_product') {
      $sku = $object->get('field_skus')->first()->getString();

      if (!empty($sku)) {
        $langcode = $object->language()->getId();
        $sku_entity = SKU::loadFromSku($sku, $langcode);

        if (empty($sku_entity)) {
          continue;
        }

        // For stock index, we use only in stock (2) or out of stock (0).
        // We will use 2 for not-buyable products too.
        // We will use 1 for all in pull mode.
        $in_stock = 0;

        if ($stock_mode == 'pull') {
          $in_stock = 1;
        }
        elseif (!alshaya_acm_product_is_buyable($sku_entity)) {
          $in_stock = 2;
        }
        elseif (alshaya_acm_get_product_stock($sku_entity)) {
          $in_stock = 2;
        }

        $item->getField('stock')->setValues([$in_stock]);

        if ($sku_entity->bundle() == 'configurable') {
          $data = [];
          $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
          $prices = $skuManager->getMinPrices($sku_entity);
          $min_final_price = $prices['final_price'];
          $child_sku_found = FALSE;
          foreach ($sku_entity->get('field_configured_skus') as $child_sku) {
            try {
              $child_sku_entity = SKU::loadFromSku($child_sku->getString(), $langcode);
            }
            catch (\Exception $e) {
              // Do nothing, child sku might not be available or deleted.
              continue;
            }

            // Additional check if it returns NULL.
            if (empty($child_sku_entity)) {
              continue;
            }
            else {
              $child_sku_found = TRUE;
            }

            // Loop through the indexable fields.
            foreach ($indexFields as $key => $field) {
              $field_key = 'attr_' . $key;
              $field_data = $child_sku_entity->get($field_key)->first();

              if (!empty($field_data)) {
                $field_value = $field_data->getString();
                $data[$key][$field_value] = $field_value;
              }
            }
          }

          // Do not index the product in case its linked with a configurable
          // SKU, but the config SKU is missing its children.
          if (!$child_sku_found) {
            unset($items[$item_id]);
          }

          // Load all item fields, we'll need it to check condition inside loop.
          $itemFields = $item->getFields();

          foreach ($data as $key => $values) {
            $field_key = 'attr_' . $key;

            // There is an issue with color field in indexes.
            // It is color in solr and attr_color in database index.
            // For all other fields it is attr_field in both indexes.
            if (isset($itemFields[$field_key])) {
              $item->getField($field_key)->setValues(array_keys($values));
            }
            elseif (isset($itemFields[$key])) {
              $item->getField($key)->setValues(array_keys($values));
            }
          }

          $item->getField('final_price')->setValues([$min_final_price]);
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_product_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['pdp_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'title_price' => NULL,
      'subtitle' => NULL,
      'options' => [],
    ],
  ];

  $items['basket_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'tooltip' => NULL,
      'type' => NULL,
    ],
  ];

  $items['sku_teaser'] = [
    'variables' => [
      'gallery' => NULL,
      'product_url' => NULL,
      'product_label' => NULL,
      'price_block' => NULL,
      'price_block_identifier' => NULL,
      'promotions' => NULL,
      'stock_placeholder' => NULL,
    ],
  ];

  $items['product_price_block'] = [
    'render element' => 'elements',
    'variables' => [
      'price' => NULL,
      'final_price' => NULL,
      'discount' => NULL,
      'vat_text' => NULL,
    ],
  ];

  $items['product_labels'] = [
    'render element' => 'elements',
    'variables' => [
      'labels' => NULL,
      'sku' => NULL,
      'mainsku' => NULL,
      'type' => NULL,
    ],
  ];

  $items['product_composition_markup'] = [
    'variables' => [
      'composition' => NULL,
    ],
  ];

  $items['product_article_warning_markup'] = [
    'variables' => [
      'warning' => NULL,
    ],
  ];

  $items['product_concept_markup'] = [
    'variables' => [
      'concepts' => NULL,
    ],
  ];

  $items['products_horizontal_slider'] = [
    'variables' => [
      'data' => NULL,
      'section_title' => NULL,
    ],
  ];

  return $items;
}

/**
 * Perform actions related to entity just added/updated/deleted.
 *
 * @param \Drupal\acq_sku\Entity\SKU $entity
 *   SKU for which display node is to be updated.
 */
function _alshaya_acm_product_post_sku_operation(SKU $entity) {
  // Don't do anything if search_api is not enabled.
  if (!\Drupal::moduleHandler()->moduleExists('search_api')) {
    return;
  }

  try {
    /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
    $plugin = $entity->getPluginInstance();

    if ($parent = $plugin->getParentSku($entity)) {
      // Clear cache for processed price of configurable.
      // Check for SkuManager::getMinPrices() for implementation.
      $cid = 'configurable_price:' . $parent->getSku();
      \Drupal::cache('configurable_price')->delete($cid);
    }

    // Check if node is available.
    if ($node = $plugin->getDisplayNode($entity)) {
      $node->original = clone $node;

      // Mark node for reindexing on add/update/delete of SKUs.
      search_api_entity_update($node);
    }
  }
  catch (\Exception $e) {
    // Translation might not be available.
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function alshaya_acm_product_acq_sku_insert(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function alshaya_acm_product_acq_sku_update(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function alshaya_acm_product_acq_sku_delete(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_acm_product_acq_sku_presave(SKUInterface $sku) {
  // Update composition field.
  $composition = json_decode($sku->get('attr_composition')->getString(), TRUE);
  if (!empty($composition)) {
    $sku->set('attr_composition', \Drupal::service('alshaya_acm_product.skumanager')
      ->transformCompositionArrayToList($composition));
  }
  else {
    if (!empty($sku->get('attr_composition')->getString())) {
      \Drupal::logger('alshaya_acm_product')->info('Invalid JSON. Unable to parse JSON data for SKU: @sku. JSON: @json', ['@sku' => $sku->getSku(), '@json' => $sku->get('attr_composition')->getString()]);
    }

    $sku->set('attr_composition', NULL);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (($entity->bundle() == 'acq_product')) {
    $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');

    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $sku = $entity->get('field_skus')->first()->getString();
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku));
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU) {
      $build['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

      // Make product node dependent on all child-skus in case of configurable
      // product.
      if (!empty($child_skus = $skuManager->getChildrenSkus($sku_entity))) {
        // Check for disabled simple SKUs on Magento. Make sure the sku entity
        // is available on Drupal before adding cache tag.
        if ($sku_entity_ids = $skuManager->getEntityIdsBySku($child_skus)) {
          foreach ($sku_entity_ids as $sku_entity_id) {
            $build['#cache']['tags'][] = 'acq_sku:' . $sku_entity_id;
          }
        }
      }

      if ($view_mode == 'search_result') {
        $build['labels'] = [
          '#theme' => 'product_labels',
          '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
          '#sku' => $sku_identifier,
          '#mainsku' => $sku_identifier,
          '#type' => 'plp',
        ];
      }
      elseif ($view_mode == 'full') {
        // Get cross sell block for the product.
        if (\Drupal::config('alshaya_acm.settings')->get('display_crosssell')) {
          if (!empty($cross_sell_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_CROSSSELL))) {
            $build['cross_sell'] = [
              '#theme' => 'products_horizontal_slider',
              '#data' => $skuManager->filterRelatedSkus(array_unique($cross_sell_skus)),
              '#section_title' => t('Customers also bought'),
            ];

            // Weight will have no effect later once template is modified.
            $build['cross_sell']['#weight'] = 11;
          }
        }

        if (!empty($up_sell_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_UPSELL))) {
          $build['up_sell'] = [
            '#theme' => 'products_horizontal_slider',
            '#data' => $skuManager->filterRelatedSkus(array_unique($up_sell_skus)),
            '#section_title' => t('You may also like'),
          ];
          // Weight will have no effect later once template is modified.
          $build['up_sell']['#weight'] = 10;
        }

        if (!empty($related_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_RELATED))) {
          $build['related'] = [
            '#theme' => 'products_horizontal_slider',
            '#data' => $skuManager->filterRelatedSkus(array_unique($related_skus)),
            '#section_title' => t('Related'),
          ];
          // Weight will have no effect later once template is modified.
          $build['related']['#weight'] = 11;
        }

        alshaya_acm_product_get_gallery($build, $sku_entity);

        $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

        $build['item_code']['#markup'] = $sku;

        $at_glance['label'] = [
          '#markup' => t('At a glance'),
        ];
        $at_glance['value'] = [
          '#markup' => $sku_entity->get('attr_at_glance')->getString(),
        ];

        $description['label'] = [
          '#markup' => t('Features and benefits'),
        ];

        $description_value = '';

        if ($body = $entity->get('body')->getValue()) {
          $description_value = $body[0]['value'];
        }

        if ($bullet_points = $sku_entity->get('attr_bullet_points')->getString()) {
          $description_value .= '<div class="bullet-points-wrapper">';
          $description_value .= $bullet_points;
          $description_value .= '</div>';
        }

        if ($concepts = $sku_entity->get('attr_concept')->getValue()) {
          $concepts_markup = [
            '#theme' => 'product_concept_markup',
            '#concepts' => $concepts,
          ];

          $description_value .= render($concepts_markup);
        }

        // Render the wrapper div for composition always so that the same can be
        // filled with data on variant selection.
        $search_direction = $sku_entity->getType() == 'configurable' ? 'children' : 'self';
        $composition = $skuManager->fetchProductAttribute($sku_entity, 'attr_composition', $search_direction);
        $composition_markup = [
          '#theme' => 'product_composition_markup',
        ];

        if (!empty($composition)) {
          $composition_markup['#composition']['#markup'] = $composition;
        }

        $description_value .= render($composition_markup);

        $washing_instructions = $sku_entity->get('attr_washing_instructions')->getString();
        $dry_cleaning_instructions = $sku_entity->get('attr_dry_cleaning_instructions')->getString();
        if (!empty($washing_instructions) || !empty($dry_cleaning_instructions)) {
          $description_value .= '<div class="care-instructions-wrapper">';
          $description_value .= '<div class="care-instructions-label">' . t('care instructions') . '</div>';
          if (!empty($washing_instructions)) {
            $description_value .= '<div class="care-instructions-value washing-instructions">' . $washing_instructions . '</div>';
          }
          if (!empty($dry_cleaning_instructions)) {
            $description_value .= '<div class="care-instructions-value dry-cleaning-instructions">' . $dry_cleaning_instructions . '</div>';
          }
          $description_value .= '</div>';
        }

        // Render the wrapper div for article warning always so that the same
        // can be filled with data on variant selection.
        $warning = $skuManager->fetchProductAttribute($sku_entity, 'attr_article_warning', $search_direction);
        $warning_markup = [
          '#theme' => 'product_article_warning_markup',
        ];

        if (!empty($warning)) {
          $warning_markup['#warning']['#markup'] = $warning;
        }

        $description_value .= render($warning_markup);

        $description['value'] = [
          '#markup' => $description_value,
        ];

        if (\Drupal::config('alshaya_acm.settings')->get('pdp_show_specifications')) {
          $specifications['label'] = [
            '#markup' => t('Specifications'),
          ];

          $specifications['value'] = [
            "#theme" => 'item_list',
            '#items' => [],
          ];

          if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
            $specifications['value']['#items'][] = t('Style Code: @value', [
              '@value' => $attr_style_code,
            ]);
          }

          if ($attr_color = $sku_entity->get('attr_color')->getString()) {
            $specifications['value']['#items'][] = t('Color: @value', [
              '@value' => $attr_color,
            ]);
          }

          if ($attr_season = $sku_entity->get('attr_season')->getString()) {
            $specifications['value']['#items'][] = t('Season: @value', [
              '@value' => $attr_season,
            ]);
          }

          if ($attr_brand = $sku_entity->get('attr_product_brand')->getString()) {
            $specifications['value']['#items'][] = t('Product brand: @value', [
              '@value' => $attr_brand,
            ]);
          }
        }

        $whats_in_box['label'] = [
          '#markup' => t("What's In The Box"),
        ];

        $whats_in_box['value'] = [
          '#markup' => $sku_entity->get('attr_whats_in_the_box')->getString(),
        ];

        // Prepare full description in required sequence.
        // Check comments in MMCPA-218 for sequence requirements.
        $build['description'][] = $at_glance;
        $build['description'][] = $description;
        if (!empty($specifications)) {
          $build['description'][] = $specifications;
        }
        $build['description'][] = $whats_in_box;

        // Initialise home delivery variable.
        $build['home_delivery'] = [];

        // Display delivery options only if product is buyable.
        if (alshaya_acm_product_is_buyable($sku_entity)) {
          // Check if home delivery is available for this product.
          if (alshaya_acm_product_available_home_delivery($sku)) {
            $home_delivery_config = \Drupal::config('alshaya_acm_product.home_delivery');

            $home_delivery_options = [];
            $home_delivery_options['standard_title'] = $home_delivery_config->get('options_standard_title');
            $home_delivery_options['standard_subtitle'] = $home_delivery_config->get('options_standard_subtitle');

            // @TODO: Next day delivery not done for now.
            $build['home_delivery'] = [
              '#theme' => 'pdp_delivery_option',
              '#title' => $home_delivery_config->get('title'),
              '#subtitle' => $home_delivery_config->get('subtitle'),
              '#options' => $home_delivery_options,
            ];
          }
        }

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }
      }
      elseif ($view_mode == 'teaser') {
        // Get the image.
        $build['image'] = [];

        $sku_media = alshaya_acm_product_get_sku_media($sku_entity, TRUE);

        if ($sku_media) {
          $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
        }

        // Invoke the alter hook to allow all modules to override the images
        // being rendered for teaser.
        \Drupal::moduleHandler()->alter('acq_sku_teaser_media', $build, $sku_entity);

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }

        // Do not render VAT text along with price for teaser.
        $build['price_block'] = $skuManager->getPriceBlock($sku_entity, $view_mode);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['labels'] = [
          '#theme' => 'product_labels',
          '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
          '#sku' => $sku_identifier,
          '#mainsku' => $sku_identifier,
          '#type' => 'plp',
        ];

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }

        if (alshaya_acm_product_is_buyable($sku_entity)) {
          if ($stock_mode == 'pull') {
            $build['stock_placeholder'] = [
              '#markup' => '<div class="stock-placeholder ' . $sku_identifier . ' out-of-stock">' . t('Checking stock...') . '</div>',
            ];
          }
          // In push mode we check stock on page load only.
          elseif (!alshaya_acm_get_product_stock($sku_entity)) {
            $build['stock_placeholder'] = [
              '#markup' => '<div class="out-of-stock"><span class="out-of-stock">' . t('out of stock') . '</span></div>',
            ];
          }
        }
      }
      elseif ($view_mode == 'modal') {
        alshaya_acm_product_get_gallery($build, $sku_entity);

        $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['item_code']['#markup'] = $sku;

        $sku_media = alshaya_acm_product_get_sku_media($sku_entity, TRUE);

        $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

        if ($sku_media) {
          $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
        }

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }
      }

      $build['#attached']['library'][] = 'alshaya_acm_product/stock_check';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_acm_product_acq_sku_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Remove/Hide the 'add to cart' form from product list/search page.
  if ($build['#view_mode'] == 'teaser') {
    $build['#no_add_to_cart'] = TRUE;
  }

  // Show the placeholder to load add to cart form in full view mode.
  if ($build['#view_mode'] == 'full') {
    // We don't display form and placeholder if not buyable.
    if (!alshaya_acm_product_is_buyable($entity)) {
      $build['#no_add_to_cart'] = TRUE;

      // Display the non-buyable message and help text.
      $settings = \Drupal::config('alshaya_acm_product.settings');

      $build['not_buyable_message'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="not-buyable-message">{{ not_buyable_message | raw }}</div>',
        '#context' => [
          'not_buyable_message' => $settings->get('not_buyable_message.value'),
        ],
      ];

      // Get store finder link.
      $find_store_url = Url::fromUserInput('/store-finder')->toString();
      $not_buyable_help_text = new FormattableMarkup($settings->get('not_buyable_help_text.value'), [
        ':find_store' => $find_store_url,
      ]);

      $build['not_buyable_help_text'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="not-buyable-help-text">{{ not_buyable_help_text | raw }}</div>',
        '#context' => [
          'not_buyable_help_text' => $not_buyable_help_text,
        ],
      ];
    }
    else {
      // Show placeholder to allow adding form in AJAX.
      $build['cart_form_placeholder'] = [
        '#markup' => '<div class="stock-checker">' . t('Checking stock...') . '</div>',
      ];
    }

    unset($build['name']);
    unset($build['price']);
  }
}

/**
 * Implements hook_views_pre_build().
 */
function alshaya_acm_product_views_pre_build(ViewExecutable $view) {
  // Alter number of items per page for PLP / Search pages.
  if (in_array($view->id(), ['search', 'alshaya_product_list'])) {
    $list_view_items_per_page = \Drupal::config('alshaya_acm_product.settings')->get('list_view_items_per_page');
    $view->setItemsPerPage($list_view_items_per_page);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_customer_cart_form_alter(&$form, FormStateInterface $form_state) {
  if (empty($form['cart'])) {
    return;
  }

  // Including the utility file.
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  $config = \Drupal::config('alshaya_acm_product.basket_delivery');

  foreach ($form['cart'] as $id => $item) {
    if (is_array($item) && isset($item['quantity'])) {
      $home_delivery = [];
      $home_delivery['#theme'] = 'basket_delivery_option';
      $home_delivery['#title'] = $config->get('home_delivery_title');
      $home_delivery['#tooltip'] = $config->get('home_delivery_tooltip');
      $home_delivery['#type'] = alshaya_acm_product_available_home_delivery($id) ? 'home-delivery' : 'home-delivery not-available';

      $click_collect_delivery = [];
      $click_collect_delivery['#theme'] = 'basket_delivery_option';
      $click_collect_delivery['#title'] = $config->get('click_collect_title');
      $click_collect_delivery['#tooltip'] = $config->get('click_collect_tooltip');
      $click_collect_delivery['#type'] = alshaya_acm_product_available_click_collect($id) ? 'click-collect' : 'click-collect not-available';

      $delivery_options = '<div class="delivery-options-mobile">' . t('Available delivery options') . '</div>';
      $delivery_options .= '<div class="delivery-options-tooltip-wrapper">';
      $delivery_options .= isset($home_delivery) ? render($home_delivery) : '';
      $delivery_options .= isset($click_collect_delivery) ? render($click_collect_delivery) : '';
      $delivery_options .= '</div>';

      $form['cart'][$id]['delivery_options'] = [
        '#markup' => $delivery_options,
      ];

      $form['cart'][$id]['delivery_options']['#wrapper_attributes'] = ['class' => ['delivery-option']];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_product_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  $process_stock = FALSE;

  // We process stock only when loaded from our custom controller.
  if (\Drupal::routeMatch()->getRouteName() == 'alshaya_acm_product.get_cart_form') {
    $process_stock = TRUE;
  }

  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
  // Get SKU id.
  $sku_entity = SKU::load($form['sku_id']['#value']);

  // For simple products, we just return from here. For configurable products,
  // we check inside loop.
  if ($sku_entity->getType() == 'simple') {
    // We are not going to show the form right now, we don't do any stock check.
    if (!$process_stock) {
      return;
    }
  }

  $sku_identifier = strtolower(Html::cleanCssIdentifier($sku_entity->getSku()));
  $form['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

  $form['quantity']['#prefix'] = '<span class="quantity-' . $sku_identifier . '">';
  $form['quantity']['#suffix'] = '</span>';

  if (isset($form['ajax']) && isset($form['ajax']['configurables'])) {
    // Prepare array of just the configurable options.
    $configurables = [];
    foreach ($form['ajax']['configurables'] as $configurable_key => $configurable) {
      if (is_array($configurable) && !empty($configurable['#options'])) {
        $configurables[$configurable_key] = $configurable;
      }
    }

    // If there are no options to display, we show the product as not
    // available.
    if (empty($configurables)) {
      $form['ajax']['configurables'] = [
        '#markup' => '',
      ];
      $form['quantity'] = [
        '#title' => '',
        '#markup' => '',
      ];
      $form['add_to_cart'] = [
        '#markup' => '<span class="out-of-stock">' . t('not available') . '</span>',
      ];

      return;
    }

    // Attach size guide link to size attribute. This is statically attached to
    // size, we don't want it for any other attributes.
    if (isset($form['ajax']['configurables']['size'])) {
      $form['ajax']['configurables']['size']['#required_error'] = t('Please select a size.');

      // We show the size guide link if available as prefix.
      if ($size_guide_enabled = _alshaya_acm_product_check_size_guide_enabled()) {
        $form['ajax']['configurables']['size']['#prefix'] = $size_guide_enabled;
      }

      // @TODO: This looks like related to GTM, also for now only limited to
      // size attribute and not checking for other attributes.
      $site_default_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
      $configurable_sizes = $form['ajax']['configurables']['size'];
      if (\Drupal::languageManager()->getCurrentLanguage()->getId() !== $site_default_langcode) {
        $options = [];

        foreach ($configurable_sizes['#options'] as $key => $option) {
          $product_options_manager = \Drupal::service('acq_sku.product_options_manager');

          // Fetch taxonomy_term from option Id.
          $default_language_option = $product_options_manager->loadProductOptionByOptionId('size', $key, $site_default_langcode);
          if ($default_language_option) {
            $options[$option] = $default_language_option->getName();
          }
        }

        $form['#attached']['drupalSettings']['alshaya_product_size_config'] = $options;
      }
    }

    // In case of multiple config attributes, make sure the first one is
    // selected by default on page load.
    if (count($form_state->get('tree')['configurables']) > 1) {
      $configurable_weights = \Drupal::service('config.factory')->get('acq_sku.configurable_form_settings')->get('attribute_weights');
      $config_attributes = array_keys($configurable_weights);
      $root_attribute_code = array_shift($config_attributes);
      $user_input_configurables = $form_state->getUserInput();
      $first_child = '';

      // Sort configurable weight by the weight value.
      uasort($configurable_weights, function ($a, $b) {
        return $a - $b;
      });

      // Give preference to color label passed via query params.
      $color = \Drupal::request()->query->get('color');
      if ($color) {
        // Get swatch_id from color value.
        $sku_asset_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
        $first_child = $sku_asset_manager->getChildSkuFromColor($sku_entity, $color);
      }

      if (!($first_child instanceof SKU)) {
        $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

        // Default use-case: User landing on PDP from PLP/Search/directly.
        // Set the color applicable to first child sku as default here.
        $child_skus = $sku_manager->getChildSkus($sku_entity);
        $filtered_child_skus = array_filter($child_skus);
        $first_child = array_shift($filtered_child_skus);
      }

      if ($first_child instanceof SKU) {
        $plugin = $sku_entity->getPluginInstance();
        $first_child_root_attr_value = $plugin->getAttributeValue($first_child, $root_attribute_code);
      }

      $root_attribute_options = $form['ajax']['configurables'][$root_attribute_code]['#options'];

      // Set the color attribute as default only if user has not made a
      // selection.
      if ((isset($root_attribute_options[$first_child_root_attr_value])) &&
        (!isset($user_input_configurables['configurables'][$root_attribute_code]))) {
        $form['ajax']['configurables'][$root_attribute_code]['#options_attributes'][$first_child_root_attr_value]['selected'] = 'selected';
        $form_state->setValue('configurables', [$root_attribute_code => $first_child_root_attr_value]);

        // Disable config options not available for the selected config.
        alshaya_acm_product_update_config_options($form['ajax'], $form_state, $form_state->getValue('configurables'), FALSE);
      }

      // Check stock in case of Configurable products with multiple attributes.
      $selected_configs = $form_state->getValue('configurables');

      // While selecting an attribute, the user input is available under inputs.
      if (empty($selected_configs)) {
        $selected_configs = $form_state->getUserInput()['configurables'];
      }

      // If we selected more than one attribute and we clicked on the root
      // attribute, then reset all child/leaf attributes.
      if (count($selected_configs) > 1 && $user_input_configurables['_triggering_element_name'] == 'configurables[' . $root_attribute_code . ']') {
        $selected_configs = [$root_attribute_code => $selected_configs[$root_attribute_code]];
        $form_state->setValue('configurables', [$root_attribute_code => $selected_configs[$root_attribute_code]]);
      }

      if (!empty($selected_configs)) {
        // Get all child SKUs possible for the selected root attribute to do a
        // stock check on visible child attributes that belong to the child
        // SKUs.
        $variations = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), [$root_attribute_code => $selected_configs[$root_attribute_code]]);

        // Check stock for variations & update options.
        foreach ($variations as $key => $variation) {
          if ($key === '#available_config') {
            continue;
          }

          if ($variation instanceof SKU) {
            $form['#cache']['tags'][] = 'acq_sku:' . $variation->id();
            if (!($quantity = alshaya_acm_get_product_stock($variation))) {
              $attribute_parts = explode(':', $key);
              if (isset($form['ajax']['configurables'][$attribute_parts[0]])) {
                $form['ajax']['configurables'][$attribute_parts[0]]['#options_attributes'][$attribute_parts[1]]['disabled'] = 'disabled';
              }
            }
          }
        }
      }

      $process_stock = FALSE;
    }

    foreach ($form['ajax']['configurables'] as $configurable_key => &$configurable) {
      if (is_array($configurable)) {
        $form['ajax']['#attributes']['class'][] = 'configurable-wrapper-' . $sku_identifier;

        // Add custom ajax callback for configurables to refresh the gallery.
        $configurable['#ajax']['callback'] = 'alshaya_acm_product_configurable_form_ajax_callback';

        // Disable refocus.
        $configurable['#ajax']['disable-refocus'] = TRUE;

        unset($configurable['#ajax']['wrapper']);

        // We are not going to show the form right now, we don't do any
        // stock check for variant SKUs.
        if (!$process_stock) {
          // Disable options which don't have skus in the product tree.
          if (count($form_state->get('tree')['configurables']) > 1) {
            foreach ($configurable['#options'] as $key => $value) {
              $product_tree = $form_state->get('tree');
              if (isset($product_tree['options'][$configurable_key . ':' . $key])) {
                $variations = array_filter($product_tree['options'][$configurable_key . ':' . $key]);
                // Check if product tree doesn't have any variations available
                // for this option. Hide options like this one.
                if (isset($variations['#available_config']) &&
                  (count($variations) === 1)) {
                  unset($configurable['#options'][$key]);
                  \Drupal::logger('alshaya_acm_product')->alert('No SKU found for Config sku: %sku and %option : %option_value',
                    [
                      '%sku' => $sku_entity->getSku(),
                      '%option' => $configurable_key,
                      '%option_value' => $key,
                    ]);
                }
              }
            }
          }

          continue;
        }

        $configurable['#options_attributes'] = isset($configurable['#options_attributes'])
          ? $configurable['#options_attributes']
          : [];

        // Check if it is a dropdown, we disable the options for which we don't
        // have stock. Apply this check only if we have just 1 configurable
        // attribute. With multiple conf attributes, we cannot get the SKU with
        // a single option.
        if (isset($configurable['#options'])) {
          foreach ($configurable['#options'] as $key => $value) {
            $sku = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), [$configurable_key => $key]);

            // This is very limited, it supports only 1 configurable attribute.
            if ($sku instanceof SKU) {
              $form['#cache']['tags'][] = 'acq_sku:' . $sku->id();
              if ($quantity = alshaya_acm_get_product_stock($sku)) {
                // Set the dropdown quantity options only for selected option.
                if (
                  isset($_REQUEST['configurables'], $_REQUEST['configurables'][$configurable_key])
                  && $_REQUEST['configurables'][$configurable_key] == $key
                ) {
                  $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
                }
              }
              else {
                $configurable['#options_attributes'][$key]['disabled'] = 'disabled';
              }
            }
            // For some reason we don't have proper data for the option.
            else {
              unset($configurable['#options'][$key]);
            }
          }
        }

        // If only one configurable option there, select first value as default.
        if (count($configurables) == 1) {
          $options = $configurable['#options'];
          if (count($options) == 1) {
            $form['ajax']['configurables'][key($configurables)]['#value'] = key($options);
            $user_input = $form_state->getUserInput();
            $user_input['configurables'] = [key($configurables) => key($options)];
            $form_state->setUserInput($user_input);
          }
        }

        // If there are no options to display, we show the product as not
        // available.
        if (empty($configurable['#options'])) {
          $configurable = [
            '#markup' => '',
          ];
          $form['quantity'] = [
            '#title' => '',
            '#markup' => '',
          ];
          $form['add_to_cart'] = [
            '#markup' => '<span class="out-of-stock">' . t('not available') . '</span>',
          ];
        }
        // If all the options are disabled, we show the product is out of stock.
        // We reduce one in options_attributes count as we will always have
        // empty_option disabled.
        elseif (count($configurable['#options']) == count($configurable['#options_attributes']) - 1) {
          $configurable = [
            '#markup' => '',
          ];
          $form['quantity'] = [
            '#title' => '',
            '#markup' => '',
          ];
          $form['add_to_cart'] = [
            '#markup' => '<span class="out-of-stock">' . t('Out of stock') . '</span>',
          ];
        }
      }
    }
  }
  // Stock check for quantity for all other products.
  elseif ($quantity = alshaya_acm_get_product_stock($sku_entity)) {
    $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
  }
  else {
    $form['quantity'] = [
      '#markup' => '<div class="quantity out-of-stock">' . t('Quantity') . '<div><span class="dash">-</span><span class="arrow"></span></div></div>',
    ];
    $form['add_to_cart'] = [
      '#markup' => '<div class="add-to-cart out-of-stock">' . t('Out of stock') . '</div>',
    ];
  }
}

/**
 * Overridden ajax callback for configurable add to cart form.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState object.
 *
 * @return array
 *   Build array.
 */
function alshaya_acm_product_configurable_form_ajax_callback(array &$form, FormStateInterface $form_state) {
  // Product attributes that can possibly change whith selected attribute values
  // & hence need to be re-rendered in the AJAX callback.
  $dynamic_parts = call_user_func_array($form_state->prepareCallback('::configurableAjaxCallback'), [&$form, &$form_state]);

  // Configurable product tree keyed with possible config tree, whose leaf items
  // contain the SKUs depending on the tree path traversed.
  $product_tree = $form_state->get('tree');

  // Calculate available config options based on the attribute value selected,
  // in case of multiple config attributes with a product.
  if (count($product_tree['configurables']) > 1) {
    // List of attributes selected by end-users on the form.
    $configurables = $form_state->getValue('configurables');

    // Disable config options not available for the selected config.
    alshaya_acm_product_update_config_options($dynamic_parts, $form_state, $configurables);

    // Traverse the product tree till the point where config attributes have a
    // value.
    $tree_pointer = alshaya_acm_product_fetch_selected_option_tree($product_tree, $configurables);

    // If there is only one item returned back,
    // it implies we have reached to the leaf most SKU in the tree.
    if (count($tree_pointer) === 1) {
      $tree_pointer = array_shift($tree_pointer);
    }
  }
  else {
    $tree_pointer = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), $form_state->getValue('configurables'));
  }

  if ($tree_pointer instanceof SKU) {
    if ($quantity = alshaya_acm_get_product_stock($tree_pointer)) {
      $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
    }

    $build = [];
    alshaya_acm_product_get_gallery($build, $tree_pointer);
    $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];

    $sku = SKU::load($form['sku_id']['#value']);
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $dynamic_parts['selected_variant_sku'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => [
          'selected-variant-sku',
          'selected-variant-sku-' . $sku_identifier,
        ],
      ],
      '#value' => $tree_pointer->getSku(),
    ];

    $response = new AjaxResponse();

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $price_block = $skuManager->getPriceBlock($tree_pointer);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));

    $quantity_selector = '.quantity-' . $sku_identifier;
    $response->addCommand(new ReplaceCommand($quantity_selector, $form['quantity']));

    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    // Update the promotions for the product.
    $promotion_links = '';
    $promotion_types = ['cart'];
    $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($tree_pointer, TRUE, $promotion_types);
    if (!empty($promotions)) {
      $promotion_links = implode('</br>', $promotions);
    }
    $response->addCommand(new HtmlCommand('.promotions', $promotion_links));

    // Update the article class to include out of stock class if not in stock.
    // Remove the class if in stock.
    $class_command = $quantity ? 'removeClass' : 'addClass';
    $response->addCommand(new InvokeCommand('article[data-vmode="full"]', $class_command, ['product-out-of-stock']));

    // Update simple product description attributes.
    $composition = $skuManager->fetchProductAttribute($tree_pointer, 'attr_composition', 'self');
    $composition_markup = [
      '#theme' => 'product_composition_markup',
    ];

    if (!empty($composition)) {
      $composition_markup['#composition']['#markup'] = $composition;
    }

    $response->addCommand(new ReplaceCommand('.composition-wrapper', $composition_markup));

    // Update simple product description attributes.
    $warning = $skuManager->fetchProductAttribute($tree_pointer, 'attr_article_warning', 'self');
    $warning_markup = [
      '#theme' => 'product_article_warning_markup',
    ];

    if (!empty($warning)) {
      $warning_markup['#warning']['#markup'] = $warning;
    }

    $response->addCommand(new ReplaceCommand('.warning-wrapper', $warning_markup));

    // Update cross-sell region with products.
    if ((\Drupal::config('alshaya_acm.settings')->get('display_crosssell')) &&
    ($form_state->getUserInput()['sku_view_mode'] == 'full')) {
      $cross_sell_markup = [
        '#theme' => 'products_horizontal_slider',
        '#section_title' => t('Customers also bought'),
      ];

      if (!empty($cross_sell_skus = $skuManager->getLinkedSkusWithFirstChild($tree_pointer, LINKED_SKU_TYPE_CROSSSELL))) {
        $cross_sell_markup['#data'] = $skuManager->filterRelatedSkus(array_unique($cross_sell_skus));
      }

      // Make sure the wrapper div is present even in case of no cross-sell
      // items.
      $cross_sell_markup_desktop = array_merge($cross_sell_markup, ['#prefix' => '<div class="horizontal-crossell above-mobile-block">', '#suffix' => '</div>']);
      $cross_sell_markup_mobile = array_merge($cross_sell_markup, ['#prefix' => '<div class="horizontal-crossell mobile-only-block">', '#suffix' => '</div>']);

      $cross_sell_processing = \Drupal::requestStack()->getCurrentRequest()->get('skip_crosssell_processing');
      // For modal/mobile crosssell form, not processing the crosssell section.
      if (!$cross_sell_processing) {
        $response->addCommand(new InsertCommand('.horizontal-crossell.mobile-only-block', $cross_sell_markup_mobile));
        $response->addCommand(new InsertCommand('.horizontal-crossell.above-mobile-block', $cross_sell_markup_desktop));
      }
    }

    // React for click & collect if stock is available.
    if (\Drupal::moduleHandler()->moduleExists('alshaya_click_collect') && $quantity) {
      // Settings variable.
      $settings = ['alshaya_acm' => ['product_sku' => $sku->getSku()]];

      $config = \Drupal::config('alshaya_click_collect.settings');

      if (!alshaya_acm_product_available_click_collect($tree_pointer->getSku())) {
        $settings['alshaya_acm']['storeFinder'] = FALSE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_unavailable');
      }
      else {
        $settings['alshaya_acm']['storeFinder'] = TRUE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_subtitle');
      }

      $response->addCommand(new BaseCommand('updatePDPClickCollect', $settings));

      $response->addCommand(new SettingsCommand($settings, TRUE), TRUE);
    }

    return $response;
  }
  else {
    $build = [];
    $sku = $product_tree['parent'];

    // Pull out & update gallery image based on the selected color & first item
    // having images.
    foreach ($tree_pointer as $sku_item) {
      if ($sku_item instanceof SKU) {
        alshaya_acm_product_get_gallery($build, $sku_item);
        if (!empty($build['gallery']['product_zoom'])) {
          break;
        }
      }
    }

    // If no image found on simple SKUs, use parent SKUs image.
    if (empty($build['gallery']['product_zoom'])) {
      alshaya_acm_product_get_gallery($build, $sku);
    }

    $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];

    $response = new AjaxResponse();
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $price_block = $skuManager->getPriceBlock($sku);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // Don't display placeholder again.
    unset($dynamic_parts['add_to_cart']);

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));
    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    return $response;
  }

  return $dynamic_parts;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_product_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'page_title_block' block on PDP page.
  if ($operation == 'view' && $block->getPluginId() == 'page_title_block') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.node.canonical') {
      /* @var \Drupal\node\Entity\Node $node */
      $node = $route->getParameter('node');
      return AccessResult::forbiddenIf($node->bundle() == 'acq_product');
    }
  }
}

/**
 * Helper function to get size guide link.
 *
 * @return string
 *   Link html as string or empty if not available.
 */
function _alshaya_acm_product_check_size_guide_enabled() {
  // Check if we have the configuration set.
  if (\Drupal::config('alshaya_acm_product.size_guide')->get('size_guide_enabled')) {
    $options = [
      'attributes' => [
        'class' => ['size-guide-link', 'use-ajax'],
        'data-dialog-type' => 'dialog',
        'data-dialog-options' => Json::encode(['height' => 400, 'width' => 700]),
      ],
    ];
    $url = Url::fromRoute('alshaya_acm_product.size_guide_modal', [], $options);
    $link = Link::fromTextAndUrl(t('Size Guide'), $url);
    return $link->toString();
  }

  return '';
}

/**
 * Wrapper function to check if SKU is buyable.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity object.
 *
 * @return bool
 *   SKU is buyable or not.
 */
function alshaya_acm_product_is_buyable(SKU $sku_entity) {
  $all_products_buyable = \Drupal::config('alshaya_acm_product.settings')->get('all_products_buyable');
  // For now we have only one condition, we may have more in future.
  return $all_products_buyable || (bool) $sku_entity->get('attr_is_buyable')->getString();
}

/**
 * Implements template_preprocess_products_horizontal_slider().
 */
function alshaya_acm_product_preprocess_products_horizontal_slider(&$variables) {
  if (!empty($variables['data'])) {
    $variables['data'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $variables['data']));
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 *
 * Update url alias for product node based on super category feature status.
 */
function alshaya_acm_product_pathauto_pattern_alter(&$pattern, array $context) {
  if ($context['module'] == 'node' && $context['bundle'] == 'acq_product') {
    if (!\Drupal::config('alshaya_acm_product_category.super_category.settings')->get('status')) {
      return;
    }
    // Get the node object.
    $node = $context['data']['node'];

    // Do not proceed if not node object, Or missing category.
    if (!$node instanceof NodeInterface || empty($node->get('field_category')->get(0))) {
      return;
    }

    // Get the category field of the node to generate path alias.
    $term = $node->get('field_category')->get(0)->entity;
    // Get the translations of the term based on the current lang code.
    if ($context['language'] !== 'en' && $term->hasTranslation($context['language'])) {
      $term = $term->getTranslation($context['language']);
    }

    // Get parent term object of given term.
    $parent = \Drupal::service('alshaya_acm_product_category.product_category_tree')
      ->getCategoryTermRootParent($term);

    // Get term alias to append with node alias.
    $alias = \Drupal::service('path.alias_manager')
      ->getAliasByPath('/taxonomy/term/' . $parent->id(), $context['language']);

    $pattern->setPattern($alias . '/' . $pattern->getPattern());
  }
}
