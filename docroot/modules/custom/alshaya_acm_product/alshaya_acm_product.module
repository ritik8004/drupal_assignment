<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\block\Entity\Block;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\BaseCommand;
use Drupal\Core\Ajax\InsertCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\node\NodeInterface;
use Drupal\search_api\IndexInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_acm_product_module_implements_alter(&$implementations, $hook) {
  // To call the alshaya_acm_product_build at the end for final changes.
  if ($hook == 'alshaya_acm_product_build') {
    $group = $implementations['alshaya_acm_product_build'];
    unset($implementations['alshaya_acm_product_build']);
    $implementations['alshaya_acm_product_build'] = $group;
  }
}

/**
 * Alter the items that are indexed.
 *
 * @param \Drupal\search_api\IndexInterface $index
 *   The search index on which items will be indexed.
 * @param \Drupal\search_api\Item\ItemInterface[] $items
 *   The items that will be indexed.
 */
function alshaya_acm_product_search_api_index_items_alter(IndexInterface $index, array &$items) {
  // Get the configurable fields we want to capture separately as fields.
  $fields = \Drupal::service('acq_sku.fields_manager')->getFieldAdditions();
  $indexFields = array_filter($fields, function ($field) {
    return !empty($field['index']);
  });

  $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');

  foreach ($items as $item_id => $item) {
    $object = $item->getOriginalObject()->getValue();
    $type = $object->getEntityType()->id();
    $bundle = $object->bundle();

    // Deal with all indexable fields not available by default in configurable
    // parent but available in the variants.
    // Deal with final price of configurable that needs to come from variants.
    if ($type == 'node' && $bundle == 'acq_product') {
      $sku = $object->get('field_skus')->first()->getString();

      if (!empty($sku)) {
        $langcode = $object->language()->getId();
        $sku_entity = SKU::loadFromSku($sku, $langcode);

        if (empty($sku_entity)) {
          continue;
        }

        // For stock index, we use only in stock (2) or out of stock (0).
        // We will use 2 for not-buyable products too.
        // We will use 1 for all in pull mode.
        $in_stock = 0;

        if ($stock_mode == 'pull') {
          $in_stock = 1;
        }
        elseif (!alshaya_acm_product_is_buyable($sku_entity)) {
          $in_stock = 2;
        }
        elseif (alshaya_acm_get_stock_from_sku($sku_entity)) {
          $in_stock = 2;
        }

        $item->getField('stock')->setValues([$in_stock]);

        if ($sku_entity->bundle() == 'configurable') {
          $data = [];
          $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
          $prices = $skuManager->getMinPrices($sku_entity);
          $min_final_price = $prices['final_price'];
          $child_sku_found = FALSE;
          foreach ($sku_entity->get('field_configured_skus') as $child_sku) {
            try {
              $child_sku_entity = SKU::loadFromSku($child_sku->getString(), $langcode, FALSE);
            }
            catch (\Exception $e) {
              // Do nothing, child sku might not be available or deleted.
              continue;
            }

            // Additional check if it returns NULL.
            if (empty($child_sku_entity)) {
              continue;
            }
            else {
              $child_sku_found = TRUE;
            }

            // Loop through the indexable fields.
            foreach ($indexFields as $key => $field) {
              $field_key = 'attr_' . $key;
              $field_data = $child_sku_entity->get($field_key)->first();

              if (!empty($field_data)) {
                $field_value = $field_data->getString();
                $data[$key][$field_value] = $field_value;
              }
            }
          }

          // Do not index the product in case its linked with a configurable
          // SKU, but the config SKU is missing its children.
          if (!$child_sku_found) {
            unset($items[$item_id]);
          }

          // Load all item fields, we'll need it to check condition inside loop.
          $itemFields = $item->getFields();

          foreach ($data as $key => $values) {
            $field_key = 'attr_' . $key;

            // There is an issue with color field in indexes.
            // It is color in solr and attr_color in database index.
            // For all other fields it is attr_field in both indexes.
            if (isset($itemFields[$field_key])) {
              $item->getField($field_key)->setValues(array_keys($values));
            }
            elseif (isset($itemFields[$key])) {
              $item->getField($key)->setValues(array_keys($values));
            }
          }

          $item->getField('final_price')->setValues([$min_final_price]);
        }
      }
    }
  }
}

/**
 * Implements hook_acq_sku_product_sku_alter().
 */
function alshaya_acm_product_acq_sku_product_sku_alter(&$sku, $product) {
  // Set sku activation date if product activation date available.
  if (isset($product['attributes']['product_activation_date'])) {
    $sku->created = strtotime($product['attributes']['product_activation_date']);
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_product_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['pdp_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'title_price' => NULL,
      'subtitle' => NULL,
      'options' => [],
    ],
  ];

  $items['basket_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'tooltip' => NULL,
      'type' => NULL,
    ],
  ];

  $items['sku_teaser'] = [
    'variables' => [
      'gallery' => NULL,
      'product_url' => NULL,
      'product_label' => NULL,
      'price_block' => NULL,
      'price_block_identifier' => NULL,
      'promotions' => NULL,
      'stock_placeholder' => NULL,
      'swatches' => NULL,
      'swatch_more_text' => NULL,
    ],
  ];

  $items['product_price_block'] = [
    'render element' => 'elements',
    'variables' => [
      'price' => NULL,
      'final_price' => NULL,
      'discount' => NULL,
      'vat_text' => NULL,
    ],
  ];

  $items['product_labels'] = [
    'render element' => 'elements',
    'variables' => [
      'labels' => NULL,
      'sku' => NULL,
      'mainsku' => NULL,
      'type' => NULL,
    ],
  ];

  $items['product_composition_markup'] = [
    'variables' => [
      'composition' => NULL,
    ],
  ];

  $items['product_article_warning_markup'] = [
    'variables' => [
      'warning' => NULL,
    ],
  ];

  $items['product_concept_markup'] = [
    'variables' => [
      'concepts' => NULL,
    ],
  ];

  $items['products_horizontal_slider'] = [
    'variables' => [
      'data' => NULL,
      'section_title' => NULL,
      'views_display_id' => NULL,
      'views_name' => NULL,
    ],
  ];

  $items['free_gift_promotions'] = [
    'variables' => [
      'free_sku_entity_id' => NULL,
      'free_sku_code' => NULL,
      'sku_title' => NULL,
      'promo_title' => NULL,
      'sku_image' => NULL,
      'promo_code' => NULL,
    ],
  ];

  $items['free_gift_cart_label'] = [
    'variables' => [
      'promos' => NULL,
    ],
  ];

  return $items;
}

/**
 * Perform actions related to entity just added/updated/deleted.
 *
 * @param \Drupal\acq_sku\Entity\SKU $entity
 *   SKU for which display node is to be updated.
 */
function _alshaya_acm_product_post_sku_operation(SKU $entity) {
  // Don't do anything if search_api is not enabled.
  if (!\Drupal::moduleHandler()->moduleExists('search_api')) {
    return;
  }

  try {
    /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
    $plugin = $entity->getPluginInstance();

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    // Clear cached data for products.
    $skuManager->clearProductCachedData($entity);

    if ($parent = $plugin->getParentSku($entity)) {
      // Clear cached data for configurable products.
      $skuManager->clearProductCachedData($parent);
    }

    // Check if node is available.
    if ($node = $plugin->getDisplayNode($entity)) {
      $node->original = clone $node;

      // Mark node for reindexing on add/update/delete of SKUs.
      search_api_entity_update($node);
    }
  }
  catch (\Exception $e) {
    // Translation might not be available.
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function alshaya_acm_product_acq_sku_insert(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function alshaya_acm_product_acq_sku_update(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function alshaya_acm_product_acq_sku_delete(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (($entity->bundle() == 'acq_product')) {
    $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');
    $product_settings = \Drupal::config('alshaya_acm_product.settings');

    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
    $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

    $sku = $entity->get('field_skus')->first()->getString();
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku));
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU) {
      $build['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

      // Make product node dependent on all child-skus in case of configurable
      // product.
      if (!empty($child_skus = $skuManager->getChildrenSkuIds($sku_entity))) {
        // Check for disabled simple SKUs on Magento. Make sure the sku entity
        // is available on Drupal before adding cache tag.
        if ($sku_entity_ids = $skuManager->getEntityIdsBySku($child_skus)) {
          foreach ($sku_entity_ids as $sku_entity_id) {
            $build['#cache']['tags'][] = 'acq_sku:' . $sku_entity_id;
          }
        }
      }

      if ($view_mode == 'search_result') {
        $build['labels'] = [
          '#theme' => 'product_labels',
          '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
          '#sku' => $sku_identifier,
          '#mainsku' => $sku_identifier,
          '#type' => 'plp',
        ];
      }
      elseif ($view_mode == 'full') {
        $context = 'pdp';

        // This is required to allow showing different gallery on page load
        // when user clicked on swatch.
        $build['#cache']['contexts'][] = 'url';

        // Get cross sell block for the product.
        if (\Drupal::config('alshaya_acm.settings')->get('display_crosssell')) {
          if (!empty($cross_sell_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_CROSSSELL))) {
            $build['cross_sell'] = [
              '#theme' => 'products_horizontal_slider',
              '#data' => $skuManager->filterRelatedSkus(array_unique($cross_sell_skus)),
              '#section_title' => t('Customers also bought'),
              '#views_name' => 'product_slider',
              '#views_display_id' => 'block_product_slider',
            ];

            // Weight will have no effect later once template is modified.
            $build['cross_sell']['#weight'] = 11;
          }
        }

        if (!empty($up_sell_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_UPSELL))) {
          $build['up_sell'] = [
            '#theme' => 'products_horizontal_slider',
            '#data' => $skuManager->filterRelatedSkus(array_unique($up_sell_skus)),
            '#section_title' => t('You may also like'),
            '#views_name' => 'product_slider',
            '#views_display_id' => 'block_product_slider',
          ];
          // Weight will have no effect later once template is modified.
          $build['up_sell']['#weight'] = 10;
        }

        if (!empty($related_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_RELATED))) {
          $build['related'] = [
            '#theme' => 'products_horizontal_slider',
            '#data' => $skuManager->filterRelatedSkus(array_unique($related_skus)),
            '#section_title' => t('Related'),
            '#views_name' => 'product_slider',
            '#views_display_id' => 'block_product_slider',
          ];
          // Weight will have no effect later once template is modified.
          $build['related']['#weight'] = 11;
        }

        // Get the gallery for selected SKU if selected sku id available in
        // query params, else show it from main parent sku itself.
        $sku_for_gallery = $sku_entity;

        $selected_value = \Drupal::request()->query->get('selected');
        if ($selected_value) {
          $selected_sku = SKU::load($selected_value);

          if ($selected_sku instanceof SKUInterface) {
            $sku_for_gallery = $selected_sku;
          }
        }

        alshaya_acm_product_get_gallery($build, $sku_for_gallery);

        $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

        $build['item_code']['#markup'] = $sku;

        // Initialise home delivery variable.
        $build['home_delivery'] = [];

        // Display delivery options only if product is buyable.
        if (alshaya_acm_product_is_buyable($sku_entity)) {
          // Check if home delivery is available for this product.
          if (alshaya_acm_product_available_home_delivery($sku)) {
            $home_delivery_config = \Drupal::config('alshaya_acm_product.home_delivery');

            $home_delivery_options = [];
            $home_delivery_options['standard_title'] = $home_delivery_config->get('options_standard_title');
            $home_delivery_options['standard_subtitle'] = $home_delivery_config->get('options_standard_subtitle');

            // @TODO: Next day delivery not done for now.
            $build['home_delivery'] = [
              '#theme' => 'pdp_delivery_option',
              '#title' => $home_delivery_config->get('title'),
              '#subtitle' => $home_delivery_config->get('subtitle'),
              '#options' => $home_delivery_options,
            ];
          }
        }

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types, 'full');

        if (!empty($promotions)) {
          $free_gift_promotions = $generic_promotions = [];
          // Split promotions array into 2 parts, since we need to render
          // free gift promotions in a different way.
          foreach ($promotions as $promotion) {
            if (empty($promotion['skus'])) {
              $generic_promotions[] = $promotion;
            }
            else {
              $free_gift_promotions[] = $promotion;
            }
          }

          if (!empty($generic_promotions)) {
            $build['promotions'] = [
              '#markup' => implode('</br>', $generic_promotions),
            ];
          }

          // For free gift promotions, the promo needs to be rendered in a
          // different way.
          if (!empty($free_gift_promotions)) {
            foreach ($free_gift_promotions as $free_gift_promotion) {
              $free_sku_entity = SKU::loadFromSku($free_gift_promotion['skus'][0]['value']);

              // Get sku title & image.
              $build['free_gift_promotions'] = [
                '#theme' => 'free_gift_promotions',
                '#free_sku_entity_id' => $free_sku_entity->id(),
                '#free_sku_code' => $free_sku_entity->getSku(),
                '#sku_title' => $free_sku_entity->get('name')->getString(),
                '#promo_title' => $free_gift_promotion['text'],
                '#promo_code' => $free_gift_promotion['coupon_code'],
              ];

              /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
              $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

              $free_sku_media = $skuImagesManager->getFirstImage($free_sku_entity);

              // If free gift sku has no media, then we check from the default
              // image from the configuration.
              if (empty($free_sku_media) && !empty($default_image = _alshaya_acm_product_get_product_default_main_image())) {
                $free_sku_media = [
                  'label' => $free_sku_entity->label(),
                  'file' => $default_image,
                ];
              }

              if ($free_sku_media) {
                $build['free_gift_promotions']['#sku_image'] = $skuManager->getSkuImage($free_sku_media, '192x168');
              }
            }
          }
        }
      }
      elseif ($view_mode == 'teaser' || $view_mode == 'product_category_carousel') {
        $context = 'teaser';

        // Get the image.
        $build['image'] = [];

        $sku_media = $skuImagesManager->getFirstImage($sku_entity);

        if ($sku_media) {
          $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
        }

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }

        // Do not render VAT text along with price for teaser.
        $build['price_block'] = $skuManager->getPriceBlock($sku_entity, $view_mode);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['labels'] = [
          '#theme' => 'product_labels',
          '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
          '#sku' => $sku_identifier,
          '#mainsku' => $sku_identifier,
          '#type' => 'plp',
        ];

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }

        // Do not show add to cart form for category carousel.
        // Show add to cart form only if config says so.
        // Show add to cart form if product is buyable.
        $class = $product_settings->get('show_cart_form_in_related') == 0 ? 'no-cart-form' : '';
        $build['show_cart_form']['#markup'] = $class;

        if ($view_mode != 'product_category_carousel'
          && $product_settings->get('show_cart_form_in_related')
          && alshaya_acm_product_is_buyable($sku_entity)) {

          $build['sku_id'] = [
            '#markup' => $sku_entity->id(),
          ];

          $build['mobile_add_to_cart_form'] = [
            '#type' => 'link',
            '#title' => '',
            '#url' => Url::fromRoute('alshaya_acm_product.get_cart_form', [
              'view_mode' => 'teaser',
              'entity' => $sku_entity->id(),
            ]),
            '#attributes' => [
              'class' => [
                'use-ajax',
                'add-to-cart-form-placeholder-teaser',
              ],
            ],
          ];

          // In push mode check if product is out of stock here itself.
          if ($stock_mode != 'pull' && !alshaya_acm_get_stock_from_sku($sku_entity)) {
            $build['stock_placeholder'] = [
              '#markup' => '<div class="out-of-stock"><span class="out-of-stock">' . t('out of stock') . '</span></div>',
            ];

            $build['mobile_add_to_cart_form'] = $build['stock_placeholder'];
          }
        }
      }
      elseif ($view_mode == 'modal') {
        $context = 'modal';

        alshaya_acm_product_get_gallery($build, $sku_entity);

        $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;
        $build['item_code']['#markup'] = $sku;
        $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }
      }

      $build['#attached']['library'][] = 'alshaya_acm_product/stock_check';

      if (isset($context)) {
        \Drupal::moduleHandler()->alter('alshaya_acm_product_build', $build, $sku_entity, $context);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_acq_sku_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    alshaya_acm_product_get_gallery($build, $entity);

    $build['price_block']['#markup'] = '<div class="free-price-markup">' . t('FREE') . '</div>';

    $build['item_code']['#markup'] = $entity->getSku();

    $build['description']['#markup'] = $entity->get('attr_description')->getValue()[0]['value'];

    $build['brand_logo'] = alshaya_acm_product_get_brand_logo($entity);

    /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
    $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

    $sku_media = $skuImagesManager->getFirstImage($entity);

    if ($sku_media) {
      $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
    }
  }
}

/**
 * Implements hook_alshaya_acm_product_build_alter().
 */
function alshaya_acm_product_alshaya_acm_product_build_alter(&$build, SKUInterface $sku, $context = 'pdp') {
  switch ($context) {
    case 'teaser':
      // If no main image, then use default main image.
      if (empty($build['image'])) {
        if (!empty($default_image = _alshaya_acm_product_get_product_default_main_image())) {
          /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
          $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

          $sku_media = [
            'file' => $default_image,
            'label' => $sku->label(),
          ];
          $default_sku_image = $skuManager->getSkuImage($sku_media, '192x168');
          $default_sku_image['#attributes']['class'][] = 'product-default-image';
          $build['image'] = $default_sku_image;
        }
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_acm_product_acq_sku_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\acq_sku\Entity\SKU $entity */
  // Remove/Hide the 'add to cart' form from product list/search page.
  if ($build['#view_mode'] == 'teaser') {
    $build['#no_add_to_cart'] = TRUE;
  }

  // Show the placeholder to load add to cart form in full view mode.
  if ($build['#view_mode'] == 'full') {
    unset($build['name']);
    unset($build['price']);

    // We don't display form and placeholder if not buyable.
    if (!alshaya_acm_product_is_buyable($entity)) {
      $build['#no_add_to_cart'] = TRUE;

      // Display the non-buyable message and help text.
      $settings = \Drupal::config('alshaya_acm_product.settings');

      $build['not_buyable_message'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="not-buyable-message">{{ not_buyable_message | raw }}</div>',
        '#context' => [
          'not_buyable_message' => $settings->get('not_buyable_message.value'),
        ],
      ];

      // Get store finder link.
      $find_store_url = Url::fromUserInput('/store-finder')->toString();
      $not_buyable_help_text = new FormattableMarkup($settings->get('not_buyable_help_text.value'), [
        ':find_store' => $find_store_url,
      ]);

      $build['not_buyable_help_text'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="not-buyable-help-text">{{ not_buyable_help_text | raw }}</div>',
        '#context' => [
          'not_buyable_help_text' => $not_buyable_help_text,
        ],
      ];
    }
    else {
      if (!isset($build['#no_add_to_cart']) || !$build['#no_add_to_cart']) {
        $route = \Drupal::routeMatch();
        if ($route->getRouteName() == 'alshaya_acm_product.product_modal') {
          return;
        }

        $build['#no_add_to_cart'] = TRUE;

        $node = $route->getParameter('node');
        $node_view_mode = 'teaser';
        if ($node instanceof NodeInterface && $node->bundle() == 'acq_product') {
          $node_sku = $node->get('field_skus')->first()->getString();
          $node_view_mode = $entity->getSku() == $node_sku ? 'full' : 'teaser';
        }

        $build['cart_form_placeholder'] = [
          '#type' => 'link',
          '#title' => '',
          '#url' => Url::fromRoute(
            'alshaya_acm_product.get_cart_form', [
              'view_mode' => $node_view_mode,
              'entity' => $entity->id(),
            ]
          ),
          '#attributes' => [
            'class' => [
              'use-ajax',
              'add-to-cart-form-placeholder',
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function alshaya_acm_product_views_pre_build(ViewExecutable $view) {
  // Alter number of items per page for PLP / Search pages.
  if (in_array($view->id(), ['search', 'alshaya_product_list'])) {
    $list_view_items_per_page = \Drupal::config('alshaya_acm_product.settings')->get('list_view_items_per_page');
    $view->setItemsPerPage($list_view_items_per_page);
  }
}

/**
 * Implements hook_preprocess_views_infinite_scroll_pager().
 */
function alshaya_acm_product_preprocess_views_infinite_scroll_pager(&$vars) {
  global $pager_page_array;

  if (isset($vars['view']) && in_array($vars['view']->id(), ['search', 'alshaya_product_list'])) {
    $search_page = $vars['view']->id() == 'search' && $vars['view']->current_display == 'page';
    $product_list = $vars['view']->id() == 'alshaya_product_list' && in_array($vars['view']->current_display, ['block_1', 'block_2']);
    $page_auto_load = \Drupal::config('alshaya_acm_product.settings')->get('list_view_auto_page_load_count');

    // Load content automatically only if the auto load page count is > 0.
    if (($search_page || $product_list) && ($page_auto_load)) {
      $element = $vars['element'];

      // Change infinite scroll to load more button after x scrolls.
      $vars['options']['automatically_load_content'] = TRUE;
      if (($pager_page_array[$element] + 1) % $page_auto_load == 0 && $pager_page_array[$element] !== 0) {
        $vars['options']['automatically_load_content'] = FALSE;
      }

      $vars['attributes'] = new Attribute([
        'class' => ['js-pager__items', 'pager'],
        'data-drupal-views-infinite-scroll-pager' => $vars['options']['automatically_load_content'] ? 'automatic' : TRUE,
      ]);

      // Expose offset settings to JS.
      $vars['#attached']['drupalSettings']['views_infinite_scroll'] = ['auto_load_offset' => \Drupal::config('alshaya_acm_product.settings')->get('auto_load_trigger_offset')];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_customer_cart_form_alter(&$form, FormStateInterface $form_state) {
  if (empty($form['cart'])) {
    return;
  }

  // Including the utility file.
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  $config = \Drupal::config('alshaya_acm_product.basket_delivery');
  $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

  foreach ($form['cart'] as $id => $item) {
    if (is_array($item) && isset($item['quantity'])) {
      $home_delivery = [];
      $home_delivery['#theme'] = 'basket_delivery_option';
      $home_delivery['#title'] = $config->get('home_delivery_title');
      $home_delivery['#tooltip'] = $config->get('home_delivery_tooltip');
      $home_delivery['#type'] = alshaya_acm_product_available_home_delivery($id) ? 'home-delivery' : 'home-delivery not-available';

      $click_collect_delivery = [];
      $click_collect_delivery['#theme'] = 'basket_delivery_option';
      $click_collect_delivery['#title'] = $config->get('click_collect_title');
      $click_collect_delivery['#tooltip'] = $config->get('click_collect_tooltip');
      $click_collect_delivery['#type'] = alshaya_acm_product_available_click_collect($id) ? 'click-collect' : 'click-collect not-available';

      $delivery_options = '<div class="delivery-options-mobile">' . t('Available delivery options') . '</div>';
      $delivery_options .= '<div class="delivery-options-tooltip-wrapper">';
      $delivery_options .= isset($home_delivery) ? render($home_delivery) : '';
      $delivery_options .= isset($click_collect_delivery) ? render($click_collect_delivery) : '';
      $delivery_options .= '</div>';

      $form['cart'][$id]['delivery_options'] = [
        '#markup' => $delivery_options,
      ];

      $form['cart'][$id]['delivery_options']['#wrapper_attributes'] = ['class' => ['delivery-option']];

      // For mobile, render free gift promotion as the last table column.
      // Get promotions for the SKU.
      $sku_entity = SKU::loadFromSku($item['name']['#item_code']);
      $line_item_promotions = $sku_manager->getPromotionsFromSkuId($sku_entity, 'default', ['cart']);

      // Extract free gift promos.
      $free_gift_promos = [];
      foreach ($line_item_promotions as $promo) {
        if (!empty($promo['skus'])) {
          $free_gift_promos[] = $promo;
        }
      }

      // Render each free gift promo via a theme function.
      if (!empty($free_gift_promos)) {
        foreach ($free_gift_promos as $key => $promotion) {
          if (!empty($free_gift_promos)) {
            $free_sku_entity = SKU::loadFromSku($promotion['skus'][0]['value']);
            $free_gift_promos[$key]['sku_title'] = $free_sku_entity->get('name')->getString();
            $free_gift_promos[$key]['sku_entity_id'] = $free_sku_entity->id();
          }
        }

        $form['cart'][$id]['promo_text'] = [
          '#theme' => "free_gift_cart_label",
          '#promos' => $free_gift_promos,
        ];
      }

      $form['cart'][$id]['promo_text']['#wrapper_attributes'] = ['class' => ['free-gifts-wrapper']];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_product_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  // Load SKU entity.
  $sku_entity = SKU::load($form['sku_id']['#value']);

  if (empty($sku_entity)) {
    return;
  }

  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
  $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

  $form['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

  $sku_identifier = strtolower(Html::cleanCssIdentifier($sku_entity->getSku()));
  $form['quantity']['#prefix'] = '<span class="quantity-' . $sku_identifier . '">';
  $form['quantity']['#suffix'] = '</span>';

  $form['quantity']['#type'] = 'select';
  $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options();
  $form['quantity']['#validated'] = TRUE;
  $form['quantity']['#attributes']['class'][] = 'edit-quantity';
  unset($form['quantity']['#size']);

  // We need to change the markup for submit button.
  // @see alshaya_white_label_theme_suggestions_input_alter().
  $form['add_to_cart']['#attributes']['data-twig-suggestion'] = 'addtocart';
  $form['add_to_cart']['#attributes']['class'][] = 'edit-add-to-cart';
  // This is require for ajax to work properly with multiple forms on one page.
  $form['add_to_cart']['#id'] = 'edit-add-to-cart-' . $sku_entity->id();
  $form['add_to_cart']['#attributes']['id'] = 'edit-add-to-cart-' . $sku_entity->id();
  $form['add_to_cart']['#name'] = 'add_to_cart_' . $sku_entity->id();

  $display_settings = \Drupal::config('alshaya_acm_product.display_settings');
  $swatches = $display_settings->get('swatches')['pdp'];
  $form['#attached']['drupalSettings']['show_configurable_boxes_after'] = $display_settings->get('show_configurable_boxes_after');

  if (isset($form['ajax'], $form['ajax']['configurables'])) {
    // Prepare array of just the configurable options.
    $configurables = [];
    foreach ($form['ajax']['configurables'] as $configurable_key => $configurable) {
      if (is_array($configurable) && !empty($configurable['#options'])) {
        $configurables[$configurable_key] = $configurable;
      }
    }

    // If there are no options to display, we show the product as not
    // available.
    if (empty($configurables)) {
      $form['ajax']['configurables'] = [
        '#markup' => '',
      ];
      $form['quantity'] = [
        '#title' => '',
        '#markup' => '',
      ];
      $form['add_to_cart'] = [
        '#markup' => '<span class="out-of-stock">' . t('not available') . '</span>',
      ];

      return;
    }

    $form['ajax']['#attributes']['class'][] = 'configurable-wrapper-' . $sku_identifier;

    $product_tree = $form_state->get('tree');

    // Do first to disable for level one or only configurable options.
    $empty_selected = [];
    $sku_manager->disableUnavailableOptions($sku_entity, $form['ajax']['configurables'], $product_tree, $empty_selected);

    if (count($form['ajax']['configurables']) > 1) {
      /** @var \Drupal\acq_sku\CartFormHelper $cart_form_helper */
      $cart_form_helper = \Drupal::service('acq_sku.cart_form_helper');

      // Disable un-available combinations.
      $root_attribute_code = $cart_form_helper->getFirstAttribute(
        $sku_entity->get('attribute_set')->getString()
      );

      $user_input_configurables = $form_state->getUserInput();
      $selected = $user_input_configurables['configurables'] ?? [];
      $selected = array_filter($selected);

      if ($selected && count($selected) != count($product_tree['configurables'])) {
        $delete_next = FALSE;

        // Cleanup selected value.
        foreach ($selected as $code => $value) {
          if ($delete_next) {
            unset($selected[$code]);
            continue;
          }

          // We will remove all selected values after matching trigger.
          if ($user_input_configurables['_triggering_element_name'] == 'configurables[' . $code . ']') {
            $delete_next = TRUE;
          }
        }

        $form_state->setValue('configurables', $selected);
        $user_input_configurables['configurables'] = $selected;
        $form_state->setUserInput($user_input_configurables);
      }

      $first_child = $sku_manager->getFirstChildForSku(
        $sku_entity,
        $root_attribute_code,
        $selected,
        $form['ajax']['configurables'][$root_attribute_code]
      );

      if ($first_child instanceof SKU) {
        $plugin = $sku_entity->getPluginInstance();
        $first_child_root_attr_value = $plugin->getAttributeValue($first_child->id(), $root_attribute_code);
      }

      $root_attribute_options = $form['ajax']['configurables'][$root_attribute_code]['#options'];

      // Set the color attribute as default only if user has not made a
      // selection.
      if ((isset($root_attribute_options[$first_child_root_attr_value])) &&
        (!isset($user_input_configurables['configurables'], $user_input_configurables['configurables'][$root_attribute_code]))) {
        $form['ajax']['configurables'][$root_attribute_code]['#options_attributes'][$first_child_root_attr_value]['selected'] = 'selected';
        $selected = [$root_attribute_code => $first_child_root_attr_value];
        $form_state->setValue('configurables', $selected);
        $user_input_configurables['configurables'] = $selected;
        $form_state->setUserInput($user_input_configurables);
      }

      // Avoid NULL values.
      $selected = $selected ?? [];

      $sku_manager->disableUnavailableOptions($sku_entity, $form['ajax']['configurables'], $product_tree, $selected);

      $form_state->setValue('configurables', $selected);
      $user_input_configurables['configurables'] = $selected;
      $form_state->setUserInput($user_input_configurables);
    }
    else {
      // If only one configurable option there, select first value as default.
      if (count($configurables) == 1) {
        $options = $configurable['#options'];
        if (count($options) == 1) {
          $form['ajax']['configurables'][key($configurables)]['#value'] = key($options);
          $user_input = $form_state->getUserInput();
          $user_input['configurables'] = [key($configurables) => key($options)];
          $form_state->setUserInput($user_input);
        }
      }
    }

    foreach ($form['ajax']['configurables'] as $key => &$configurable) {
      if (!is_array($configurable)) {
        continue;
      }

      // Add custom ajax callback for configurables to refresh the gallery.
      $configurable['#ajax']['callback'] = 'alshaya_acm_product_configurable_form_ajax_callback';

      // Disable refocus.
      $configurable['#ajax']['disable-refocus'] = TRUE;

      unset($configurable['#ajax']['wrapper']);

      $configurable['#options_attributes'] = $configurable['#options_attributes'] ?? [];
      if (isset($configurable['#type']) && $configurable['#type'] == 'select') {
        $configurable['#empty_value'] = '';
        $configurable['#options_attributes']['']['disabled'] = 'disabled';
        $configurable['#empty_option'] = t('Select @title', ['@title' => $configurable['#title']]);
        $configurable['#attributes']['data-default-title'] = $configurable['#title'];

        if (in_array($key, $swatches)) {
          $configurable['#attributes']['class'][] = 'form-item-configurable-swatch';

          foreach ($configurable['#options'] as $value => $label) {
            if (empty($value)) {
              continue;
            }

            $swatch_sku = $sku_manager->getChildSkuFromAttribute(
              $sku_entity,
              $key,
              $value
            );

            $image = $swatch_sku->getSwatchImage();
            if (isset($image['file']) && $image['file'] instanceof FileInterface) {
              $configurable['#options_attributes'][$value]['swatch-image'] = file_create_url($image['file']->url());
            }

          }
        }
        else {
          $configurable['#attributes']['class'][] = 'form-item-configurable-select';
        }
      }
    }

    // We show the size guide link if available as prefix.
    $size_guide = _alshaya_acm_product_get_size_guide_info();
    if (isset($size_guide['link'])) {
      $configurable_options = array_keys($form['ajax']['configurables']);

      foreach ($configurable_options as $configurable_option) {
        if (in_array($configurable_option, $size_guide['attributes'])) {
          $form['ajax']['configurables'][$configurable_option]['#prefix'] = $size_guide['link'];
        }
      }
    }

    // Attach size guide link to size attribute. This is statically attached to
    // size, we don't want it for any other attributes.
    if (isset($form['ajax']['configurables']['size'])) {
      $form['ajax']['configurables']['size']['#required_error'] = t('Please select a size.');

      // @TODO: This looks like related to GTM, also for now only limited to
      // size attribute and not checking for other attributes.
      $site_default_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
      $configurable_sizes = $form['ajax']['configurables']['size'];
      if (\Drupal::languageManager()->getCurrentLanguage()->getId() !== $site_default_langcode) {
        $options = [];

        foreach ($configurable_sizes['#options'] as $key => $option) {
          $product_options_manager = \Drupal::service('acq_sku.product_options_manager');

          // Fetch taxonomy_term from option Id.
          $default_language_option = $product_options_manager->loadProductOptionByOptionId('size', $key, $site_default_langcode);
          if ($default_language_option) {
            $options[$option] = $default_language_option->getName();
          }
        }

        $form['#attached']['drupalSettings']['alshaya_product_size_config'] = $options;
      }
    }

    // Process stock now.
    if (count($product_tree['configurables']) > 1) {
      if (!empty($selected)) {
        // Get all child SKUs possible for the selected root attribute to do a
        // stock check on visible child attributes that belong to the child
        // SKUs.
        $variations = alshaya_acm_product_fetch_selected_option_tree($product_tree, $selected);

        // Check stock for variations & update options.
        foreach ($variations as $key => $variation) {
          if ($key === '#available_config') {
            continue;
          }

          if ($variation instanceof SKU) {
            $attribute_parts = explode(':', $key);

            $quantity = (int) alshaya_acm_get_stock_from_sku($variation);
            if ($quantity > 0) {
              // Set the dropdown quantity options only for selected option.
              if (isset($selected[$attribute_parts[0]]) && $selected[$attribute_parts[0]] == $key) {
                $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
              }
            }
          }
        }
      }
    }
    else {
      foreach ($form['ajax']['configurables'] as $configurable_key => &$configurable) {
        if (!is_array($configurable)) {
          continue;
        }

        // Check if it is a dropdown, we disable the options for which we don't
        // have stock. Apply this check only if we have just 1 configurable
        // attribute. With multiple conf attributes, we cannot get the SKU with
        // a single option.
        if (isset($configurable['#options'])) {
          foreach ($configurable['#options'] as $key => $value) {
            $sku = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), [$configurable_key => $key]);
            if ($sku instanceof SKU) {
              $quantity = (int) alshaya_acm_get_stock_from_sku($sku);
              if ($quantity > 0) {
                // Set the dropdown quantity options only for selected option.
                if (isset($selected[$configurable_key]) && $selected[$configurable_key] == $key) {
                  $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
                }
              }
              else {
                $configurable['#options_attributes'][$key]['disabled'] = 'disabled';
              }
            }
            // For some reason we don't have proper data for the option.
            else {
              unset($configurable['#options'][$key]);
            }
          }
        }

        // If there are no options to display for any of the option, we show the
        // product as not available.
        if (empty($configurable['#options'])) {
          $configurable = [
            '#markup' => '',
          ];
          $form['quantity'] = [
            '#title' => '',
            '#markup' => '',
          ];
          $form['add_to_cart'] = [
            '#markup' => '<span class="out-of-stock">' . t('not available') . '</span>',
          ];
        }

        // If all the options are disabled, we show the product is out of stock.
        // We reduce one in options_attributes count as we will always have
        // empty_option disabled.
        elseif (count($configurable['#options']) == (count(array_column($configurable['#options_attributes'], 'disabled')) - 1)) {
          $configurable = [
            '#markup' => '',
          ];
          $form['quantity'] = [
            '#title' => '',
            '#markup' => '',
          ];
          $form['add_to_cart'] = [
            '#markup' => '<span class="out-of-stock">' . t('Out of stock') . '</span>',
          ];
        }
      }
    }
  }
  // Stock check for quantity for all other products.
  elseif ($quantity = alshaya_acm_get_stock_from_sku($sku_entity)) {
    $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
  }
  else {
    $form['quantity'] = [
      '#title' => '',
      '#markup' => '',
    ];
    $form['add_to_cart'] = [
      '#markup' => '<span class="out-of-stock">' . t('out of stock') . '</span>',
    ];
  }
}

/**
 * Overridden ajax callback for configurable add to cart form.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState object.
 *
 * @return array
 *   Build array.
 */
function alshaya_acm_product_configurable_form_ajax_callback(array &$form, FormStateInterface $form_state) {
  // Product attributes that can possibly change whith selected attribute values
  // & hence need to be re-rendered in the AJAX callback.
  $dynamic_parts = call_user_func_array($form_state->prepareCallback('::configurableAjaxCallback'), [&$form, &$form_state]);

  $sku = SKU::load($form['sku_id']['#value']);

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  // Configurable product tree keyed with possible config tree, whose leaf items
  // contain the SKUs depending on the tree path traversed.
  $product_tree = $form_state->get('tree');

  // List of attributes selected by end-users on the form.
  $selected = $form_state->getValue('configurables');

  $selected = $selected ?? [];

  // Calculate available config options based on the attribute value selected,
  // in case of multiple config attributes with a product.
  if (count($product_tree['configurables']) > 1) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
    $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_manager->disableUnavailableOptions($sku, $dynamic_parts['configurables'], $product_tree, $selected);

    // Traverse the product tree till the point where config attributes have a
    // value.
    $tree_pointer = alshaya_acm_product_fetch_selected_option_tree($product_tree, $selected);

    // If there is only one item returned back,
    // it implies we have reached to the leaf most SKU in the tree.
    if (count($tree_pointer) === 1) {
      $tree_pointer = array_shift($tree_pointer);
    }
  }
  else {
    $tree_pointer = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), $form_state->getValue('configurables'));
  }

  if ($tree_pointer instanceof SKU) {
    $entity = alshaya_acm_product_get_display_node($tree_pointer);
    if ($quantity = alshaya_acm_get_stock_from_sku($tree_pointer)) {
      $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
    }

    $build = [];
    alshaya_acm_product_get_gallery($build, $tree_pointer, FALSE);
    if (isset($build['gallery'], $build['gallery']['product_zoom'])) {
      $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];
    }

    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $dynamic_parts['selected_variant_sku'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => [
          'selected-variant-sku',
          'selected-variant-sku-' . $sku_identifier,
        ],
      ],
      '#value' => $tree_pointer->getSku(),
    ];

    $response = new AjaxResponse();

    $price_block = $skuManager->getPriceBlock($tree_pointer);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));

    $quantity_selector = '.quantity-' . $sku_identifier;
    $response->addCommand(new ReplaceCommand($quantity_selector, $form['quantity']));

    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    // Update the promotions for the product.
    $promotion_links = '';
    $promotion_types = ['cart'];
    $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($tree_pointer, 'links', $promotion_types, 'full');

    // Filter out free gift promos.
    $promotions = array_filter($promotions, function ($promo) {
      if (!empty($promo['skus'])) {
        return FALSE;
      }

      return TRUE;
    });

    if (!empty($promotions)) {
      $promotion_links = implode('</br>', $promotions);
    }

    $response->addCommand(new HtmlCommand('.promotions', $promotion_links));

    // Update the article class to include out of stock class if not in stock.
    // Remove the class if in stock.
    $class_command = $quantity ? 'removeClass' : 'addClass';
    $response->addCommand(new InvokeCommand('article[data-vmode="full"]', $class_command, ['product-out-of-stock']));

    // Update simple product description attributes.
    $composition = $skuManager->fetchProductAttribute($tree_pointer, 'attr_composition', 'self');
    $composition_markup = [
      '#theme' => 'product_composition_markup',
    ];

    if (!empty($composition)) {
      $composition_markup['#composition']['#markup'] = $composition;
    }

    $response->addCommand(new ReplaceCommand('.composition-wrapper', $composition_markup));

    // Update simple product description attributes.
    $warning = $skuManager->fetchProductAttribute($tree_pointer, 'attr_article_warning', 'self');
    $warning_markup = [
      '#theme' => 'product_article_warning_markup',
    ];

    if (!empty($warning)) {
      $warning_markup['#warning']['#markup'] = $warning;
    }

    $response->addCommand(new ReplaceCommand('.warning-wrapper', $warning_markup));

    // Update cross-sell region with products.
    if (\Drupal::config('alshaya_acm.settings')->get('display_crosssell')
      && $form_state->getUserInput()['sku_view_mode'] == 'full') {
      $cross_sell_markup = [
        '#theme' => 'products_horizontal_slider',
        '#section_title' => t('Customers also bought'),
        '#views_name' => 'product_slider',
        '#views_display_id' => 'block_product_slider',
      ];

      if (!empty($cross_sell_skus = $skuManager->getLinkedSkusWithFirstChild($tree_pointer, LINKED_SKU_TYPE_CROSSSELL))) {
        $cross_sell_markup['#data'] = $skuManager->filterRelatedSkus(array_unique($cross_sell_skus));
      }

      // Make sure the wrapper div is present even in case of no cross-sell
      // items.
      $cross_sell_markup_desktop = array_merge($cross_sell_markup, ['#prefix' => '<div class="horizontal-crossell above-mobile-block">', '#suffix' => '</div>']);
      $cross_sell_markup_mobile = array_merge($cross_sell_markup, ['#prefix' => '<div class="horizontal-crossell mobile-only-block">', '#suffix' => '</div>']);

      $response->addCommand(new InsertCommand('.horizontal-crossell.mobile-only-block', $cross_sell_markup_mobile));
      $response->addCommand(new InsertCommand('.horizontal-crossell.above-mobile-block', $cross_sell_markup_desktop));
    }

    // React for click & collect if stock is available.
    if (\Drupal::moduleHandler()->moduleExists('alshaya_click_collect') && $quantity) {
      // Settings variable.
      $settings = ['alshaya_acm' => ['product_sku' => $sku->getSku()]];

      $config = \Drupal::config('alshaya_click_collect.settings');

      if (!alshaya_acm_product_available_click_collect($tree_pointer->getSku())) {
        $settings['alshaya_acm']['storeFinder'] = FALSE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_unavailable');
      }
      else {
        $settings['alshaya_acm']['storeFinder'] = TRUE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_subtitle');
      }

      $response->addCommand(new BaseCommand('updatePDPClickCollect', $settings));

      $response->addCommand(new SettingsCommand($settings, TRUE), TRUE);
    }

    \Drupal::moduleHandler()->alter('alshaya_acm_product_ajax_cart_form', $response, $entity, $quantity);
    return $response;
  }
  else {
    $build = [];
    $sku = $product_tree['parent'];

    $configurable_codes = array_keys($product_tree['configurables']);
    $attribute = reset($configurable_codes);
    $option_id = $selected[$attribute];

    // Pull out & update gallery image based on the selected color & first item.
    // @TODO: Verify this in HnM and MC.
    $first_child = $skuManager->getChildSkuFromAttribute($sku, $attribute, $option_id);
    alshaya_acm_product_get_gallery($build, $first_child);

    // If no image found on simple SKUs, use parent SKUs image.
    if (empty($build['gallery']['product_zoom'])) {
      alshaya_acm_product_get_gallery($build, $sku);
    }

    $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];

    $response = new AjaxResponse();
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $price_block = $skuManager->getPriceBlock($sku);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // Don't display placeholder again.
    unset($dynamic_parts['add_to_cart']);

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));
    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    return $response;
  }

  return $dynamic_parts;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_product_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'page_title_block' block on PDP page.
  if ($operation == 'view' && $block->getPluginId() == 'page_title_block') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.node.canonical') {
      /* @var \Drupal\node\Entity\Node $node */
      $node = $route->getParameter('node');
      return AccessResult::forbiddenIf($node->bundle() == 'acq_product');
    }
  }
}

/**
 * Helper function to get size guide info if enabled and available.
 *
 * @return array
 *   Array containing link html and attributes.
 */
function _alshaya_acm_product_get_size_guide_info() {
  $info = [];

  $config = \Drupal::config('alshaya_acm_product.size_guide');

  if ($config->get('size_guide_enabled')) {
    $options = [
      'attributes' => [
        'class' => ['size-guide-link', 'use-ajax'],
        'data-dialog-type' => 'dialog',
        'data-dialog-options' => Json::encode(['height' => 400, 'width' => 700]),
      ],
    ];
    $url = Url::fromRoute('alshaya_acm_product.size_guide_modal', [], $options);
    $link = Link::fromTextAndUrl(t('Size Guide'), $url);
    $info['link'] = $link->toString();

    $info['attributes'] = explode(',', $config->get('size_guide_attributes'));
  }

  return $info;
}

/**
 * Wrapper function to check if SKU is buyable.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity object.
 *
 * @return bool
 *   SKU is buyable or not.
 */
function alshaya_acm_product_is_buyable(SKU $sku_entity) {
  $all_products_buyable = \Drupal::config('alshaya_acm_product.settings')->get('all_products_buyable');
  // For now we have only one condition, we may have more in future.
  return $all_products_buyable || (bool) $sku_entity->get('attr_is_buyable')->getString();
}

/**
 * Implements template_preprocess_products_horizontal_slider().
 */
function alshaya_acm_product_preprocess_products_horizontal_slider(&$variables) {
  if (!empty($variables['data'])) {
    $variables['data'] = views_embed_view($variables['views_name'], $variables['views_display_id'], implode(',', $variables['data']));
  }
}

/**
 * Get the default image url for the product.
 *
 * @return \Drupal\file\Entity\File|null|static
 *   File object.
 */
function _alshaya_acm_product_get_product_default_main_image() {
  static $product_default_image;

  // If default image available in static cache, then use it.
  if (!empty($product_default_image)) {
    return $product_default_image;
  }

  // If cached version available.
  if ($cached_default_product_image = \Drupal::cache()->get('product_default_image')) {
    // Set in static cache.
    $product_default_image = $cached_default_product_image->data;
    return $product_default_image;
  }

  // Get file id from config.
  $default_image_fid = \Drupal::config('alshaya_acm_product.settings')->get('product_default_image');
  if (!empty($default_image_fid)) {
    $file = File::load($default_image_fid);
    if ($file instanceof File) {
      // Set the cache.
      \Drupal::cache()->set('product_default_image', $file);
      // Set the static cache.
      $product_default_image = $file;
      return $product_default_image;
    }
  }

  return NULL;
}

/**
 * Implements hook_acq_sku_base_field_additions_alter().
 */
function alshaya_acm_product_acq_sku_base_field_additions_alter(array &$fields = []) {
  $alshaya_acm_product_fields = \Drupal::config('alshaya_acm_product.sku_base_fields')->get('fields');
  $fields = array_merge($fields, $alshaya_acm_product_fields);
}

/**
 * Implements hook_alshaya_master_post_drupal_install().
 */
function alshaya_acm_product_alshaya_master_post_drupal_install() {
  // Add fields to store the values from attributes as fields.
  \Drupal::service('acq_sku.fields_manager')->addFields();
}

/**
 * Implements hook_alshaya_acm_product_ajax_cart_form_alter().
 */
function alshaya_acm_product_alshaya_acm_product_ajax_cart_form_alter(AjaxResponse &$response, $entity, $stock) {
  if ($stock <= 0) {
    $response->addCommand(new InvokeCommand("#pdp-home-delivery.home-delivery .c-accordion_content", 'addClass', ['hidden-important']));
    // @codingStandardsIgnoreLine
    $response->addCommand(new InvokeCommand("#pdp-home-delivery.home-delivery", 'accordion', ['option', 'disabled', TRUE]));
  }
  else {
    $response->addCommand(new InvokeCommand("#pdp-home-delivery.home-delivery .c-accordion_content", 'removeClass', ['hidden-important']));
    // @codingStandardsIgnoreLine
    $response->addCommand(new InvokeCommand("#pdp-home-delivery.home-delivery", 'accordion', ['option', 'disabled', FALSE]));
  }
}

/**
 * Implements hook_language_switch_links_alter().
 */
function alshaya_acm_product_language_switch_links_alter(array &$links, $type, Url $url) {
  $selected_query = \Drupal::request()->query->get('selected');

  /** @var \Drupal\Core\Routing\CurrentRouteMatch $current_route_matcher */
  $current_route_matcher = \Drupal::service('current_route_match');

  // Alter block only if we have selected color query parameter on a PDP.
  if (($selected_query) &&
    $current_route_matcher->getRouteName() == 'entity.node.canonical' &&
    ($node = $current_route_matcher->getParameter('node')) &&
    $node->getType() == 'acq_product') {

    // Remove the selected color parameter in the query string for all except
    // current language.
    $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($links as $langcode => $link) {
      if ($langcode != $current_langcode && isset($links[$langcode]['query']['selected'])) {
        unset($links[$langcode]['query']['selected']);
      }
    }
  }
}
