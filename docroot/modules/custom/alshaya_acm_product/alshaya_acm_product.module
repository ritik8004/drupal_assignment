<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\acq_sku\Plugin\AcquiaCommerce\SKUType\Configurable;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_acq_sku_product_node_alter().
 */
function alshaya_acm_product_acq_sku_product_node_alter(NodeInterface $node, array $product) {
  $visible = $product['visibility'] == 1;
  $node->setPublished($visible);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_acm_product_acq_sku_presave(SKUInterface $sku) {
  // @TODO: Simple SKU are processed by default in commerce code, configurable
  // SKUs are processed below, we will need to check for bundled products
  // when we work on it: MMCPA-211.
  if ($sku->bundle() == 'configurable') {
    // Get the configurable attributes array.
    $configurable_attributes_data = unserialize($sku->get('field_configurable_attributes')->getString());

    // Get the configurable fields we want to capture separately as fields.
    $fields = \Drupal::config('alshaya_acm_product.sku_base_fields')->get('fields');
    $configurableFields = array_filter($fields, function ($field) {
      return (bool) $field['configurable'];
    });

    // Loop through the configurable fields.
    foreach ($configurableFields as $key => $field) {
      $field_key = 'attr_' . $key;

      // Loop through all configurable data available from API.
      foreach ($configurable_attributes_data as $attribute_data) {
        if ($attribute_data['code'] == $key) {
          foreach ($attribute_data['values'] as $index => $value) {
            $sku->get($field_key)->set($index, $value['value_id']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

    $sku = $entity->get('field_skus')->first()->getString();
    $skuEntity = SKU::loadFromSku($sku);

    if ($view_mode == 'full') {

      // Get up sell block for the product.
      $items = $skuEntity->get('upsell')->getValue();

      if (!empty($items)) {
        $up_sell_skus = array_column($items, 'value');
        $up_sell_skus = array_slice($up_sell_skus, 0, 12);
        $build['up_sell'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $up_sell_skus));
        // Weight will have no effect later once template is modified.
        $build['up_sell']['#weight'] = 10;
      }

      // Get cross sell block for the product.
      $items = $skuEntity->get('crosssell')->getValue();

      if (!empty($items)) {
        $cross_sell_skus = array_column($items, 'value');
        $cross_sell_skus = array_slice($cross_sell_skus, 0, 12);
        $build['cross_sell'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $cross_sell_skus));
        // Weight will have no effect later once template is modified.
        $build['cross_sell']['#weight'] = 11;
      }

      // Get cross sell block for the product.
      $items = $skuEntity->get('related')->getValue();

      if (!empty($items)) {
        $related_skus = array_column($items, 'value');
        $related_skus = array_slice($related_skus, 0, 12);
        $build['related'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $related_skus));
        // Weight will have no effect later once template is modified.
        $build['related']['#weight'] = 11;
      }

      alshaya_acm_product_get_gallery($build, $skuEntity);
    }
    elseif ($view_mode == 'teaser') {

      // Get the image.
      $build['image_url'] = [];
      $sku_media = alshaya_acm_product_get_sku_media($skuEntity);
      if ($sku_media) {
        $imageEntity = array_shift($sku_media);
        $build['image_url']['#markup'] = ImageStyle::load('192x168')->buildUrl($imageEntity->getFileUri());
      }

      // Get the price.
      $build['price'] = [
        '#theme' => 'alshaya_acm_price',
        '#price' => $skuEntity->get('price')->getString(),
      ];

      // Get the special price.
      // @TODO: Calculate discount and pass it once we have some realistic data.
      $build['special_price'] = NULL;
      if ($special_price = $skuEntity->get('attr_special_price')->getString()) {
        $build['special_price'] = [
          '#theme' => 'alshaya_acm_price',
          '#price' => $special_price,
        ];
      }
    }
    elseif ($view_mode == 'modal') {
      // Get the image.
      // @TODO: We need to display the full slider and zoom box.
      $build['image_url'] = NULL;
      $sku_media = alshaya_acm_product_get_sku_media($skuEntity);
      if ($sku_media) {
        $imageEntity = array_shift($sku_media);
        $build['image_url']['#markup'] = ImageStyle::load('192x168')->buildUrl($imageEntity->getFileUri());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_acm_product_acq_sku_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Remove/Hide the 'add to cart' form from product list/search page.
  if ($build['#view_mode'] == 'teaser') {
    $build['#no_add_to_cart'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {

  // Get SKU id.
  $sku_stock = [];
  $sku_entity = SKU::load($form['sku_id']['#value']);
  if ($sku_entity) {
    if ($sku = $sku_entity->getSku()) {
      // SKU stock.
      $sku_stock = \Drupal::service('acq_commerce.api')->skuStockCheck($sku);
    }
  }

  if (isset($form['ajax']) && isset($form['ajax']['configurables'])) {

    if ($form['ajax']['configurables']['size']) {
      // We show the size guide link if available as prefix.
      if ($size_guide_link = \Drupal::config('alshaya_acm_product.settings')
        ->get('size_guide_link')
      ) {
        try {
          $options = [
            'attributes' => [
              'class' => ['size-guide-link'],
              'target' => '_blank',
            ],
          ];

          // Try as external url.
          $url = Url::fromUri($size_guide_link, $options);
        }
        catch (Exception $e) {
          try {
            $options = [
              'attributes' => [
                'class' => ['use-ajax', 'size-guide-link'],
                'data-dialog-type' => 'modal',
                'data-dialog-options' => Json::encode(['width' => 'auto']),
              ],
            ];

            // Try as internal url.
            $url = Url::fromUserInput($size_guide_link, $options);
          }
          catch (Exception $e) {
            \Drupal::logger('alshaya_acm_product')
              ->error('Invalid size guide link: @link', ['@link' => $size_guide_link]);
            return;
          }
        }

        $link = Link::fromTextAndUrl(t('Size Guide'), $url);

        $form['ajax']['configurables']['size']['#prefix'] = $link->toString();
      }
    }

    foreach ($form['ajax']['configurables'] as &$configurable) {
      if (is_array($configurable)) {
        $configurable['#ajax']['callback'] = 'alshaya_acm_product_configurable_form_ajax_callback';
      }
    }

    // If item is not available in stock.
    if (!empty($sku_stock) && !$sku_stock['is_in_stock']) {
      $form['ajax']['configurables']['size'] = [
        '#markup' => '<div class="size">' . t('Size') . '</div>',
      ];
      $form['ajax']['configurables']['color'] = [
        '#markup' => '<div class="size">' . t('Color') . '</div>',
      ];
    }

  }

  // Stock check for quantity.
  if (!empty($sku_stock) && !$sku_stock['is_in_stock']) {
    $form['quantity'] = [
      '#markup' => '<div class="quantity">' . t('Quantity') . '</div>',
    ];
    $form['add_to_cart'] = [
      '#markup' => '<div class="add-to-cart button">' . t('Out of stock') . '</div>',
    ];
  }

  $form['#attached']['library'][] = 'alshaya_acm_product/product_view';
}

/**
 * Overridden ajax callback for configurable add to cart form.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState object.
 *
 * @return array
 *   Build array.
 */
function alshaya_acm_product_configurable_form_ajax_callback(array &$form, FormStateInterface $form_state) {
  $dynamic_parts = Configurable::configurableAjaxCallback($form, $form_state);

  $configurables = $form_state->getValue('configurables');
  $tree = $form_state->get('tree');
  $tree_pointer = &$tree['options'];

  foreach ($configurables as $key => $value) {
    if (empty($value)) {
      continue;
    }

    // Move the tree pointer if the selection is valid.
    if (isset($tree_pointer["$key:$value"])) {
      $tree_pointer = &$tree_pointer["$key:$value"];
    }
  }

  if ($tree_pointer instanceof SKU) {
    $build = [];
    alshaya_acm_product_get_gallery($build, $tree_pointer);

    $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];
  }

  return $dynamic_parts;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_product_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'page_title_block' block on PDP page.
  if ($operation == 'view' && $block->getPluginId() == 'page_title_block') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.node.canonical') {
      /* @var \Drupal\node\Entity\Node $node */
      $node = $route->getParameter('node');
      return AccessResult::forbiddenIf($node->bundle() == 'acq_product');
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function alshaya_acm_product_preprocess_node(&$variables) {
  if ($variables['node']->bundle() == 'acq_product') {
    if ($sku = $variables['node']->get('field_skus')) {
      $skuEntity = SKU::loadFromSku($sku->first()->getString());
      // SKU stock.
      $sku_stock = \Drupal::service('acq_commerce.api')->skuStockCheck($skuEntity->getSku());
      $variables['sku_out_of_stock'] = (bool) $sku_stock['is_in_stock'];
    }
  }
}
