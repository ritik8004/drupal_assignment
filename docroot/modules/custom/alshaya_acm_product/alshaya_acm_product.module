<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_acm_product\Controller\ProductStockController;
use Drupal\alshaya_acm_product\Event\ProductUpdatedEvent;
use Drupal\block\Entity\Block;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\BaseCommand;
use Drupal\Core\Ajax\InsertCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\node\NodeInterface;
use Drupal\search_api\IndexInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Template\Attribute;
use Drupal\alshaya_acm_product\EventSubscriber\ProcessFinishEventSubscriber;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Drupal\alshaya_acm_product\SkuManager;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_acm_product_module_implements_alter(&$implementations, $hook) {
  // To call the alshaya_acm_product_build at the end for final changes.
  if ($hook == 'alshaya_acm_product_build') {
    $group = $implementations['alshaya_acm_product_build'];
    unset($implementations['alshaya_acm_product_build']);
    $implementations['alshaya_acm_product_build'] = $group;
  }
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function alshaya_acm_product_search_api_index_items_alter(IndexInterface $index, array &$items) {
  $logger = \Drupal::logger('alshaya_acm_product');

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  foreach ($items as $item_id => $item) {
    /** @var \Drupal\node\NodeInterface $object */
    $object = $item->getOriginalObject()->getValue();

    // Deal with all indexable fields not available by default in configurable
    // parent but available in the variants.
    // Deal with final price of configurable that needs to come from variants.
    if ($object instanceof NodeInterface && $object->bundle() == 'acq_product') {
      try {
        $skuManager->processIndexItem($object, $item);
      }
      catch (\Throwable $e) {
        if ($e->getCode() != 200) {
          $logger->warning('Indexing failed for the node:@nid message:@message', [
            '@nid' => $object->id(),
            '@message' => $e->getMessage(),
          ]);
        }

        unset($items[$item_id]);
      }
    }
  }
}

/**
 * Implements hook_acq_sku_product_sku_alter().
 */
function alshaya_acm_product_acq_sku_product_sku_alter(SKU $sku, $product) {
  // Set sku activation date if product activation date available.
  if (isset($product['attributes']['product_activation_date'])) {
    $sku->created = strtotime($product['attributes']['product_activation_date']);
  }
}

/**
 * Implements hook_acq_sku_product_node_alter().
 */
function alshaya_acm_product_acq_sku_product_node_alter(NodeInterface $node, $product) {
  // Set node activation date if product activation date available.
  if (isset($product['attributes']['product_activation_date'])) {
    $node->setCreatedTime(strtotime($product['attributes']['product_activation_date']));
  }

  if ($product['type'] !== 'configurable') {
    return;
  }

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
  $skuManager->processColorNodesForConfigurable($node);
}

/**
 * Implements hook_theme().
 */
function alshaya_acm_product_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['pdp_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'title_price' => NULL,
      'subtitle' => NULL,
      'options' => [],
    ],
  ];

  $items['basket_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'tooltip' => NULL,
      'type' => NULL,
    ],
  ];

  $items['pdp_description_accordion'] = [
    'variables' => [
      'title' => NULL,
      'text' => NULL,
      'class' => NULL,
    ],
  ];

  $items['sku_teaser'] = [
    'variables' => [
      'gallery' => NULL,
      'product_url' => NULL,
      'product_base_url' => NULL,
      'product_label' => NULL,
      'price_block' => NULL,
      'price_block_identifier' => NULL,
      'promotions' => NULL,
      'stock_placeholder' => NULL,
      'swatches' => NULL,
      'swatch_more_text' => NULL,
    ],
  ];

  $items['product_price_block'] = [
    'render element' => 'elements',
    'variables' => [
      'price' => NULL,
      'final_price' => NULL,
      'discount' => NULL,
      'vat_text' => NULL,
    ],
  ];

  $items['product_labels'] = [
    'render element' => 'elements',
    'variables' => [
      'labels' => NULL,
      'sku' => NULL,
      'mainsku' => NULL,
      'type' => NULL,
    ],
  ];

  $items['product_composition_markup'] = [
    'variables' => [
      'composition' => NULL,
    ],
  ];

  $items['product_article_warning_markup'] = [
    'variables' => [
      'warning' => NULL,
    ],
  ];

  $items['product_concept_markup'] = [
    'variables' => [
      'concepts' => NULL,
    ],
  ];

  $items['products_horizontal_slider'] = [
    'variables' => [
      'data' => NULL,
      'section_title' => NULL,
      'views_display_id' => NULL,
      'views_name' => NULL,
    ],
  ];

  $items['free_gift_promotions'] = [
    'variables' => [
      'free_sku_entity_id' => NULL,
      'free_sku_code' => NULL,
      'free_sku_title' => NULL,
      'promo_title' => NULL,
      'sku_image' => NULL,
      'promo_code' => NULL,
    ],
  ];

  $items['free_gift_cart_label'] = [
    'variables' => [
      'promos' => NULL,
    ],
  ];

  $items['empty_add_to_cart_form'] = [
    'variables' => [
      'text' => NULL,
    ],
  ];

  return $items;
}

/**
 * Perform actions related to entity just added/updated/deleted.
 *
 * @param \Drupal\acq_sku\Entity\SKU $entity
 *   SKU for which event needs to be dispatched.
 * @param string $operation
 *   Operation performed.
 */
function _alshaya_acm_product_post_sku_operation(SKU $entity, string $operation) {
  try {
    // Only for configurable sku.
    if ($entity->getType() == 'configurable') {
      ProcessFinishEventSubscriber::$colorNodeSkus[] = $entity->getSku();
    }

    $event = new ProductUpdatedEvent($entity, $operation);
    \Drupal::service('event_dispatcher')->dispatch(ProductUpdatedEvent::EVENT_NAME, $event);
  }
  catch (\Exception $e) {
    // Translation might not be available.
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function alshaya_acm_product_acq_sku_insert(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity, 'insert');
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function alshaya_acm_product_acq_sku_update(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity, 'update');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function alshaya_acm_product_acq_sku_delete(SKU $entity) {
  _alshaya_acm_product_post_sku_operation($entity, 'delete');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function alshaya_acm_product_node_delete(NodeInterface $node) {
  if ($node->bundle() == 'acq_product') {
    $sku = $node->get('field_skus')->getString();
    $color = $node->get('field_product_color')->getString();

    // Delete the color nodes available in system for this particular product.
    // Do nothing when deleting color node itself.
    if ($sku && empty($color)) {
      /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
      $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
      $nids = $skuManager->getColorNodeIds($sku);

      if ($nids) {
        try {
          $storage = \Drupal::entityTypeManager()->getStorage('node');
          $nodes = $storage->loadMultiple($nids);
          $storage->delete($nodes);
          \Drupal::logger('alshaya_acm_product')->notice('Color nodes:@color_nids deleted successfully on deletion of parent node:@pid', [
            '@color_nids' => implode(',', $nids),
            '@pid' => $node->id(),
          ]);
        }
        catch (\Exception $e) {
          \Drupal::logger('alshaya_acm_product')->error('Error while deleting color nodes: @nids for node: @pid Message: @message in method: @method', [
            '@nids' => implode(',', $nids),
            '@pid' => $node->id(),
            '@message' => $e->getMessage(),
            '@method' => 'alshaya_acm_product_node_delete',
          ]);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (($entity->bundle() == 'acq_product')) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku = $skuManager->getSkuForNode($entity);

    $product_settings = \Drupal::config('alshaya_acm_product.settings');
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

    /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
    $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku));
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU) {
      $build['#attributes']['data-sku'] = $sku_entity->getSku();
      $build['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

      if ($view_mode == 'search_result') {
        $build['labels'] = [
          '#theme' => 'product_labels',
          '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
          '#sku' => $sku_identifier,
          '#mainsku' => $sku_identifier,
          '#type' => 'plp',
        ];
      }
      elseif ($view_mode == 'full') {
        $sku = $skuManager->getSkuForNode($entity, TRUE);
        if (empty($sku)) {
          throw new NotFoundHttpException();
        }

        $skuNode = $skuManager->getDisplayNode($sku, FALSE);

        // Show 404 if current node is color node.
        // Redirecting to proper node may make it indexed and we don't want
        // this to be indexed or known as valid url in any case.
        if ($skuNode instanceof NodeInterface && $skuNode->id() != $entity->id()) {
          throw new NotFoundHttpException();
        }

        // Do not display PDP for free gift.
        if ($skuManager->isSkuFreeGift($sku_entity)) {
          throw new NotFoundHttpException();
        }

        $context = 'pdp';

        // This is required to allow showing different gallery on page load
        // when user clicked on swatch.
        $build['#cache']['contexts'][] = 'url';

        if (!$skuManager->isProductInStock($sku_entity)) {
          $build['#attributes']['class'][] = 'product-out-of-stock';
        }

        // Get cross sell block for the product.
        if (\Drupal::config('alshaya_acm.settings')->get('display_crosssell')) {
          if (!empty($cross_sell_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_CROSSSELL))) {
            $build['cross_sell'] = [
              '#theme' => 'products_horizontal_slider',
              '#data' => $skuManager->filterRelatedSkus(array_unique($cross_sell_skus)),
              '#section_title' => t('Customers also bought', [], ['context' => 'alshaya_static_text|pdp_crosssell_title']),
              '#views_name' => 'product_slider',
              '#views_display_id' => 'block_product_slider',
            ];

            // Weight will have no effect later once template is modified.
            $build['cross_sell']['#weight'] = 11;
          }
        }

        if (!empty($up_sell_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_UPSELL))) {
          $build['up_sell'] = [
            '#theme' => 'products_horizontal_slider',
            '#data' => $skuManager->filterRelatedSkus(array_unique($up_sell_skus)),
            '#section_title' => t('You may also like', [], ['context' => 'alshaya_static_text|pdp_upsell_title']),
            '#views_name' => 'product_slider',
            '#views_display_id' => 'block_product_slider',
          ];
          // Weight will have no effect later once template is modified.
          $build['up_sell']['#weight'] = 10;
        }

        if (!empty($related_skus = $skuManager->getLinkedSkusWithFirstChild($sku_entity, LINKED_SKU_TYPE_RELATED))) {
          $build['related'] = [
            '#theme' => 'products_horizontal_slider',
            '#data' => $skuManager->filterRelatedSkus(array_unique($related_skus)),
            '#section_title' => t('Related', [], ['context' => 'alshaya_static_text|pdp_related_title']),
            '#views_name' => 'product_slider',
            '#views_display_id' => 'block_product_slider',
          ];
          // Weight will have no effect later once template is modified.
          $build['related']['#weight'] = 11;
        }

        // Get the gallery for selected SKU if selected sku id available in
        // query params, else show it from main parent sku itself.
        $sku_for_gallery = $sku_entity;
        $selected_variant = $sku_entity;

        if ($sku_entity->bundle() == 'configurable') {
          // Show images from parent only on page load if images from child
          // are to be shown after selection of all children and there are more
          // then one configuration for this product.
          $selected_variant = $skuManager->getSelectedVariant($sku_entity) ?? $sku_entity;

          try {
            // Try to load images first for child we will display as selected.
            $sku_for_gallery = $skuImagesManager->getSkuForGallery($selected_variant, TRUE, '');

            if (empty(\Drupal::request()->query->get('selected')) && $sku_for_gallery->bundle() === 'simple') {
              // Set the id in $_GET to use later for add to cart form.
              \Drupal::request()->query->set('selected', $sku_for_gallery->id());
            }
          }
          catch (\Exception $e) {
            $sku_for_gallery = $sku_entity;
          }
        }

        if ($sku_for_gallery instanceof SKUInterface) {
          $pdp_layout = $skuManager->getPdpLayout($sku_for_gallery, 'pdp');
          $build['gallery'] = $skuImagesManager->getGallery($sku_for_gallery, $pdp_layout, '', TRUE);
        }

        $build['price_block'] = $skuManager->getPriceBlock($selected_variant);

        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

        $build['item_code']['#markup'] = $sku;

        // If delivery available for the SKU.
        if (!empty($delivery_data = _alshaya_acm_product_get_delivery_link($sku_entity))) {
          $build['delivery_link'] = [
            '#markup' => $delivery_data['link'],
          ];
        }

        // Initialise home delivery variable.
        $build['home_delivery'] = [];

        // Display delivery options only if product is buyable.
        if (alshaya_acm_product_is_buyable($sku_entity)) {
          // Check if home delivery is available for this product.
          if (alshaya_acm_product_available_home_delivery($sku)) {
            $home_delivery_config = alshaya_acm_product_get_home_delivery_config();

            // @TODO: Next day delivery not available for now.
            $build['home_delivery'] = [
              '#theme' => 'pdp_delivery_option',
              '#title' => $home_delivery_config['title'],
              '#subtitle' => $home_delivery_config['subtitle'],
              '#options' => [
                'standard_title' => $home_delivery_config['standard_title'],
                'standard_subtitle' => $home_delivery_config['standard_subtitle'],
              ],
            ];
          }
        }

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types, 'full');

        if (!empty($promotions)) {
          $free_gift_promotions = $generic_promotions = [];
          // Split promotions array into 2 parts, since we need to render
          // free gift promotions in a different way.
          foreach ($promotions as $promotion) {
            if (empty($promotion['skus'])) {
              $generic_promotions[] = $promotion;
            }
            else {
              $free_gift_promotions[] = $promotion;
            }
          }

          if (!empty($generic_promotions)) {
            $build['promotions'] = [
              '#markup' => implode('</br>', $generic_promotions),
            ];
          }

          // For free gift promotions, the promo needs to be rendered in a
          // different way.
          if (!empty($free_gift_promotions)) {
            foreach ($free_gift_promotions as $free_gift_promotion) {
              $free_sku_entity = SKU::loadFromSku($free_gift_promotion['skus'][0]['value']);

              // If not sku entity object.
              if (!$free_sku_entity instanceof SKUInterface) {
                continue;
              }

              $free_sku_title = $free_sku_image = [
                '#type' => 'link',
                '#url' => Url::fromRoute('alshaya_acm_product.sku_modal',
                  [
                    'acq_sku' => $free_sku_entity->id(),
                    'js' => 'nojs',
                  ]),
                '#attributes' => [
                  'class' => ["use-ajax"],
                  'data-dialog-type' => "modal",
                  'data-dialog-options' => '{"width":"auto"}',
                ],
              ];
              $free_sku_title['#title'] = $free_sku_entity->get('name')->getString();
              $free_sku_title = \Drupal::service('renderer')->render($free_sku_title);

              // Get sku title & image.
              $build['free_gift_promotions'] = [
                '#theme' => 'free_gift_promotions',
                '#free_sku_entity_id' => $free_sku_entity->id(),
                '#free_sku_code' => $free_sku_entity->getSku(),
                '#free_sku_title' => $free_sku_title,
                '#promo_title' => $free_gift_promotion['text'],
                '#promo_code' => $free_gift_promotion['coupon_code'],
              ];

              /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
              $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');
              $free_sku_media = $skuImagesManager->getFirstImage($free_sku_entity);

              // If free gift sku has no media, then we check from the default
              // image from the configuration.
              if (empty($free_sku_media) && !empty($default_image = $skuImagesManager->getProductDefaultImage())) {
                $free_sku_media = [
                  'label' => $free_sku_entity->label(),
                  'file' => $default_image,
                ];
              }

              if ($free_sku_media) {
                $free_sku_image['#title'] = $skuManager->getSkuImage($free_sku_media, '192x168');
                $build['free_gift_promotions']['#sku_image'] = \Drupal::service('renderer')->render($free_sku_image);
              }
            }
          }
        }
      }
      elseif ($view_mode == 'teaser' || $view_mode == 'product_category_carousel') {
        $context = $view_mode;

        // Get the image.
        $build['image'] = [];

        $sku_media = $skuImagesManager->getFirstImage($sku_entity);

        if ($sku_media) {
          $build['image'] = $skuManager->getSkuImage($sku_media, '291x288');
        }

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }

        // Do not render VAT text along with price for teaser.
        $build['price_block'] = $skuManager->getPriceBlock($sku_entity, $view_mode);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

        $build['labels'] = [
          '#theme' => 'product_labels',
          '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
          '#sku' => $sku_identifier,
          '#mainsku' => $sku_identifier,
          '#type' => 'plp',
        ];

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }

        // Do not show add to cart form for category carousel.
        // Show add to cart form only if config says so.
        // Show add to cart form if product is buyable.
        $class = $product_settings->get('show_cart_form_in_related') == 0 ? 'no-cart-form' : '';
        $build['show_cart_form']['#markup'] = $class;

        $build['sku_id'] = [
          '#markup' => $sku_entity->id(),
        ];

        $build['mobile_add_to_cart_form'] = [];
      }
      elseif ($view_mode == 'modal') {
        $context = 'modal';

        try {
          $sku_for_gallery = $skuImagesManager->getSkuForGallery($sku_entity);
          $pdp_layout = $skuManager->getPdpLayout($sku_for_gallery, $context);
          $build['gallery'] = $skuImagesManager->getGallery($sku_for_gallery, $pdp_layout, '', FALSE);
        }
        catch (\Exception $e) {
          // Do nothing.
        }

        // Attach libraries.
        $build['#attached']['library'][] = 'alshaya_product_zoom/cloud_zoom_pdp_gallery';

        $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
        $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;
        $build['item_code']['#markup'] = $sku;
        $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

        $promotion_types = ['cart'];

        // Get promotions for the product.
        $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, 'links', $promotion_types);
        if (!empty($promotions)) {
          $build['promotions'] = [
            '#markup' => implode('</br>', $promotions),
          ];
        }
      }

      $build['#attached']['library'][] = 'alshaya_acm_product/stock_check';

      if (isset($context)) {
        \Drupal::moduleHandler()->alter('alshaya_acm_product_build', $build, $sku_entity, $context);
      }
    }
  }
}

/**
 * Get home delivery config.
 *
 * @return array
 *   Return array of config data.
 */
function alshaya_acm_product_get_home_delivery_config() {
  $config = \Drupal::config('alshaya_acm_product.home_delivery');

  return [
    'title' => $config->get('title'),
    'subtitle' => $config->get('subtitle'),
    'standard_title' => $config->get('options_standard_title'),
    'standard_subtitle' => $config->get('options_standard_subtitle'),
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_acq_sku_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
    $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

    $pdp_layout = $skuManager->getPdpLayout($entity, 'modal');
    try {
      $skuForGallery = $skuImagesManager->getSkuForGallery($entity);
      $build['gallery'] = $skuImagesManager->getGallery($skuForGallery, $pdp_layout);
    }
    catch (\Exception $e) {
      $build['gallery'] = [];
    }

    // Attach libraries.
    $build['#attached']['library'][] = 'alshaya_product_zoom/cloud_zoom_pdp_gallery';

    $build['price_block']['#markup'] = '<div class="free-price-markup">' . t('FREE') . '</div>';

    $build['item_code']['#markup'] = $entity->getSku();

    $build['brand_logo'] = alshaya_acm_product_get_brand_logo($entity);

    $sku_media = $skuImagesManager->getFirstImage($entity);

    if ($sku_media) {
      $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
    }

    // Add PDP slider position config to variable so it is available in themes.
    $alshaya_acm_product_slider_settings = \Drupal::config('alshaya_acm_product.settings');
    $pdp_image_slider_position = $skuManager->getImageSliderPosition($entity);
    $build['image_slider_position_pdp'] = 'slider-position-' . $pdp_image_slider_position;
    // Add PDP slider position config to drupalSettings so we can use it in JS.
    $build['#attached']['drupalSettings']['alshaya_white_label']['image_slider_position_pdp'] = 'slider-position-' . $pdp_image_slider_position;

    $build['#attached']['drupalSettings']['pdp_items_mob'] = $alshaya_acm_product_slider_settings->get('cross_up_sell_items_settings.pdp_carousel_items_size_0');
    $build['#attached']['drupalSettings']['pdp_items_tab'] = $alshaya_acm_product_slider_settings->get('cross_up_sell_items_settings.pdp_carousel_items_size_768');
    $build['#attached']['drupalSettings']['pdp_items_desk'] = $alshaya_acm_product_slider_settings->get('cross_up_sell_items_settings.pdp_carousel_items_size_1025');
    // Number of items to show in a slider on PDP.
    $build['#attached']['drupalSettings']['pdp_slider_items'] = $alshaya_acm_product_slider_settings->get('pdp_slider_items_settings.pdp_slider_items_number');
    $build['#attached']['drupalSettings']['pdp_slider_items_cs_us'] = $alshaya_acm_product_slider_settings->get('pdp_slider_items_settings.pdp_slider_items_number_cs_us');
  }
}

/**
 * Implements hook_alshaya_acm_product_build_alter().
 */
function alshaya_acm_product_alshaya_acm_product_build_alter(&$build, SKUInterface $sku, $context = 'pdp') {
  switch ($context) {
    case 'teaser':
      // If no main image, then use default main image.
      if (empty($build['image'])) {
        /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
        $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');
        $default_image = $skuImagesManager->getProductDefaultImage();

        if (!empty($default_image)) {
          /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
          $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

          $sku_media = [
            'file' => $default_image,
            'label' => $sku->label(),
          ];
          $default_sku_image = $skuManager->getSkuImage($sku_media, '192x168');
          $default_sku_image['#attributes']['class'][] = 'product-default-image';
          $build['image'] = $default_sku_image;
        }
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_acm_product_acq_sku_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\acq_sku\Entity\SKU $entity */
  // Remove/Hide the 'add to cart' form from product list/search page.
  if ($build['#view_mode'] == 'teaser') {
    $build['#no_add_to_cart'] = TRUE;
  }

  // Show the placeholder to load add to cart form in full view mode.
  if ($build['#view_mode'] == 'full') {
    unset($build['name']);
    unset($build['price']);

    /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
    $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

    // We don't display form and placeholder if not buyable.
    if (!alshaya_acm_product_is_buyable($entity)) {
      $build['#no_add_to_cart'] = TRUE;

      // Display the non-buyable message and help text.
      $settings = \Drupal::config('alshaya_acm_product.settings');

      $build['not_buyable_message'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="not-buyable-message">{{ not_buyable_message | raw }}</div>',
        '#context' => [
          'not_buyable_message' => $settings->get('not_buyable_message.value'),
        ],
      ];

      // Get store finder link.
      $find_store_url = Url::fromUserInput('/store-finder')->toString();
      $not_buyable_help_text = new FormattableMarkup($settings->get('not_buyable_help_text.value'), [
        ':find_store' => $find_store_url,
      ]);

      $build['not_buyable_help_text'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="not-buyable-help-text">{{ not_buyable_help_text | raw }}</div>',
        '#context' => [
          'not_buyable_help_text' => $not_buyable_help_text,
        ],
      ];
    }
    elseif (!$sku_manager->isProductInStock($entity)) {
      $build['#no_add_to_cart'] = TRUE;
      $build['out_of_stock_message'] = [
        '#theme' => 'empty_add_to_cart_form',
        '#text' => t('Out of stock'),
      ];
    }
  }
}

/**
 * Wrapper function to get the number of items per page on listing pages.
 *
 * @return int
 *   Items per page.
 */
function _alshaya_acm_product_get_items_per_page_on_listing(): int {
  $config = \Drupal::config('alshaya_acm_product.settings');
  return intval($config->get('list_view_items_per_page'));
}

/**
 * Implements hook_views_pre_build().
 */
function alshaya_acm_product_views_pre_build(ViewExecutable $view) {
  // Alter number of items per page for PLP / Search pages.
  if (in_array($view->id(), ['search', 'alshaya_product_list'])) {
    $per_page = _alshaya_acm_product_get_items_per_page_on_listing();

    $request = \Drupal::request();
    $show_on_load = intval($request->query->get('show_on_load'));

    // If show on load for some reason is less then items we show by default
    // per page, we ignore the parameter.
    if ($show_on_load > $per_page) {
      if ($show_on_load % $per_page !== 0) {
        unset($_GET['show_on_load']);
        $request->query->set('show_on_load', NULL);
      }
      // We use the show on load only on page load.
      if (strpos($request->getQueryString(), '_wrapper_format=') === FALSE) {
        $per_page = $show_on_load;
      }
    }

    // Set custom items per page in view object.
    $view->setItemsPerPage($per_page);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function alshaya_acm_product_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'search' || $view->id() == 'alshaya_product_list') {
    $view->element['#attached']['drupalSettings']['plp_slider'] = \Drupal::config('alshaya_acm_product.display_settings')->get('plp_slider');
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function alshaya_acm_product_theme_registry_alter(array &$theme_registry) {
  // Call alshaya_acm_product_preprocess_views_infinite_scroll_pager at the end
  // to allow altering next page link.
  if (isset($theme_registry['views_infinite_scroll_pager'])) {
    $index = array_search('alshaya_acm_product_preprocess_views_infinite_scroll_pager', $theme_registry['views_infinite_scroll_pager']['preprocess functions']);
    unset($theme_registry['views_infinite_scroll_pager']['preprocess functions'][$index]);
    $theme_registry['views_infinite_scroll_pager']['preprocess functions'][] = 'alshaya_acm_product_preprocess_views_infinite_scroll_pager';
  }
}

/**
 * Implements template_preprocess_views_infinite_scroll_pager().
 */
function alshaya_acm_product_preprocess_views_infinite_scroll_pager(&$vars) {
  global $pager_page_array;

  if (isset($vars['view']) && in_array($vars['view']->id(), ['search', 'alshaya_product_list'])) {
    $search_page = $vars['view']->id() == 'search' && $vars['view']->current_display == 'page';
    $product_list = $vars['view']->id() == 'alshaya_product_list' && in_array($vars['view']->current_display, ['block_1', 'block_2']);
    $page_auto_load = \Drupal::config('alshaya_acm_product.settings')->get('list_view_auto_page_load_count');

    $request = \Drupal::request();

    /** @var \Drupal\views\ViewExecutable $view */
    $view = $vars['view'];

    // We need to change next page number only for first page load requests.
    if (strpos($request->getQueryString(), '_wrapper_format=') === FALSE) {
      if (isset($vars['items'], $vars['items']['next'], $vars['items']['next']['href'])) {
        $per_page_default = _alshaya_acm_product_get_items_per_page_on_listing();

        $per_page = $view->getItemsPerPage();
        if ($per_page !== $per_page_default) {
          $next_page = $per_page / $per_page_default;
          $query = $vars['items']['next']['href']->getOption('query');
          unset($query['show_on_load']);
          $query['page'] = $next_page;
          $vars['items']['next']['href']->setOption('query', $query);
        }
      }
    }

    // Load content automatically only if the auto load page count is > 0.
    if (($search_page || $product_list) && ($page_auto_load)) {
      $element = $vars['element'];

      $next_page = $next_page ?? $pager_page_array[$element] + 1;

      // Change infinite scroll to load more button after x scrolls.
      $vars['options']['automatically_load_content'] = TRUE;
      if ($next_page % $page_auto_load == 0) {
        $vars['options']['automatically_load_content'] = FALSE;
      }

      $vars['attributes'] = new Attribute([
        'class' => ['js-pager__items', 'pager'],
        'data-drupal-views-infinite-scroll-pager' => $vars['options']['automatically_load_content'] ? 'automatic' : TRUE,
      ]);

      // Expose offset settings to JS.
      $vars['#attached']['drupalSettings']['views_infinite_scroll'] = ['auto_load_offset' => \Drupal::config('alshaya_acm_product.settings')->get('auto_load_trigger_offset')];
    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_customer_cart_form_alter(&$form, FormStateInterface $form_state) {
  if (empty($form['cart'])) {
    return;
  }

  // Including the utility file.
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  $config = \Drupal::config('alshaya_acm_product.basket_delivery');

  /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
  $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

  foreach ($form['cart'] as $id => $item) {
    if (is_array($item) && isset($item['quantity'])) {
      $home_delivery = [];
      $home_delivery['#theme'] = 'basket_delivery_option';
      $home_delivery['#title'] = $config->get('home_delivery_title');
      $home_delivery['#tooltip'] = $config->get('home_delivery_tooltip');
      $home_delivery['#type'] = alshaya_acm_product_available_home_delivery($id) ? 'home-delivery' : 'home-delivery not-available';

      $click_collect_delivery = [];
      $click_collect_delivery['#theme'] = 'basket_delivery_option';
      $click_collect_delivery['#title'] = $config->get('click_collect_title');
      $click_collect_delivery['#tooltip'] = $config->get('click_collect_tooltip');
      $click_collect_delivery['#type'] = alshaya_acm_product_available_click_collect($id) ? 'click-collect' : 'click-collect not-available';

      $delivery_options = '<div class="delivery-options-mobile">' . t('Available delivery options') . '</div>';
      $delivery_options .= '<div class="delivery-options-tooltip-wrapper">';
      $delivery_options .= isset($home_delivery) ? render($home_delivery) : '';
      $delivery_options .= isset($click_collect_delivery) ? render($click_collect_delivery) : '';
      $delivery_options .= '</div>';

      $form['cart'][$id]['delivery_options'] = [
        '#markup' => $delivery_options,
      ];

      $form['cart'][$id]['delivery_options']['#wrapper_attributes'] = ['class' => ['delivery-option']];

      // For mobile, render free gift promotion as the last table column.
      // Get promotions for the SKU.
      $sku_entity = SKU::loadFromSku($item['name']['#item_code']);
      $line_item_promotions = $sku_manager->getPromotionsFromSkuId($sku_entity, 'default', ['cart']);

      // Extract free gift promos.
      $free_gift_promos = [];
      foreach ($line_item_promotions as $promo) {
        if (!empty($promo['skus'])) {
          $free_gift_promos[] = $promo;
        }
      }

      // Render each free gift promo via a theme function.
      if (!empty($free_gift_promos)) {
        foreach ($free_gift_promos as $key => $promotion) {
          if (!empty($free_gift_promos)) {
            $free_sku_entity = SKU::loadFromSku($promotion['skus'][0]['value']);

            // If not sku entity object.
            if (!$free_sku_entity instanceof SKUInterface) {
              continue;
            }

            $free_gift_promos[$key]['sku_title'] = $free_sku_entity->get('name')->getString();
            $free_gift_promos[$key]['sku_entity_id'] = $free_sku_entity->id();
          }
        }

        $cart_storage = \Drupal::service('acq_cart.cart_storage');
        /** @var \Drupal\acq_cart\Cart $cart */
        $cart = $cart_storage->getCart(FALSE);

        foreach ($free_gift_promos as $key => $promo) {
          // Get coupon applied on cart.
          $coupon_applied_on_cart = $cart->getCoupon();
          // If promo/free gift coupon is already applied on cart, don't show
          // it with the item on cart page.
          if (!empty($promo['coupon_code'])) {
            foreach ($promo['coupon_code'] as $key => $coupon_val) {
              if ($coupon_val['value'] == $coupon_applied_on_cart) {
                unset($free_gift_promos[$key]);
              }
            }
          }
        }

        $form['cart'][$id]['promo_text'] = [
          '#theme' => "free_gift_cart_label",
          '#promos' => $free_gift_promos,
        ];

        $form['cart'][$id]['promo_text']['#wrapper_attributes'] = ['class' => ['free-gifts-wrapper']];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_product_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
  $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

  // Load SKU entity.
  $sku_entity = $sku_manager->loadSkuById((int) $form['sku_id']['#value']);

  if (empty($sku_entity)) {
    return;
  }

  $form['#cache']['contexts'][] = 'url';

  // If Product is OOS, remove all form items and display OOS message.
  if (!$sku_manager->isProductInStock($sku_entity)) {
    $form = _alshaya_acm_product_clean_form_for_oos($form);
    return;
  }

  // Process the alter hook only once.
  static $processed = [];
  if (isset($processed[$sku_entity->id()])) {
    return;
  }
  $processed[$sku_entity->id()] = 1;

  // Ensure clientside validation is triggered to have proper data in maximum
  // number of the requests that reach server.
  $form['add_to_cart']['#attributes']['class'][] = 'cv-validate-before-ajax';

  // Disable the submit button by default. We will enable it later with js,
  // so that the button is disabled if js is disabled.
  $form['add_to_cart']['#disabled'] = TRUE;

  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  $form['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

  $sku_identifier = strtolower(Html::cleanCssIdentifier($sku_entity->getSku()));
  $form['quantity']['#prefix'] = '<span class="quantity-' . $sku_identifier . '">';
  $form['quantity']['#suffix'] = '</span>';

  $form['quantity']['#type'] = 'select';
  $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options();
  $form['quantity']['#validated'] = TRUE;
  $form['quantity']['#attributes']['class'][] = 'edit-quantity';
  unset($form['quantity']['#size']);

  // We need to change the markup for submit button.
  // @see alshaya_white_label_theme_suggestions_input_alter().
  $form['add_to_cart']['#attributes']['data-twig-suggestion'] = 'addtocart';
  $form['add_to_cart']['#attributes']['class'][] = 'edit-add-to-cart';
  // This is require for ajax to work properly with multiple forms on one page.
  $form['add_to_cart']['#id'] = 'edit-add-to-cart-' . $sku_entity->id();
  $form['add_to_cart']['#attributes']['id'] = 'edit-add-to-cart-' . $sku_entity->id();
  $form['add_to_cart']['#name'] = 'add_to_cart_' . $sku_entity->id();

  // Add an empty field that can be filled with the correct context - pdp/modal.
  $form['page-context']['#type'] = 'hidden';
  $form['page-context']['#attributes']['class'] = 'hidden-context';

  $form['add_to_cart']['#ajax'] = [
    'url' => Url::fromRoute(
      'alshaya_acm_product.add_to_cart_submit',
      ['entity' => $sku_entity->id()]
    ),
  ];

  $display_settings = \Drupal::config('alshaya_acm_product.display_settings');
  $swatches = $display_settings->get('swatches')['pdp'];
  $form['#attached']['drupalSettings']['show_configurable_boxes_after'] = $display_settings->get('show_configurable_boxes_after');

  if (isset($form['ajax'], $form['ajax']['configurables'])) {
    // Hide the form on page load, we want to allow all JS to be applied first.
    $form['#attributes']['class'][] = 'visually-hidden';

    $product_tree = $form_state->get('tree');
    $configurable_codes = array_keys($product_tree['configurables']);

    // Do first to disable for level one or only configurable options.
    $empty_selected = [];
    $sku_manager->disableUnavailableOptions($sku_entity, $form['ajax']['configurables'], $product_tree, $empty_selected);

    $user_input_configurables = $form_state->getUserInput();
    $selected = $user_input_configurables['configurables'] ?? [];
    $selected = array_filter($selected);

    $form['ajax']['#attributes']['class'][] = 'configurable-wrapper-' . $sku_identifier;

    // Use the first code from tree as root. We already sort it in
    // Configurable plugin.
    $root_attribute_code = reset($configurable_codes);

    if ($selected && count($selected) != count($product_tree['configurables'])) {
      $delete_next = FALSE;

      // Cleanup selected value.
      foreach ($selected as $code => $value) {
        if ($delete_next) {
          unset($selected[$code]);
          continue;
        }

        // We will remove all selected values after matching trigger.
        if ($user_input_configurables['_triggering_element_name'] == 'configurables[' . $code . ']') {
          $delete_next = TRUE;
        }
      }
    }

    $first_child = $sku_manager->getFirstChildForSku(
      $sku_entity,
      $root_attribute_code,
      $selected,
      $form['ajax']['configurables'][$root_attribute_code]
    );

    if ($first_child instanceof SKU) {
      /** @var \Drupal\acq_sku\Plugin\AcquiaCommerce\SKUType\Configurable $plugin */
      $plugin = $sku_entity->getPluginInstance();
      $first_child_root_attr_value = $plugin->getAttributeValue($first_child->id(), $root_attribute_code);
    }

    $root_attribute_options = $form['ajax']['configurables'][$root_attribute_code]['#options'];

    // Set the color attribute as default only if user has not made a
    // selection.
    if ((isset($root_attribute_options[$first_child_root_attr_value])) &&
      (!isset($user_input_configurables['configurables'], $user_input_configurables['configurables'][$root_attribute_code]))) {
      $form['ajax']['configurables'][$root_attribute_code]['#options_attributes'][$first_child_root_attr_value]['selected'] = 'selected';
      $selected = [$root_attribute_code => $first_child_root_attr_value];
    }

    $sku_manager->disableUnavailableOptions($sku_entity, $form['ajax']['configurables'], $product_tree, $selected);

    // Select configurable attributes for which only one option is available.
    // We do this before adding empty option.
    foreach ($form['ajax']['configurables'] as $key => &$configurable) {
      if (is_array($configurable) && !empty($configurable['#options'])) {
        if (count($configurable['#options']) === 1) {
          $selected[$key] = key($configurable['#options']);
          $configurable['#options_attributes'][$selected[$key]]['selected'] = 'selected';
        }
      }
    }

    $form_state->setValue('configurables', $selected);
    $user_input_configurables['configurables'] = $selected;
    $form_state->setUserInput($user_input_configurables);

    /** @var \Drupal\alshaya_acm_product\SkuFieldsHelper $skuFieldsHelper */
    $skuFieldsHelper = \Drupal::service('alshaya_acm_product.sku_fields_helper');

    // We will display only one swatch attribute per product.
    $swatch_processed = FALSE;
    foreach ($form['ajax']['configurables'] as $key => &$configurable) {
      if (!is_array($configurable)) {
        continue;
      }

      // Add custom ajax callback for configurables to refresh the gallery.
      $configurable['#validate'][] = 'alshaya_acm_product_configurable_form_ajax_callback';
      $configurable['#ajax']['url'] = Url::fromRoute(
        'alshaya_acm_product.select_configurable_option',
        ['entity' => $sku_entity->id()]
      );

      // Disable refocus.
      $configurable['#ajax']['disable-refocus'] = TRUE;

      unset($configurable['#ajax']['wrapper']);

      $configurable['#options_attributes'] = $configurable['#options_attributes'] ?? [];
      if (isset($configurable['#type']) && $configurable['#type'] == 'select') {
        $overridden_label = $skuFieldsHelper->getOverriddenAttributeLabel($key);

        $configurable['#empty_value'] = '';
        $configurable['#options_attributes']['']['disabled'] = 'disabled';
        $configurable['#empty_option'] = $overridden_label ?? t('Select @title', ['@title' => $configurable['#title']]);
        $configurable['#attributes']['data-default-title'] = $overridden_label ?? $configurable['#title'];

        $overridden_selected_label = $skuFieldsHelper->getOverriddenAttributeSelectedLabel($key);
        $configurable['#attributes']['data-selected-title'] = $overridden_selected_label ?? $configurable['#attributes']['data-default-title'];

        $overridden_error = $skuFieldsHelper->getOverriddenAttributeError($key);
        if ($overridden_error) {
          $configurable['#required_error'] = $overridden_error;
        }

        if (in_array($key, $swatches) && !$swatch_processed) {
          $swatch_processed = TRUE;
          $configurable['#attributes']['class'][] = 'form-item-configurable-swatch';

          foreach ($configurable['#options'] as $value => $label) {
            if (empty($value)) {
              continue;
            }

            $swatch_sku = $sku_manager->getChildSkuFromAttribute(
              $sku_entity,
              $key,
              $value
            );

            if ($swatch_sku instanceof SKU) {
              $image = $swatch_sku->getSwatchImage();
              if (isset($image['file']) && $image['file'] instanceof FileInterface) {
                $swatch_image_url = file_url_transform_relative(file_create_url($image['file']->url()));
                $configurable['#options_attributes'][$value]['swatch-image'] = $swatch_image_url;
              }
            }

          }
        }
        else {
          $configurable['#attributes']['class'][] = 'form-item-configurable-select';
        }
      }

      $sku_manager->processAttribute($configurable);
    }

    // Process stock now.
    if (!empty($selected)) {
      // Get all child SKUs possible for the selected root attribute to do a
      // stock check on visible child attributes that belong to the child
      // SKUs.
      $variations = alshaya_acm_product_fetch_selected_option_tree($product_tree, $selected);

      // Check stock for variations & update options.
      foreach ($variations as $key => $variation) {
        if ($key === '#available_config') {
          continue;
        }

        if ($variation instanceof SKU) {
          $attribute_parts = explode(':', $key);

          $quantity = $sku_manager->getStockQuantity($variation);
          if ($quantity > 0) {
            // Set the dropdown quantity options only for selected option.
            if (isset($selected[$attribute_parts[0]]) && $selected[$attribute_parts[0]] == $attribute_parts[1]) {
              $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
            }
          }

          // If we already have the selected variant based on selections done
          // automatically or by user, add that in form so JS can use it to do
          // operations like getting Click n Collect stores for that variant.
          $form['selected_variant_sku'] = [
            '#type' => 'hidden',
            '#attributes' => [
              'class' => [
                'selected-variant-sku',
                'selected-variant-sku-' . $sku_identifier,
              ],
            ],
            '#value' => $variation->getSku(),
          ];
        }
      }
    }

    // Fetch product for this sku to get the category.
    $productNode = alshaya_acm_product_get_display_node($sku_entity->getSku());

    $category = NULL;
    if ($productNode instanceof NodeInterface) {
      $field_category = $productNode->get('field_category')->first();
      if (!empty($field_category)) {
        $category = $field_category->entity;
      }
    }

    // We show the size guide link if available as prefix.
    $size_guide = _alshaya_acm_product_get_size_guide_info($category);
    if (isset($size_guide['link'])) {
      $configurable_options = array_keys($form['ajax']['configurables']);

      foreach ($configurable_options as $configurable_option) {
        if (in_array($configurable_option, $size_guide['attributes'])) {
          $form['ajax']['configurables'][$configurable_option]['#prefix'] = $size_guide['link'];
        }
      }
    }
  }
  // Stock check for quantity for all other products.
  elseif ($quantity = $sku_manager->getStockQuantity($sku_entity)) {
    $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
  }
  else {
    $form = [
      '#theme' => 'empty_add_to_cart_form',
      '#text' => t('Out of stock'),
    ];
  }

  // Form state cache is not needed for this form since, we are regenerating the
  // add to cart form on every change on the form & the form state cache doesn't
  // get re-used. Instead, keeps flooding key_value_expire table.
  $form_state->disableCache();
}

/**
 * Overridden ajax callback for configurable add to cart form.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState object.
 *
 * @return array
 *   Build array.
 */
function alshaya_acm_product_configurable_form_ajax_callback(array &$form, FormStateInterface $form_state) {
  $response = ProductStockController::$response;

  // Product attributes that can possibly change with selected attribute values
  // & hence need to be re-rendered in the AJAX callback.
  $dynamic_parts = call_user_func_array($form_state->prepareCallback('::configurableAjaxCallback'), [&$form, &$form_state]);

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $sku = $skuManager->loadSkuById((int) $form['sku_id']['#value']);

  // Configurable product tree keyed with possible config tree, whose leaf items
  // contain the SKUs depending on the tree path traversed.
  $product_tree = $form_state->get('tree');

  // List of attributes selected by end-users on the form.
  $selected = $form_state->getValue('configurables');

  $selected = $selected ?? [];

  // Calculate available config options based on the attribute value selected,
  // in case of multiple config attributes with a product.
  if (count($product_tree['configurables']) > 1) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
    $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_manager->disableUnavailableOptions($sku, $dynamic_parts['configurables'], $product_tree, $selected);

    // Traverse the product tree till the point where config attributes have a
    // value.
    $tree_pointer = alshaya_acm_product_fetch_selected_option_tree($product_tree, $selected);

    // If there is only one item returned back,
    // it implies we have reached to the leaf most SKU in the tree.
    if (count($tree_pointer) === 1) {
      $tree_pointer = array_shift($tree_pointer);
    }
  }
  else {
    $tree_pointer = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), $form_state->getValue('configurables'));
  }

  if ($tree_pointer instanceof SKU) {
    $selected_sku = $tree_pointer;
    if ($quantity = $sku_manager->getStockQuantity($tree_pointer)) {
      $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
    }
    else {
      // Something is wrong here, we shouldn't land here with a selected sku
      // with no quantity, this could be an old form open in browser and
      // stock became empty now.
      $log_data = [
        'selected_sku' => $tree_pointer->getSku(),
        'sku' => $sku->getSku(),
      ];

      \Drupal::logger('alshaya_acm_product')->error('Combination selected in add to cart form which is OOS. Data: @data', [
        '@data' => json_encode($log_data),
      ]);

      // Return response with fake command to ensure nothing happens in FE.
      $response->addCommand(new HtmlCommand('.fake-selector', ''));
      return $response;
    }

    $build = [];

    /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
    $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');
    $context = ($form_state->getValue('page-context') == 'modal') ? 'modal' : 'pdp';
    $pdp_layout = $skuManager->getPdpLayout($tree_pointer, $context);
    $build['gallery'] = $skuImagesManager->getGallery($tree_pointer, $pdp_layout, '', FALSE);

    if (isset($build['gallery'])) {
      if (isset($build['gallery']['product_zoom'])) {
        $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];
      }
      elseif ($pdp_layout == SkuManager::PDP_LAYOUT_MAGAZINE && isset($build['gallery']['alshaya_magazine'])) {
        $dynamic_parts['alshaya_magazine'] = $build['gallery']['alshaya_magazine'];
      }

    }

    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $dynamic_parts['selected_variant_sku'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => [
          'selected-variant-sku',
          'selected-variant-sku-' . $sku_identifier,
        ],
      ],
      '#value' => $tree_pointer->getSku(),
    ];

    $price_block = $skuManager->getPriceBlock($tree_pointer);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));

    $quantity_selector = '.quantity-' . $sku_identifier;
    $response->addCommand(new ReplaceCommand($quantity_selector, $form['quantity']));

    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    // Update the promotions for the product.
    $promotion_links = '';
    $promotion_types = ['cart'];
    $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($tree_pointer, 'links', $promotion_types, 'full');

    // Filter out free gift promos.
    $promotions = array_filter($promotions, function ($promo) {
      if (!empty($promo['skus'])) {
        return FALSE;
      }

      return TRUE;
    });

    if (!empty($promotions)) {
      $promotion_links = implode('</br>', $promotions);
    }

    $response->addCommand(new HtmlCommand('.promotions', $promotion_links));

    // Update the article class to include out of stock class if not in stock.
    // Remove the class if in stock.
    $class_command = $quantity ? 'removeClass' : 'addClass';
    $response->addCommand(new InvokeCommand('article[data-vmode="full"]', $class_command, ['product-out-of-stock']));

    // Update simple product description attributes.
    if ($tree_pointer->hasField('attr_composition')) {
      $composition = $skuManager->fetchProductAttribute($tree_pointer, 'attr_composition', 'self');
      $composition_markup = [
        '#theme' => 'product_composition_markup',
      ];

      if (!empty($composition)) {
        $composition_markup['#composition']['#markup'] = $composition;
      }

      $response->addCommand(new ReplaceCommand('.composition-wrapper', $composition_markup));
    }

    // Update simple product description attributes.
    if ($tree_pointer->hasField('attr_article_warning')) {
      $warning = $skuManager->fetchProductAttribute($tree_pointer, 'attr_article_warning', 'self');
      $warning_markup = [
        '#theme' => 'product_article_warning_markup',
      ];

      if (!empty($warning)) {
        $warning_markup['#warning']['#markup'] = $warning;
      }

      $response->addCommand(new ReplaceCommand('.warning-wrapper', $warning_markup));
    }

    // Update cross-sell region with products.
    if (\Drupal::config('alshaya_acm.settings')->get('display_crosssell')) {
      $cross_sell_markup = [
        '#theme' => 'products_horizontal_slider',
        '#section_title' => t('Customers also bought'),
        '#views_name' => 'product_slider',
        '#views_display_id' => 'block_product_slider',
      ];

      if (!empty($cross_sell_skus = $skuManager->getLinkedSkusWithFirstChild($tree_pointer, LINKED_SKU_TYPE_CROSSSELL))) {
        $cross_sell_markup['#data'] = $skuManager->filterRelatedSkus(array_unique($cross_sell_skus));
      }

      // Make sure the wrapper div is present even in case of no cross-sell
      // items.
      $cross_sell_markup_desktop = array_merge($cross_sell_markup, ['#prefix' => '<div class="horizontal-crossell above-mobile-block">', '#suffix' => '</div>']);
      $cross_sell_markup_mobile = array_merge($cross_sell_markup, ['#prefix' => '<div class="horizontal-crossell mobile-only-block">', '#suffix' => '</div>']);

      $response->addCommand(new InsertCommand('.horizontal-crossell.mobile-only-block', $cross_sell_markup_mobile));
      $response->addCommand(new InsertCommand('.horizontal-crossell.above-mobile-block', $cross_sell_markup_desktop));
    }

    // React for click & collect if stock is available.
    if (\Drupal::moduleHandler()->moduleExists('alshaya_click_collect') && $quantity) {
      // Settings variable.
      $settings = ['alshaya_acm' => ['product_sku' => $sku->getSku()]];

      $config = \Drupal::config('alshaya_click_collect.settings');

      if (!alshaya_acm_product_available_click_collect($tree_pointer->getSku())) {
        $settings['alshaya_acm']['storeFinder'] = FALSE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_unavailable');
      }
      else {
        $settings['alshaya_acm']['storeFinder'] = TRUE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_subtitle');
      }

      $response->addCommand(new BaseCommand('updatePDPClickCollect', $settings));

      $response->addCommand(new SettingsCommand($settings, TRUE), TRUE);
    }
  }
  else {
    $build = [];
    $sku = $product_tree['parent'];

    $configurable_codes = array_keys($product_tree['configurables']);
    $attribute = reset($configurable_codes);
    $option_id = $selected[$attribute];

    $display_settings = \Drupal::config('alshaya_acm_product.display_settings');
    if ($display_settings->get('show_child_images_after_selecting') !== 'all') {
      // Pull out & update gallery image based on the selected first item.
      $first_child = $skuManager->getChildSkuFromAttribute($sku, $attribute, $option_id);
      $selected_sku = $first_child;

      /** @var \Drupal\alshaya_acm_product\SkuImagesManager $skuImagesManager */
      $skuImagesManager = \Drupal::service('alshaya_acm_product.sku_images_manager');

      if ($first_child instanceof SKU) {
        $context = ($form_state->getValue('page-context') == 'modal') ? 'modal' : 'pdp';

        $pdp_layout = $skuManager->getPdpLayout($first_child, $context);
        $build['gallery'] = $skuImagesManager->getGallery($first_child, $pdp_layout, '', FALSE);

        if (!empty($build['gallery'])) {
          if ($pdp_layout == SkuManager::PDP_LAYOUT_MAGAZINE && $context != 'modal') {
            $dynamic_parts['alshaya_magazine'] = $build['gallery']['alshaya_magazine'];
          }
          else {
            $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];
          }
        }
      }
    }

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $price_block = $skuManager->getPriceBlock($sku);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // Don't display placeholder again.
    unset($dynamic_parts['add_to_cart']);

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));
    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));
  }

  \Drupal::moduleHandler()->alter('alshaya_acm_product_add_to_cart_ajax_response', $response, $sku, $selected_sku);

  return $response;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_product_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'page_title_block' block on PDP page.
  if ($operation == 'view' && $block->getPluginId() == 'page_title_block') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.node.canonical') {
      /* @var \Drupal\node\Entity\Node $node */
      $node = $route->getParameter('node');
      return AccessResult::forbiddenIf($node->bundle() == 'acq_product');
    }
  }
}

/**
 * Helper function to get size guide info if enabled and available.
 *
 * @return array
 *   Array containing link html and attributes.
 */
function _alshaya_acm_product_get_size_guide_info($taxonomy_term) {
  $config = \Drupal::config('alshaya_acm_product.pdp_modal_links');
  if ($config->get('size_guide_enabled')) {
    $size_guide_anchor = ($taxonomy_term instanceof TermInterface) ? alshaya_acm_product_get_size_guide_anchor($taxonomy_term) : [];
    $link_info = _alshaya_acm_product_get_modal_link(t('Size Guide'), 'size-guide', array_reverse($size_guide_anchor));
    $link_info['attributes'] = explode(',', $config->get('size_guide_attributes'));
    return $link_info;
  }

  return [];
}

/**
 * Get size guide anchor value from given taxonomy term.
 *
 * @param \Drupal\taxonomy\TermInterface $taxonomy_term
 *   The taxonomy term object.
 * @param array $query_string
 *   (optional) Query string to use to append size guide.
 *
 * @return array
 *   Return array value.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function alshaya_acm_product_get_size_guide_anchor(TermInterface $taxonomy_term, array $query_string = []) : array {
  $anchor = $taxonomy_term->get('field_size_guide_anchor');
  $query_string = !empty($query_string) ? $query_string : [];
  if (!empty($anchor) && !empty($anchor->first())) {
    foreach (explode(',', $anchor->first()->getString()) as $string) {
      list($key, $value) = explode('=', trim($string));
      $query_string[trim($key)] = trim($value);
    }
  }

  // Get size guide link from parent term.
  $parent_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($taxonomy_term->id());
  $term = reset($parent_terms);
  if ($term instanceof TermInterface) {
    $query_string = alshaya_acm_product_get_size_guide_anchor($term, $query_string);
    if (!empty($query_string)) {
      return $query_string;
    }
  }
  return $query_string;
}

/**
 * Wrapper function to check if SKU is buyable.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity object.
 *
 * @return bool
 *   SKU is buyable or not.
 */
function alshaya_acm_product_is_buyable(SKU $sku_entity) {
  $all_products_buyable = \Drupal::config('alshaya_acm_product.settings')->get('all_products_buyable');
  // For now we have only one condition, we may have more in future.
  return $all_products_buyable || (bool) $sku_entity->get('attr_is_buyable')->getString();
}

/**
 * Implements template_preprocess_products_horizontal_slider().
 */
function alshaya_acm_product_preprocess_products_horizontal_slider(&$variables) {
  if (!empty($variables['data'])) {
    $variables['data'] = views_embed_view($variables['views_name'], $variables['views_display_id'], implode(',', $variables['data']));
  }
}

/**
 * Implements hook_acq_sku_base_field_additions_alter().
 */
function alshaya_acm_product_acq_sku_base_field_additions_alter(array &$fields = []) {
  $alshaya_acm_product_fields = \Drupal::config('alshaya_acm_product.sku_base_fields')->get('fields');
  $fields = array_merge($fields, $alshaya_acm_product_fields);
}

/**
 * Implements hook_alshaya_master_post_drupal_install().
 */
function alshaya_acm_product_alshaya_master_post_drupal_install() {
  // Add fields to store the values from attributes as fields.
  \Drupal::service('acq_sku.fields_manager')->addFields();
}

/**
 * Returns link for PDP modal content.
 *
 * @param string|mixed $link_title
 *   Link title.
 * @param string $type
 *   Link type.
 * @param array $size_guide_anchor
 *   String contains the value to pass with modal link.
 *
 * @return array
 *   Array of link.
 */
function _alshaya_acm_product_get_modal_link($link_title, $type, array $size_guide_anchor = []) {
  $info = [];
  $options = [
    'attributes' => [
      'class' => ['size-guide-link', 'use-ajax'],
      'data-dialog-type' => 'dialog',
      'data-dialog-options' => Json::encode(['height' => 400, 'width' => 700]),
      'rel' => 'nofollow',
    ],
    'query' => $size_guide_anchor,
  ];

  $url = Url::fromRoute('alshaya_acm_product.pdp_modal_links', [
    'type' => $type,
  ], $options);

  $link = Link::fromTextAndUrl($link_title, $url);
  $info['link'] = $link->toString();
  return $info;
}

/**
 * Get delivery data.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku
 *   SKU object.
 *
 * @return array|null
 *   Link title and content.
 */
function _alshaya_acm_product_get_delivery_link(SKU $sku) {
  $config = \Drupal::config('alshaya_acm_product.pdp_modal_links');
  // If delivery attribute is available for the SKU and config is set for the
  // delivery.
  if (($attribute = $config->get('delivery_content_attribute'))
    && (!empty($nid = $config->get('delivery_content_node')))
    && $sku->hasField('attr_' . $attribute)) {
    $delivery_applicable = (bool) $sku->get('attr_' . $attribute)->getString();
    // If delivery not applicable.
    if (!$delivery_applicable) {
      return NULL;
    }

    // Load node object.
    $delivery_node_content = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // Get translated node object.
    $delivery_node_content = \Drupal::service('entity.repository')->getTranslationFromContext($delivery_node_content, $current_language);
    return _alshaya_acm_product_get_modal_link($delivery_node_content->getTitle(), 'delivery');
  }

  return [];
}

/**
 * Filter nodes with stock from given array of nodes.
 *
 * @param array $nodes
 *   The list of nodes array.
 * @param int $stock_check_limit
 *   (optional) The limit of products to return as a result.
 *
 * @return array
 *   Return in-stock nodes.
 */
function alshaya_acm_product_filter_out_of_stock_products(array $nodes, int $stock_check_limit = 50): array {
  $data = [];
  if (empty($nodes)) {
    return $data;
  }

  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  foreach ($nodes as $node) {
    /* @var \Drupal\node\Entity\Node $node */
    if (!$node instanceof NodeInterface) {
      continue;
    }

    if ($stock_check_limit <= 0) {
      break;
    }

    if ($skuManager->isProductNodeInStock($node)) {
      $data[] = $node;
      $stock_check_limit--;
    }
  }
  return $data;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_taxonomy_term_acq_product_category_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  unset($form['field_pdp_layout']['widget']['#options']['_none']);
}

/**
 * Implements allowed values callback.
 */
function alshaya_acm_product_pdp_layout_values() {
  $pdp_layout_options['inherit'] = 'Inherit Site Config';
  $config = \Drupal::config('alshaya_acm_product.settings');
  // Prepare PDP layout select options.
  $pdp_layout_options += $config->get('pdp_layout_options');
  return $pdp_layout_options;
}

/**
 * Clean form array and get OOS message.
 *
 * @param array $form
 *   Form array.
 *
 * @return array
 *   Cleaned form array with OOS message.
 */
function _alshaya_acm_product_clean_form_for_oos(array $form): array {
  foreach ($form as $id => $form_item) {
    // Preserve internal keys.
    if (strpos($id, '#') === 0) {
      continue;
    }

    // Preserve important info.
    if (in_array($id, ['form_id', 'form_build_id'])) {
      continue;
    }

    unset($form[$id]);
  }

  $form['oos'] = [
    '#theme' => 'empty_add_to_cart_form',
    '#text' => t('Out of stock'),
  ];

  return $form;
}

/**
 * Implements hook_query_TAG_alter().
 */
function alshaya_acm_product_query_get_display_node_for_sku_alter(AlterableInterface $query) {
  // For Alshaya we have developed a feature to display one entry per color
  // on listing pages. For this we need extra nodes. To avoid affecting original
  // functionality we add conditions below.
  $query->addJoin('left', 'node__field_product_color', 'color', 'node_field_data.vid = color.revision_id');
  $query->isNull('field_product_color_value');
}

/**
 * Get unique products from plp list.
 *
 * @param int $category_id
 *   Category id.
 * @param int $limit
 *   Limit.
 *
 * @return \Drupal\node\NodeInterface[]
 *   Array of nodes.
 */
function _alshaya_acm_product_get_unique_in_stock_products_for_category($category_id, $limit) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $terms = _alshaya_master_get_recursive_child_terms($category_id);
  $arguments = [
    'tid' => implode('+', $terms),
  ];

  $unique_nodes = [];
  $page = 0;

  do {
    $results = _alshaya_master_get_views_result('alshaya_product_list', 'block_1', $arguments, $page);

    $nodes = array_map(function ($result) use ($skuManager) {
      if (($node = $result->_object->getValue()) && $node instanceof NodeInterface) {
        $color = $node->get('field_product_color')->getString();

        if ($color) {
          $node = $skuManager->getDisplayNode($skuManager->getSkuForNode($node), FALSE);
        }

        return $node;
      }
    }, $results);

    $nodes = alshaya_acm_product_filter_out_of_stock_products($nodes, $limit);
    foreach ($nodes as $node) {
      $unique_nodes[$node->id()] = $node;
    }

    $page++;
  } while (!empty($nodes) && count($unique_nodes) < $limit);

  $unique_nodes = array_slice($unique_nodes, 0, $limit);

  return $unique_nodes;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function alshaya_acm_product_taxonomy_term_update($term) {
  if ($term->bundle() == 'acq_product_category') {
    $old_pdp_layout = $term->original->get('field_pdp_layout')->value;
    $new_pdp_layout = $term->get('field_pdp_layout')->value;
    // If the pdp layout is updated, flush pdp caches.
    if ($old_pdp_layout != $new_pdp_layout) {
      /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
      $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
      $skuManager->invalidatePdpCache($term);
    }
  }
}
