<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;

/**
 * Implements hook_acq_sku_product_node_alter().
 */
function alshaya_acm_product_acq_sku_product_node_alter(NodeInterface $node, array $product) {
  $visible = $product['visibility'] == 1;
  $node->setPublished($visible);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_acm_product_acq_sku_presave(SKUInterface $sku) {
  // @TODO: Simple SKU are processed by default in commerce code, configurable
  // SKUs are processed below, we will need to check for bundled products
  // when we work on it: MMCPA-211.
  if ($sku->bundle() == 'configurable') {
    // Get the configurable attributes array.
    $configurable_attributes_data = unserialize($sku->get('field_configurable_attributes')->getString());

    // Get the configurable fields we want to capture separately as fields.
    $fields = \Drupal::config('alshaya_acm_product.sku_base_fields')->get('fields');
    $configurableFields = array_filter($fields, function ($field) {
      return (bool) $field['configurable'];
    });

    // Loop through the configurable fields.
    foreach ($configurableFields as $key => $field) {
      $field_key = 'attr_' . $key;

      // Loop through all configurable data available from API.
      foreach ($configurable_attributes_data as $attribute_data) {
        if ($attribute_data['code'] == $key) {
          foreach ($attribute_data['values'] as $index => $value) {
            $sku->get($field_key)->set($index, $value['value_id']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    if ($view_mode == 'full') {
      $sku = $entity->get('field_skus')->first()->getString();
      $skuEntity = SKU::loadFromSku($sku);

      // Get up sell block for the product.
      $items = $skuEntity->get('upsell')->getValue();

      if (!empty($items)) {
        $up_sell_skus = array_column($items, 'value');
        $up_sell_skus = array_slice($up_sell_skus, 0, 12);
        $build['up_sell'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $up_sell_skus));
        // Weight will have no effect later once template is modified.
        $build['up_sell']['#weight'] = 10;
      }

      // Get cross sell block for the product.
      $items = $skuEntity->get('crosssell')->getValue();

      if (!empty($items)) {
        $cross_sell_skus = array_column($items, 'value');
        $cross_sell_skus = array_slice($cross_sell_skus, 0, 12);
        $build['cross_sell'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $cross_sell_skus));
        // Weight will have no effect later once template is modified.
        $build['cross_sell']['#weight'] = 11;
      }

      // Get cross sell block for the product.
      $items = $skuEntity->get('related')->getValue();

      if (!empty($items)) {
        $related_skus = array_column($items, 'value');
        $related_skus = array_slice($related_skus, 0, 12);
        $build['related'] = views_embed_view('product_slider', 'block_product_slider', implode(',', $related_skus));
        // Weight will have no effect later once template is modified.
        $build['related']['#weight'] = 11;
      }

      // Fetch media.
      module_load_include('inc', 'alshaya_acm_product', 'alshaya_acm_product.utility');
      module_load_include('inc', 'alshaya_product_zoom', 'alshaya_product_zoom.utility');
      $media = alshaya_acm_product_get_sku_media($skuEntity);

      // Fetch settings.
      $settings = alshaya_product_zoom_cloudzoom_default_settings();
      $thumbnail_style = $settings['thumb_style'];
      $zoom_style = $settings['zoom_style'];
      $slide_style = $settings['slide_style'];

      // Create our thumbnails to be rendered for zoom.
      foreach ($media as $delta => $image) {
        $file_uri = $image->getFileUri();
        // Show original full image in the modal inside a draggable container.
        $original_image = $image->url();
        if ($delta == 0) {
          $imageZoom = ImageStyle::load($zoom_style)->buildUrl($file_uri);
          $imageMedium = ImageStyle::load($slide_style)->buildUrl($file_uri);
          $main_image = [
            'zoomurl' => $imageZoom,
            'mediumurl' => $imageMedium,
          ];
        }
        $imageSmall = ImageStyle::load($thumbnail_style)->buildUrl($file_uri);
        $imageZoom = ImageStyle::load($zoom_style)->buildUrl($file_uri);
        $imageMedium = ImageStyle::load($slide_style)->buildUrl($file_uri);
        $thumbnails[] = [
          'thumburl' => $imageSmall,
          'mediumurl' => $imageMedium,
          'zoomurl' => $imageZoom,
          'fullurl' => $original_image,
          'type' => 'image',
        ];
      }
      // @TODO: Get video data.
      $video = [];
      $videos = [
        'https://www.youtube.com/embed/eKG08z85DtY',
        'https://player.vimeo.com/video/1084537',
      ];
      foreach ($videos as $video) {
        if (strpos($video, 'youtube')) {
          $thumbnails[] = [
            'thumburl' => 'https://img.youtube.com/vi/' . alshaya_product_zoom_getyoutubeid($video) . '/hqdefault.jpg',
            'url' => $video,
            'type' => 'youtube',
            'width' => 81,
            'height' => 81,
          ];
        }
        else {
          $thumbnails[] = [
            'url' => $video,
            'type' => 'vimeo',
            'width' => 81,
            'height' => 81,
          ];
        }
      }
      $build['product_zoom'] = [
        '#theme' => 'product_zoom',
        '#mainImage' => $main_image,
        '#thumbnails' => $thumbnails,
        '#properties' => alshaya_product_zoom_get_rel_cloudzoom($settings),
        '#attached' => [
          'library' => [
            'alshaya_product_zoom/product.cloud_zoom',
          ],
        ],
      ];

      $build['product_zoom_gallery'] = [
        '#theme' => 'product_zoom_gallery',
        '#thumbnails' => $thumbnails,
        '#attached' => [
          'library' => [
            'alshaya_product_zoom/product.product_zoom_gallery',
          ],
        ],
      ];
    }
    elseif ($view_mode == 'teaser') {
      \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

      $sku = $entity->get('field_skus')->first()->getString();
      $skuEntity = SKU::loadFromSku($sku);

      // Hide the sku reference field.
      unset($build['field_skus']);

      // Get the image.
      $build['image_url'] = [];
      $sku_media = alshaya_acm_product_get_sku_media($skuEntity);
      if ($sku_media) {
        $imageEntity = array_shift($sku_media);
        $build['image_url']['#markup'] = ImageStyle::load('192x168')->buildUrl($imageEntity->getFileUri());
      }

      // Get the price.
      $build['price'] = [
        '#theme' => 'alshaya_acm_price',
        '#price' => $skuEntity->get('price')->getString(),
      ];

      // Get the special price.
      // @TODO: Calculate discount and pass it once we have some realistic data.
      $build['special_price'] = NULL;
      if ($special_price = $skuEntity->get('attr_special_price')->getString()) {
        $build['special_price'] = [
          '#theme' => 'alshaya_acm_price',
          '#price' => $special_price,
        ];
      }
    }
    elseif ($view_mode == 'modal') {
      \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

      $sku = $entity->get('field_skus')->first()->getString();
      $skuEntity = SKU::loadFromSku($sku);

      // Get the image.
      // @TODO: We need to display the full slider and zoom box.
      $build['image_url'] = NULL;
      $sku_media = alshaya_acm_product_get_sku_media($skuEntity);
      if ($sku_media) {
        $imageEntity = array_shift($sku_media);
        $build['image_url']['#markup'] = ImageStyle::load('192x168')->buildUrl($imageEntity->getFileUri());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_acm_product_acq_sku_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Remove/Hide the 'add to cart' form from product list/search page.
  if ($build['#view_mode'] == 'teaser') {
    $build['#no_add_to_cart'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['ajax']) && isset($form['ajax']['configurables']) && $form['ajax']['configurables']['size']) {

    // We show the size guide link if available as prefix.
    if ($size_guide_link = \Drupal::config('alshaya_acm_product.settings')->get('size_guide_link')) {
      $options = [
        'attributes' => [
          'class' => ['use-ajax', 'size-guide-link'],
          'data-dialog-type' => 'modal',
          'data-dialog-options' => Json::encode(['width' => 'auto']),
        ],
      ];
      $url = Url::fromUri($size_guide_link, $options);
      $link = Link::fromTextAndUrl(t('Size Guide'), $url);

      $form['ajax']['configurables']['size']['#prefix'] = $link->toString();
    }
  }
}
