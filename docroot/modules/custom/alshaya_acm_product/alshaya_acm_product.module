<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\block\Entity\Block;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\BaseCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function alshaya_acm_product_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['pdp_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'title_price' => NULL,
      'subtitle' => NULL,
      'options' => [],
    ],
  ];

  $items['basket_delivery_option'] = [
    'render element' => 'elements',
    'variables' => [
      'title' => NULL,
      'tooltip' => NULL,
      'type' => NULL,
    ],
  ];

  $items['sku_teaser'] = [
    'variables' => [
      'gallery' => NULL,
      'product_url' => NULL,
      'product_label' => NULL,
      'price_block' => NULL,
      'price_block_identifier' => NULL,
      'promotions' => NULL,
      'stock_placeholder' => NULL,
    ],
  ];

  $items['product_price_block'] = [
    'render element' => 'elements',
    'variables' => [
      'price' => NULL,
      'final_price' => NULL,
      'discount' => NULL,
      'vat_text' => NULL,
    ],
  ];

  $items['product_labels'] = [
    'render element' => 'elements',
    'variables' => [
      'labels' => NULL,
      'sku' => NULL,
      'mainsku' => NULL,
      'type' => NULL,
    ],
  ];

  return $items;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_acm_product_acq_sku_presave(SKUInterface $sku) {
  // @TODO: Simple SKU are processed by default in commerce code, configurable
  // SKUs are processed below, we will need to check for bundled products
  // when we work on it: MMCPA-211.
  if ($sku->bundle() == 'configurable') {
    // Get the configurable attributes array.
    $configurable_attributes_data = unserialize($sku->get('field_configurable_attributes')->getString());

    // Get the configurable fields we want to capture separately as fields.
    $fields = \Drupal::config('alshaya_acm_product.sku_base_fields')->get('fields');
    $configurableFields = array_filter($fields, function ($field) {
      return (bool) $field['configurable'];
    });

    /** @var \Drupal\acq_sku\ProductOptionsManager $product_options_manager */
    $product_options_manager = \Drupal::service('acq_sku.product_options_manager');

    // Loop through the configurable fields.
    foreach ($configurableFields as $key => $field) {
      $field_key = 'attr_' . $key;

      // Loop through all configurable data available from API.
      foreach ($configurable_attributes_data as $attribute_data) {
        if ($attribute_data['code'] == $key) {
          foreach ($attribute_data['values'] as $index => $value) {
            $sku->get($field_key)->set($index, $value['value_id']);
            if ($term = $product_options_manager->loadProductOptionByOptionId($key, $value['value_id'], $sku->language()->getId())) {
              $sku->get($field_key)->set($index, $term->getName());
            }
          }
        }
      }
    }
  }

  // Update composition field.
  $composition = json_decode($sku->get('attr_composition')
    ->getString(), TRUE);
  if (!empty($composition)) {
    $sku->set('attr_composition', \Drupal::service('alshaya_acm_product.skumanager')
      ->transformCompositionArrayToList($composition));
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_acm_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (($entity->bundle() == 'acq_product')) {
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $sku = $entity->get('field_skus')->first()->getString();
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku));
    $sku_entity = SKU::loadFromSku($sku);

    $build['#cache']['tags'][] = 'sku:' . $sku_entity->getSku();

    if ($view_mode == 'search_result') {
      $build['labels'] = [
        '#theme' => 'product_labels',
        '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
        '#sku' => $sku_identifier,
        '#mainsku' => $sku_identifier,
        '#type' => 'plp',
      ];
    }
    elseif ($view_mode == 'full') {
      $related_items_size = \Drupal::config('alshaya_acm_product.settings')->get('related_items_size');

      $up_sell_skus = $skuManager->getLinkedSkus($sku_entity, LINKED_SKU_TYPE_UPSELL);

      if (!empty($up_sell_skus)) {
        $upsell_items = array_slice($up_sell_skus, 0, $related_items_size);
        $build['up_sell'] = views_embed_view('product_slider', 'block_product_slider', implode(',', array_unique($upsell_items)));
        // Weight will have no effect later once template is modified.
        $build['up_sell']['#weight'] = 10;
      }

      $related_skus = $skuManager->getLinkedSkus($sku_entity, LINKED_SKU_TYPE_RELATED);

      if (!empty($related_skus)) {
        $related_items = array_slice($related_skus, 0, $related_items_size);
        $build['related'] = views_embed_view('product_slider', 'block_product_slider', implode(',', array_unique($related_items)));
        // Weight will have no effect later once template is modified.
        $build['related']['#weight'] = 11;
      }

      alshaya_acm_product_get_gallery($build, $sku_entity);

      $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
      $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

      $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

      $build['item_code']['#markup'] = $sku;

      $at_glance['label'] = [
        '#markup' => t('At a glance'),
      ];
      $at_glance['value'] = [
        '#markup' => $sku_entity->get('attr_at_glance')->getString(),
      ];

      $description['label'] = [
        '#markup' => t('Features and benefits'),
      ];

      $description_value = '';

      if ($body = $entity->get('body')->getValue()) {
        $description_value = $body[0]['value'];
      }

      if ($bullet_points = $sku_entity->get('attr_bullet_points')->getString()) {
        $description_value .= '<div class="bullet-points-wrapper">';
        $description_value .= $bullet_points;
        $description_value .= '</div>';
      }

      if ($composition = $sku_entity->get('attr_composition')->getString()) {
        $description_value .= '<div class="composition-wrapper">';
        $description_value .= '<div class="composition-label">' . t('composition') . '</div>';
        $description_value .= '<div class="composition-value">' . $composition . '</div>';
        $description_value .= '</div>';
      }

      $washing_instructions = $sku_entity->get('attr_washing_instructions')->getString();
      $dry_cleaning_instructions = $sku_entity->get('attr_dry_cleaning_instructions')->getString();
      if (!empty($washing_instructions) || !empty($dry_cleaning_instructions)) {
        $description_value .= '<div class="care-instructions-wrapper">';
        $description_value .= '<div class="care-instructions-label">' . t('care instructions') . '</div>';
        if (!empty($washing_instructions)) {
          $description_value .= '<div class="care-instructions-value washing-instructions">' . $washing_instructions . '</div>';
        }
        if (!empty($dry_cleaning_instructions)) {
          $description_value .= '<div class="care-instructions-value dry-cleaning-instructions">' . $dry_cleaning_instructions . '</div>';
        }
        $description_value .= '</div>';
      }

      $description['value'] = [
        '#markup' => $description_value,
      ];

      $specifications['label'] = [
        '#markup' => t('Specifications'),
      ];

      $specifications['value'] = [
        "#theme" => 'item_list',
        '#items' => [],
      ];

      if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
        $specifications['value']['#items'][] = t('Style Code: @value', [
          '@value' => $attr_style_code,
        ]);
      }

      if ($attr_color = $sku_entity->get('attr_color')->getString()) {
        $specifications['value']['#items'][] = t('Color: @value', [
          '@value' => $attr_color,
        ]);
      }

      if ($attr_season = $sku_entity->get('attr_season')->getString()) {
        $specifications['value']['#items'][] = t('Season: @value', [
          '@value' => $attr_season,
        ]);
      }

      if ($attr_brand = $sku_entity->get('attr_product_brand')->getString()) {
        $specifications['value']['#items'][] = t('Product brand: @value', [
          '@value' => $attr_brand,
        ]);
      }

      $whats_in_box['label'] = [
        '#markup' => t("What's In The Box"),
      ];

      $whats_in_box['value'] = [
        '#markup' => $sku_entity->get('attr_whats_in_the_box')->getString(),
      ];

      // Prepare full description in required sequence.
      // Check comments in MMCPA-218 for sequence requirements.
      $build['description'][] = $at_glance;
      $build['description'][] = $description;
      $build['description'][] = $specifications;
      $build['description'][] = $whats_in_box;

      // Initialise home delivery variable.
      $build['home_delivery'] = [];

      // Display delivery options only if product is buyable.
      if (alshaya_acm_product_is_buyable($sku_entity)) {
        // Check if home delivery is available for this product.
        if (alshaya_acm_product_available_home_delivery($sku)) {
          $home_delivery_config = \Drupal::config('alshaya_acm_product.home_delivery');

          $home_delivery_options = [];
          $home_delivery_options['standard_title'] = $home_delivery_config->get('options_standard_title');
          $home_delivery_options['standard_subtitle'] = $home_delivery_config->get('options_standard_subtitle');

          // @TODO: Next day delivery not done for now.
          $build['home_delivery'] = [
            '#theme' => 'pdp_delivery_option',
            '#title' => $home_delivery_config->get('title'),
            '#subtitle' => $home_delivery_config->get('subtitle'),
            '#options' => $home_delivery_options,
          ];
        }
      }

      $promotion_types = ['cart'];

      // Get promotions for the product.
      $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
      if (!empty($promotions)) {
        $build['promotions'] = [
          '#markup' => implode('</br>', $promotions),
        ];
      }
    }
    elseif ($view_mode == 'teaser') {
      // Get the image.
      $build['image'] = [];

      $sku_media = alshaya_acm_product_get_sku_media($sku_entity, TRUE);

      if ($sku_media) {
        $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
      }

      // Invoke the alter hook to allow all modules to override the images being
      // rendered for teaser..
      \Drupal::moduleHandler()->alter('acq_sku_teaser_media', $build, $sku_entity);

      $promotion_types = ['cart'];

      // Get promotions for the product.
      $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
      if (!empty($promotions)) {
        $build['promotions'] = [
          '#markup' => implode('</br>', $promotions),
        ];
      }

      $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
      $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

      $build['labels'] = [
        '#theme' => 'product_labels',
        '#labels' => $skuManager->getLabels($sku_entity, 'plp'),
        '#sku' => $sku_identifier,
        '#mainsku' => $sku_identifier,
        '#type' => 'plp',
      ];

      $promotion_types = ['cart'];

      // Get promotions for the product.
      $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
      if (!empty($promotions)) {
        $build['promotions'] = [
          '#markup' => implode('</br>', $promotions),
        ];
      }

      if (alshaya_acm_product_is_buyable($sku_entity)) {
        $build['stock_placeholder'] = [
          '#markup' => '<div class="stock-placeholder ' . $sku_identifier . ' out-of-stock">' . t('Checking stock...') . '</div>',
        ];
      }
    }
    elseif ($view_mode == 'modal') {
      alshaya_acm_product_get_gallery($build, $sku_entity);

      $build['price_block'] = $skuManager->getPriceBlock($sku_entity);
      $build['price_block_identifier']['#markup'] = 'price-block-' . $sku_identifier;

      $build['item_code']['#markup'] = $sku;

      $sku_media = alshaya_acm_product_get_sku_media($sku_entity, TRUE);

      $build['brand_logo'] = alshaya_acm_product_get_brand_logo($sku_entity);

      if ($sku_media) {
        $build['image'] = $skuManager->getSkuImage($sku_media, '192x168');
      }

      $promotion_types = ['cart'];

      // Get promotions for the product.
      $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($sku_entity, TRUE, $promotion_types);
      if (!empty($promotions)) {
        $build['promotions'] = [
          '#markup' => implode('</br>', $promotions),
        ];
      }
    }

    $build['#attached']['library'][] = 'alshaya_acm_product/stock_check';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function alshaya_acm_product_acq_sku_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Remove/Hide the 'add to cart' form from product list/search page.
  if ($build['#view_mode'] == 'teaser') {
    $build['#no_add_to_cart'] = TRUE;
  }

  // Show the placeholder to load add to cart form in full view mode.
  if ($build['#view_mode'] == 'full') {
    // We don't display form and placeholder if not buyable.
    if (!alshaya_acm_product_is_buyable($entity)) {
      $build['#no_add_to_cart'] = TRUE;

      // Display the non-buyable message and help text.
      $settings = \Drupal::config('alshaya_acm_product.settings');
      $build['not_buyable_message'] = [
        '#markup' => '<div class="not-buyable-message">' . $settings->get('not_buyable_message.value') . '</div>',
      ];

      // Get store finder link.
      $find_store_url = Url::fromUserInput('/store-finder')->toString();
      $not_buyable_help_text = new FormattableMarkup($settings->get('not_buyable_help_text.value'), [
        ':find_store' => $find_store_url,
      ]);

      $build['not_buyable_help_text'] = [
        '#markup' => '<div class="not-buyable-help-text">' . $not_buyable_help_text . '</div>',
      ];
    }
    else {
      // Show placeholder to allow adding form in AJAX.
      $build['cart_form_placeholder'] = [
        '#markup' => '<div class="stock-checker">' . t('Checking stock...') . '</div>',
      ];
    }

    unset($build['name']);
    unset($build['price']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_product_form_customer_cart_form_alter(&$form, FormStateInterface $form_state) {
  if (empty($form['cart'])) {
    return;
  }

  // Including the utility file.
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');

  $config = \Drupal::config('alshaya_acm_product.basket_delivery');

  foreach ($form['cart'] as $id => $item) {
    if (is_array($item) && isset($item['quantity'])) {
      $home_delivery = [];
      $home_delivery['#theme'] = 'basket_delivery_option';
      $home_delivery['#title'] = $config->get('home_delivery_title');
      $home_delivery['#tooltip'] = $config->get('home_delivery_tooltip');
      $home_delivery['#type'] = alshaya_acm_product_available_home_delivery($id) ? 'home-delivery' : 'home-delivery not-available';

      $click_collect_delivery = [];
      $click_collect_delivery['#theme'] = 'basket_delivery_option';
      $click_collect_delivery['#title'] = $config->get('click_collect_title');
      $click_collect_delivery['#tooltip'] = $config->get('click_collect_tooltip');
      $click_collect_delivery['#type'] = alshaya_acm_product_available_click_collect($id) ? 'click-collect' : 'click-collect not-available';

      $delivery_options = '<div class="delivery-options-mobile">' . t('Available delivery options') . '</div>';
      $delivery_options .= '<div class="delivery-options-tooltip-wrapper">';
      $delivery_options .= isset($home_delivery) ? render($home_delivery) : '';
      $delivery_options .= isset($click_collect_delivery) ? render($click_collect_delivery) : '';
      $delivery_options .= '</div>';

      $form['cart'][$id]['delivery_options'] = [
        '#markup' => $delivery_options,
      ];

      $form['cart'][$id]['delivery_options']['#wrapper_attributes'] = ['class' => ['delivery-option']];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_acm_product_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  $process_stock = FALSE;

  // We process stock only when loaded from our custom controller.
  if (\Drupal::routeMatch()->getRouteName() == 'alshaya_acm_product.get_cart_form') {
    $process_stock = TRUE;
  }

  \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
  // Get SKU id.
  $sku_entity = SKU::load($form['sku_id']['#value']);

  // For simple products, we just return from here. For configurable products,
  // we check inside loop.
  if ($sku_entity->getType() == 'simple') {
    // We are not going to show the form right now, we don't do any stock check.
    if (!$process_stock) {
      return;
    }
  }

  $sku_identifier = strtolower(Html::cleanCssIdentifier($sku_entity->getSku()));
  $form['#cache']['tags'][] = 'acq_sku:' . $sku_entity->id();

  $form['quantity']['#prefix'] = '<span class="quantity-' . $sku_identifier . '">';
  $form['quantity']['#suffix'] = '</span>';

  if (isset($form['ajax']) && isset($form['ajax']['configurables'])) {
    // Attach size guide link to size attribute. This is statically attached to
    // size, we don't want it for any other attributes.
    if (isset($form['ajax']['configurables']['size'])) {
      // We show the size guide link if available as prefix.
      if ($size_guide_link = _alshaya_acm_product_get_size_guide_link()) {
        $form['ajax']['configurables']['size']['#prefix'] = $size_guide_link;
      }
    }

    $site_default_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
    $configurable_sizes = $form['ajax']['configurables']['size'];
    if (\Drupal::languageManager()->getCurrentLanguage()->getId() !== $site_default_langcode) {
      foreach ($configurable_sizes['#options'] as $key => $option) {
        $product_options_manager = \Drupal::service('acq_sku.product_options_manager');

        // Fetch taxonomy_term from option Id.
        $default_language_option = $product_options_manager->loadProductOptionByOptionId('size', $key, $site_default_langcode);
        if ($default_language_option) {
          $options[$option] = $default_language_option->getName();
        }
      }

      $form['#attached']['drupalSettings']['alshaya_product_size_config'] = $options;
    }

    // Process stock if number of configurable attributes is 1.
    $process_stock = (count($form_state->get('tree')['configurables']) === 1) ? TRUE : FALSE;

    // In case of multiple config attributes, make sure the first one is
    // selected by default on page load.
    if (count($form_state->get('tree')['configurables']) > 1) {
      $configurable_weights = \Drupal::service('config.factory')->get('acq_sku.configurable_form_settings')->get('attribute_weights');
      $config_attributes = array_keys($configurable_weights);
      $root_attribute_code = array_shift($config_attributes);
      $user_input_configurables = $form_state->getUserInput('configurables');
      $first_child = '';

      // Sort configurable weight by the weight value.
      uasort($configurable_weights, function ($a, $b) {
        return $a - $b;
      });

      // Give preference to color label passed via query params.
      $color = \Drupal::request()->query->get('color');
      if ($color) {
        // Get swatch_id from color value.
        $sku_asset_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
        $first_child = $sku_asset_manager->getChildSkuFromColor($sku_entity, $color);
      }

      if (!($first_child instanceof SKU)) {
        $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

        // Default use-case: User landing on PDP from PLP/Search/directly.
        // Set the color applicable to first child sku as default here.
        $child_skus = $sku_manager->getChildSkus($sku_entity);
        $first_child = array_shift($child_skus);
      }

      if ($first_child instanceof SKU) {
        $plugin_manager = \Drupal::service('plugin.manager.sku');
        $plugin_definition = $plugin_manager->pluginFromSKU($sku_entity);

        $class = $plugin_definition['class'];
        $plugin = new $class();

        $first_child_root_attr_value = $plugin->getAttributeValue($first_child, $root_attribute_code);
      }

      $root_attribute_options = $form['ajax']['configurables'][$root_attribute_code]['#options'];

      // Set the color attribute as default only if user has not made a
      // selection.
      if ((isset($root_attribute_options[$first_child_root_attr_value])) &&
        (!isset($user_input_configurables['configurables'][$root_attribute_code]))) {
        $form['ajax']['configurables']['article_castor_id']['#options_attributes'][$first_child_root_attr_value]['selected'] = 'selected';
        $form_state->setValue('configurables', [$root_attribute_code => $first_child_root_attr_value]);

        // Traverse the product tree to the point based on the selected config.
        $tree_pointer = alshaya_acm_product_fetch_selected_option_tree($form_state->get('tree'), $form_state->getValue('configurables'));

        // Disable config options not available for the selected config.
        alshaya_acm_product_update_config_options($form['ajax'], $form_state->get('tree'), $tree_pointer, $form_state->getValue('configurables'), FALSE);
      }
    }

    foreach ($form['ajax']['configurables'] as $configurable_key => &$configurable) {
      if (is_array($configurable)) {
        $form['ajax']['#attributes']['class'][] = 'configurable-wrapper-' . $sku_identifier;

        // Add custom ajax callback for configurables to refresh the gallery.
        $configurable['#ajax']['callback'] = 'alshaya_acm_product_configurable_form_ajax_callback';
        unset($configurable['#ajax']['wrapper']);

        // We are not going to show the form right now, we don't do any
        // stock check for variant SKUs.
        if (!$process_stock) {
          continue;
        }

        $configurable['#options_attributes'] = [];

        // Check if it is a dropdown, we disable the options for which we don't
        // have stock. Apply this check only if we have just 1 configurable
        // attribute. With multiple conf attributes, we cannot get the SKU with
        // a single option.
        if (isset($configurable['#options'])) {
          foreach ($configurable['#options'] as $key => $value) {
            $sku = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), [$configurable_key => $key]);

            // This is very limited, it supports only 1 configurable attribute.
            if ($sku instanceof SKU) {
              $form['#cache']['tags'][] = 'acq_sku:' . $sku->id();
              if ($quantity = alshaya_acm_is_product_in_stock($sku, TRUE)) {
                $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
              }
              else {
                $configurable['#options_attributes'][$key]['disabled'] = 'disabled';
              }
            }
            // For some reason we don't have proper data for the option.
            else {
              $configurable['#options_attributes'][$key]['disabled'] = 'disabled';
            }
          }
        }

        // If all the options are disabled, we show the product is out of stock.
        if (count($configurable['#options']) == count($configurable['#options_attributes'])) {
          $form['quantity'] = [
            '#markup' => '<div class="quantity out-of-stock">' . t('Quantity') . '<div><span class="dash">-</span><span class="arrow"></span></div></div>',
          ];
          $form['add_to_cart'] = [
            '#markup' => '<div class="add-to-cart out-of-stock">' . t('Out of stock') . '</div>',
          ];
        }
      }
    }
  }
  // Stock check for quantity for all other products.
  elseif ($quantity = alshaya_acm_is_product_in_stock($sku_entity)) {
    $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
  }
  else {
    $form['quantity'] = [
      '#markup' => '<div class="quantity out-of-stock">' . t('Quantity') . '<div><span class="dash">-</span><span class="arrow"></span></div></div>',
    ];
    $form['add_to_cart'] = [
      '#markup' => '<div class="add-to-cart out-of-stock">' . t('Out of stock') . '</div>',
    ];
  }
}

/**
 * Overridden ajax callback for configurable add to cart form.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState object.
 *
 * @return array
 *   Build array.
 */
function alshaya_acm_product_configurable_form_ajax_callback(array &$form, FormStateInterface $form_state) {
  // Product attributes that can possibly change whith selected attribute values
  // & hence need to be re-rendered in the AJAX callback.
  $dynamic_parts = call_user_func_array($form_state->prepareCallback('::configurableAjaxCallback'), [&$form, &$form_state]);

  // Configurable product tree keyed with possible config tree, whose leaf items
  // contain the SKUs depending on the tree path traversed.
  $product_tree = $form_state->get('tree');

  // Calculate available config options based on the attribute value selected,
  // in case of multiple config attributes with a product.
  if (count($product_tree['configurables']) > 1) {
    // List of attributes selected by end-users on the form.
    $configurables = $form_state->getValue('configurables');

    // Traverse the product tree till the point where config attributes have a
    // value.
    $tree_pointer = alshaya_acm_product_fetch_selected_option_tree($product_tree, $configurables);

    // Disable config options not available for the selected config.
    alshaya_acm_product_update_config_options($dynamic_parts, $form_state->get('tree'), $tree_pointer, $configurables);

    // If there is only one item returned back,
    // it implies we have reached to the leaf most SKU in the tree.
    if (count($tree_pointer) === 1) {
      $tree_pointer = array_shift($tree_pointer);
    }
  }
  else {
    $tree_pointer = alshaya_acm_product_get_selected_option_sku($form_state->get('tree'), $form_state->getValue('configurables'));
  }

  if ($tree_pointer instanceof SKU) {
    if ($quantity = alshaya_acm_is_product_in_stock($tree_pointer)) {
      $form['quantity']['#options'] = _alshaya_acm_get_cart_quantity_options($quantity);
    }

    $build = [];
    alshaya_acm_product_get_gallery($build, $tree_pointer);
    $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];

    $sku = SKU::load($form['sku_id']['#value']);
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $dynamic_parts['selected_variant_sku'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => [
          'selected-variant-sku',
          'selected-variant-sku-' . $sku_identifier,
        ],
      ],
      '#value' => $tree_pointer->getSku(),
    ];

    $response = new AjaxResponse();

    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $price_block = $skuManager->getPriceBlock($tree_pointer);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));

    $quantity_selector = '.quantity-' . $sku_identifier;
    $response->addCommand(new ReplaceCommand($quantity_selector, $form['quantity']));

    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    // Update the promotions for the product.
    $promotion_links = '';
    $promotion_types = ['cart'];
    $promotions = \Drupal::service('alshaya_acm_product.skumanager')->getPromotionsFromSkuId($tree_pointer, TRUE, $promotion_types);
    if (!empty($promotions)) {
      $promotion_links = implode('</br>', $promotions);
    }
    $response->addCommand(new HtmlCommand('.promotions', $promotion_links));

    // Update the article class to include out of stock class if not in stock.
    // Remove the class if in stock.
    $class_command = $quantity ? 'removeClass' : 'addClass';
    $response->addCommand(new InvokeCommand('article[data-vmode="full"]', $class_command, ['product-out-of-stock']));

    // React for click & collect if stock is available.
    if (\Drupal::moduleHandler()->moduleExists('alshaya_click_collect') && $quantity) {
      // Settings variable.
      $settings = ['alshaya_acm' => ['product_sku' => $sku->getSku()]];

      $config = \Drupal::config('alshaya_click_collect.settings');

      if (!alshaya_acm_product_available_click_collect($tree_pointer->getSku())) {
        $settings['alshaya_acm']['storeFinder'] = FALSE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_unavailable');
      }
      else {
        $settings['alshaya_acm']['storeFinder'] = TRUE;
        $settings['alshaya_acm']['subtitle_txt'] = $config->get('pdp_click_collect_subtitle');
      }

      $response->addCommand(new BaseCommand('updatePDPClickCollect', $settings));

      $response->addCommand(new SettingsCommand($settings, TRUE), TRUE);
    }

    return $response;
  }
  else {
    $build = [];
    $sku = $product_tree['parent'];

    alshaya_acm_product_get_gallery($build, $sku);
    $dynamic_parts['product_zoom'] = $build['gallery']['product_zoom'];

    $response = new AjaxResponse();
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku_identifier = strtolower(Html::cleanCssIdentifier($sku->getSku()));

    $price_block = $skuManager->getPriceBlock($sku);
    $response->addCommand(new HtmlCommand('.price-block-' . $sku_identifier, $price_block));

    $selector = '.configurable-wrapper-' . $sku_identifier;

    // @TODO: Remove this once https://www.drupal.org/node/736066 gets fixed.
    $data['replaceWith'] = \Drupal::service('renderer')->render($dynamic_parts);
    $data['selector'] = $selector;

    $response->addCommand(new InvokeCommand($selector, 'replaceDynamicParts', [$data]));
    // Get the data from BubbleMetaData.
    $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($dynamic_parts);

    // Retrieve the attachments from the $data.
    $attachments = $bubbleable_metadata->getAttachments();

    // Send the updated settings in ajax response.
    $response->addCommand(new SettingsCommand($attachments['drupalSettings'], TRUE));

    return $response;
  }

  return $dynamic_parts;
}

/**
 * Implements hook_block_access().
 */
function alshaya_acm_product_block_access(Block $block, $operation, AccountInterface $account) {
  // Not allow 'page_title_block' block on PDP page.
  if ($operation == 'view' && $block->getPluginId() == 'page_title_block') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.node.canonical') {
      /* @var \Drupal\node\Entity\Node $node */
      $node = $route->getParameter('node');
      return AccessResult::forbiddenIf($node->bundle() == 'acq_product');
    }
  }
}

/**
 * Helper function to get size guide link.
 *
 * @return string
 *   Link html as string or empty if not available.
 */
function _alshaya_acm_product_get_size_guide_link() {
  // Check if we have the configuration set.
  if ($size_guide_link = \Drupal::config('alshaya_acm_product.settings')->get('size_guide_link')) {
    $options = [
      'attributes' => [
        'class' => ['size-guide-link', 'use-ajax'],
        'data-dialog-type' => 'dialog',
        'data-dialog-options' => Json::encode(['height' => 400, 'width' => 700]),
      ],
    ];
    $url = Url::fromRoute('alshaya_acm_product.size_guide_modal', [], $options);
    $link = Link::fromTextAndUrl(t('Size Guide'), $url);
    return $link->toString();
  }

  return '';
}

/**
 * Wrapper function to check if SKU is buyable.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity object.
 *
 * @return bool
 *   SKU is buyable or not.
 */
function alshaya_acm_product_is_buyable(SKU $sku_entity) {
  $all_products_buyable = \Drupal::config('alshaya_acm_product.settings')->get('all_products_buyable');
  // For now we have only one condition, we may have more in future.
  return $all_products_buyable || (bool) $sku_entity->get('attr_is_buyable')->getString();
}

/**
 * Wrapper function to get the cached expiration time for the SKU.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku_entity
 *   SKU entity object.
 *
 * @return int
 *   Cache expiration time.
 */
function _alshaya_acm_get_stock_expiration_time(SKU $sku_entity) {
  $stock_cid = acq_sku_get_stock_cache_id($sku_entity);
  // If 'stock' bin is available.
  if ($stock_cache_backend = \Drupal::cache('stock')) {
    // If cached data is available.
    if ($cache = $stock_cache_backend->get($stock_cid)) {
      return (int) $cache->expire;
    }
  }

  return (int) 0;
}
