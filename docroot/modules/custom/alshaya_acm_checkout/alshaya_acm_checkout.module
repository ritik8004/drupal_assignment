<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\acq_cart\CartInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_theme().
 */
function alshaya_acm_checkout_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['alshaya_address'] = [
    'render element' => 'elements',
    'variables' => [
      'address' => [],
    ],
  ];

  $items['checkout_selected_address'] = [
    'render element' => 'elements',
    'variables' => [
      'delivery_to' => NULL,
      'delivery_address' => NULL,
      'contact_no' => NULL,
      'change_address' => NULL,
    ],
  ];

  return $items;
}

/**
 * Format price value with currency.
 *
 * Default template: acq-commerce-price.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - price: a price value.
 */
function template_preprocess_alshaya_address(array &$variables) {
  $country_list = \Drupal::service('address.country_repository')->getList();
  $variables['address']['country'] = $country_list[$variables['address']['country_code']];
}

/**
 * Implements hook_acq_checkout_pane_pane_info_alter().
 */
function alshaya_acm_checkout_acq_checkout_pane_pane_info_alter(array &$definitions) {
  // Remove all default panes.
  unset($definitions['billing_information']);
  unset($definitions['shipping_information']);
  unset($definitions['review']);
  unset($definitions['completion_message']);
  unset($definitions['payment_methods']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_checkout_form_multistep_checkout_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add markup to show selected card type.
  if (isset($form['acm_payment_methods'], $form['acm_payment_methods']['payment_details_wrapper'], $form['acm_payment_methods']['payment_details_wrapper']['payment_method_cybersource'], $form['acm_payment_methods']['payment_details_wrapper']['payment_method_cybersource']['title'])) {
    $cc_form =& $form['acm_payment_methods']['payment_details_wrapper']['payment_method_cybersource'];

    $cc_form['card_types'] = [
      '#markup' => '
        <div class="card-types-wrapper">
          <span class="card-type card-type-visa"></span>
          <span class="card-type card-type-mastercard"></span>
          <span class="card-type card-type-diners-club"></span>
        </div>
      ',
    ];

    if (isset($cc_form['payment_details'], $cc_form['payment_details']['cc_cvv'])) {
      $cc_cvv_help = t('This code is a three or four digit number printed on the front or back of the credit card');
      $cc_form['payment_details']['cc_cvv']['#suffix'] = '<div class="cvv-help-text-wrapper"><div class="mobile-tooltip-icon"><span class="tooltip-icon"></span><span class="tooltip-content"><p>' . $cc_cvv_help . '</p></span></div><div class="cc_cvv_help_text">' . $cc_cvv_help . '</div></div>';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_acm_checkout_taxonomy_term_presave(EntityInterface $entity) {
  /** @var \Drupal\taxonomy\Entity\Term $entity */
  if ($entity->getVocabularyId() == 'payment_method') {
    if ($entity->get('field_payment_default')->getString() == 1) {
      /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
      $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');
      if ($current_default = $checkout_options_manager->getDefaultPayment()) {
        if ($current_default->id() != $entity->id()) {
          $current_default->get('field_payment_default')->setValue(2);
          $current_default->save();
        }
      }
    }
  }
}

/**
 * Helper function to clean address array.
 *
 * @param mixed $address
 *   Address array or object.
 *
 * @return array
 *   Cleaned address array.
 */
function _alshaya_acm_checkout_clean_address($address) {
  $address = (array) $address;

  $allowed_fields = [
    'firstname',
    'first_name',
    'lastname',
    'last_name',
    'telephone',
    'street',
    'street2',
    'city',
    'region',
    'postcode',
    'country_id',
    'extension',
  ];

  foreach ($address as $key => $value) {
    if (!in_array($key, $allowed_fields)) {
      unset($address[$key]);
    }
  }

  if (!empty($address['region'])) {
    // TODO: We may just require region and not region_id, need to verify later.
    $address['region_id'] = alshaya_acm_checkout_get_region_id_from_name($address['region'], $address['country_id']);
    $address['region'] = $address['region_id'];
  }

  if (!empty($address['telephone'])) {
    $address['telephone'] = _alshaya_acm_checkout_clean_address_phone($address['telephone']);
  }

  // @TODO: CORE-2332 - Fix this properly, possibly in Magento.
  // City is Magento core field but we don't use it at all.
  // But this is required by Cybersource so we need proper value.
  // For now, we copy value of Area to City.
  /** @var \Drupal\alshaya_addressbook\AlshayaAddressBookManager $address_book_manager */
  $address_book_manager = \Drupal::service('alshaya_addressbook.manager');
  $address['city'] = $address_book_manager->getAddressShippingAreaValue($address);

  return $address;
}

/**
 * Helper function to clean address phone number.
 *
 * @param mixed $phone
 *   Phone string, array or object.
 *
 * @return string
 *   Phone number in string.
 */
function _alshaya_acm_checkout_clean_address_phone($phone) {
  $phone_string = '';

  if (is_string($phone)) {
    $phone_string = $phone;
  }
  elseif (is_array($phone) || is_object($phone)) {
    $phone = (array) $phone;
    if (isset($phone['country_code'])) {
      $phone_string = \Drupal::service('mobile_number.util')->getPhoneNumberAsString($phone['mobile'], $phone['country_code']);
    }
    elseif (isset($phone['country-code'])) {
      $phone_string = \Drupal::service('mobile_number.util')->getPhoneNumberAsString($phone['mobile'], $phone['country-code']);
    }
    elseif (isset($phone['value'])) {
      $phone_string = $phone['value'];
    }
  }

  return str_replace(' ', '', $phone_string);
}

/**
 * Implements hook_alshaya_profile_installed_final_task().
 */
function alshaya_acm_checkout_alshaya_profile_installed_final_task($profile, array $modules) {
  if (in_array('alshaya_i18n', $modules)) {
    // Array of language translation strings.
    $strings = [
      'CUSTOMER SERVICE' => [
        'ar' => 'خدمة العملاء',
      ],
      '<p>For Kuwait <span class="light no-direction">+965 XXX XX XX</span></p><p>For other regions <span class="light no-direction">8 (800) XXX XX X</span></p><p><span class="light">We are open from Sunday – Saturday from 9:30 am – 8:30 pm (Kuwait Local Time, GMT +3)</span></p>' => [
        'ar' => '<p>الكويت <span class="light no-direction">+965 XXX XX XX</span></p><p>المناطق الأخرى <span class="light no-direction">8 (800) XXX XX X</span></p><p><span class="light">مواعيد العمل: الأحد إلى السبت من الساعة 9:30 صباحًا حتى الساعة 8:30 مساءً (حسب التوقيت المحلي للكويت، و3+ بتوقيت غرينتش)</span></p>',
      ],
      'Username does not contain a valid email.' => [
        'ar' => 'اسم المستخدم لا يشمل عنوان بريد إلكتروني صحيح',
      ],
    ];

    alshaya_i18n_save_translations($strings);

    /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
    $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');

    // Create all payment plugins in taxonomy terms.
    /** @var \Drupal\acq_payment\Annotation\ACQPaymentMethod $payment_plugins */
    $payment_plugins = \Drupal::service('plugin.manager.acq_payment_method')->getDefinitions();
    foreach ($payment_plugins as $plugin) {
      $checkout_options_manager->loadPaymentMethod($plugin['id'], $plugin['label']->render());
    }

    // Add translations for specific payment methods by default.
    // Cash on Delivery.
    $cod = $checkout_options_manager->loadPaymentMethod('cashondelivery');
    $cod_ar = $cod->addTranslation('ar', []);
    $cod_ar->setName('نقداً عند التسليم');
    $cod_ar->save();

    // Cybersource.
    $cybersource = $checkout_options_manager->loadPaymentMethod('cybersource');
    $cybersource->setName('Credit Card');
    $cybersource->save();

    $cybersource_ar = $cybersource->addTranslation('ar', []);
    $cybersource_ar->setName('البطاقة الإئتمانية');
    $cybersource_ar->save();

    // K-Net.
    $knet = $checkout_options_manager->loadPaymentMethod('knet');
    $knet->get('description')->setValue('Please proceed to K-Net payment gateway by clicking the "Place Order" button below.');
    // Set K-Net to default during install.
    $knet->get('field_payment_default')->setValue(1);
    $knet->save();

    $knet_ar = $knet->addTranslation('ar', []);
    $knet_ar->setName('بطاقة ائتمان k-net');
    $knet_ar->get('description')->setValue('يرجى المتابعة إلى صفحة الدفع عن طريق K-Net  بواسطة الضغط على رابط "سجل الطلبية" أدناه');
    $knet_ar->save();
  }

  $acq_checkout_settings = \Drupal::config('alshaya_acm_checkout.settings');

  // Create shipping method term for click and collect during install.
  /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
  $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');

  // Get the code based on rules of combining carrier and method codes.
  $code = $checkout_options_manager->getClickandColectShippingMethod();

  $default_name = t('Click and collect');
  $default_order_description = t('Your order will be available for pickup at the following store');

  // This is just to create click and collect method term during install.
  $checkout_options_manager->loadShippingMethod($code, $default_name, '', $acq_checkout_settings->get('click_collect_method_carrier_code'), $acq_checkout_settings->get('click_collect_method_method_code'), $default_order_description);

  // Configure allowed credit cards for cybersource.
  $configFactory = \Drupal::configFactory()->getEditable('acq_cybersource.settings');
  // Allowed list is received in comments of MMCPA-164.
  $configFactory->set('allowed_cc_types', 'VI,MC,DN');
  $configFactory->save();
}

/**
 * Helper function to get region code.
 *
 * @param string $region
 *   Region to get region code for. It could be region code itself.
 * @param string $country_code
 *   Country code.
 *
 * @return mixed|string
 *   Region code.
 */
function alshaya_acm_checkout_get_region_id_from_name($region, $country_code = 'US') {
  $subdivision_repo = \Drupal::service('address.subdivision_repository');
  $regions = $subdivision_repo->getList([$country_code]);

  // Country has no regions.
  if (empty($regions)) {
    return '';
  }

  // Region is already the code.
  if (isset($regions[$region])) {
    return $region;
  }

  // Region is name and we have the code.
  if ($region_key = array_search($region, $regions)) {
    return $region_key;
  }

  // Invalid value for region, we log warning and return empty string.
  \Drupal::logger('alshaya_acm_checkout')->warning('Invalid region @region passed for country code @country_code', ['@region' => $region, '@country_code' => $country_code]);

  return '';
}

/**
 * Helper function to return order from session.
 *
 * @return array
 *   Order array if found.
 */
function _alshaya_acm_checkout_get_last_order_from_session($reset = FALSE) {
  static $order;

  if (!empty($order)) {
    return $order;
  }

  \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.orders');

  $session = \Drupal::request()->getSession();
  $order_id = $session->get('last_order_id');

  // Throw access denied if nothing in session.
  if (empty($order_id)) {
    throw new AccessDeniedHttpException();
  }

  if (\Drupal::currentUser()->isAnonymous() || !alshaya_acm_customer_is_customer(\Drupal::currentUser())) {
    $email = $session->get('email_order_' . $order_id);
  }
  else {
    $email = \Drupal::currentUser()->getEmail();
  }

  // If flag is set to reset cache.
  if ($reset) {
    /** @var \Drupal\alshaya_acm_customer\OrdersManager $orders_manager */
    $orders_manager = \Drupal::service('alshaya_acm_customer.orders_manager');
    $orders_manager->clearOrderCache($email);
  }

  $orders = alshaya_acm_customer_get_user_orders($email);
  $order_index = array_search($order_id, array_column($orders, 'order_id'));

  if ($order_index === FALSE) {
    // If we don't find the order in first go, we clear cache and search again.
    if (!$reset) {
      _alshaya_acm_checkout_get_last_order_from_session(TRUE);
    }

    // We didn't find even after clearing cache. Throw error now.
    throw new NotFoundHttpException();
  }

  $order = $orders[$order_index];

  return $order;
}

/**
 * Implements hook_acq_cybersource_before_get_token_cart_alter().
 */
function alshaya_acm_checkout_acq_cybersource_before_get_token_cart_alter(CartInterface $cart, array $form_data, array &$errors) {
  $terms_accepted = isset($form_data['checkout_terms'], $form_data['checkout_terms']['terms']) && !empty($form_data['checkout_terms']['terms']);
  $billing = $form_data['billing_address'];

  /** @var \Drupal\alshaya_addressbook\AlshayaAddressBookManager $address_book_manager */
  $address_book_manager = \Drupal::service('alshaya_addressbook.manager');

  // Do all validations first.
  if (!$terms_accepted) {
    $errors['checkout_terms[terms]'] = t('Please agree to the Terms and Conditions.');
  }

  if (empty($billing['same_as_shipping']) || $billing['same_as_shipping'] != 1) {
    if ($violations = $address_book_manager->validateAddress($billing['address']['billing'])) {
      foreach ($violations as $field => $message) {
        $errors['billing_address[address][billing][' . $field . ']'] = $message;
      }
    }
  }

  if (!empty($errors)) {
    return;
  }

  // Cybersource requires billing info to be available before it processes
  // credit card. This info is set in the signed fields by Magento. To ensure
  // we have the values set, we need to pass it to Magento before we start
  // payment process.
  if (!empty($billing['same_as_shipping']) && $billing['same_as_shipping'] == 1) {
    alshaya_acm_checkout_set_shipping_into_billing($cart);
  }
  else {
    /** @var \Drupal\alshaya_addressbook\AlshayaAddressBookManager $address_book_manager */
    $address_book_manager = \Drupal::service('alshaya_addressbook.manager');
    $address = _alshaya_acm_checkout_clean_address($address_book_manager->getMagentoAddressFromAddressArray($billing['address']['billing']));
    $cart->setBilling($address);
  }

}

/**
 * Helper function to copy shipping address into billing address.
 *
 * @param \Drupal\acq_cart\CartInterface $cart
 *   Cart object.
 */
function alshaya_acm_checkout_set_shipping_into_billing(CartInterface $cart) {
  /** @var \Drupal\alshaya_addressbook\AlshayaAddressBookManager $address_book_manager */
  $address_book_manager = \Drupal::service('alshaya_addressbook.manager');

  $shipping_address = (array) $cart->getShipping();

  // Loading address from address book if customer_address_id is available.
  if (isset($shipping_address['customer_address_id'])) {
    if ($entity = $address_book_manager->getUserAddressByCommerceId($shipping_address['customer_address_id'])) {
      $shipping_address = $address_book_manager->getAddressFromEntity($entity, FALSE);
    }
  }

  $cart->setBilling(_alshaya_acm_checkout_clean_address($shipping_address));
}
