<?php

/**
 * @file
 * Contains general hooks and alters.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_theme().
 */
function alshaya_acm_checkout_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['alshaya_address'] = [
    'render element' => 'elements',
    'variables' => [
      'address' => [],
    ],
  ];

  $items['checkout_selected_address'] = [
    'render element' => 'elements',
    'variables' => [
      'delivery_to' => NULL,
      'delivery_address' => NULL,
      'contact_no' => NULL,
      'change_address' => NULL,
    ],
  ];

  return $items;
}

/**
 * Format price value with currency.
 *
 * Default template: acq-commerce-price.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - price: a price value.
 */
function template_preprocess_alshaya_address(array &$variables) {
  $country_list = \Drupal::service('address.country_repository')->getList();
  $variables['address']['country'] = $country_list[$variables['address']['country_code']];
}

/**
 * Implements hook_acq_checkout_pane_pane_info_alter().
 */
function alshaya_acm_checkout_acq_checkout_pane_pane_info_alter(array &$definitions) {
  // Remove all default panes.
  unset($definitions['billing_information']);
  unset($definitions['shipping_information']);
  unset($definitions['review']);
  unset($definitions['completion_message']);
  unset($definitions['payment_methods']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_acm_checkout_form_multistep_checkout_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add markup to show selected card type.
  if (isset($form['acm_payment_methods'], $form['acm_payment_methods']['payment_details'], $form['acm_payment_methods']['payment_details']['cc_number'])) {
    $form['acm_payment_methods']['payment_details']['cc_number']['#weight'] = 0;
    $form['acm_payment_methods']['payment_details']['cc_number']['#suffix'] = '
      <div class="card-types-wrapper">
        <span class="card-type card-type-visa"></span>
        <span class="card-type card-type-mastercard"></span>
        <span class="card-type card-type-diners-club"></span>
      </div>
    ';
    $form['acm_payment_methods']['payment_details']['cc_cvv']['#weight'] = 1;
    $form['acm_payment_methods']['payment_details']['cc_cvv']['#suffix'] = '<div class="cc_cvv_help_text">' . t('This code is a three or four digit number printed on the front or back of the credit card') . '</div>';
    $form['acm_payment_methods']['payment_details']['cc_exp_month']['#weight'] = 2;
    $form['acm_payment_methods']['payment_details']['cc_exp_year']['#weight'] = 2;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_acm_checkout_taxonomy_term_presave(EntityInterface $entity) {
  /** @var \Drupal\taxonomy\Entity\Term $entity */
  if ($entity->getVocabularyId() == 'payment_method') {
    if ($entity->get('field_payment_default')->getString() == 1) {
      /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
      $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');
      if ($current_default = $checkout_options_manager->getDefaultPayment()) {
        if ($current_default->id() != $entity->id()) {
          $current_default->get('field_payment_default')->setValue(2);
          $current_default->save();
        }
      }
    }
  }
}

/**
 * Helper function to clean address array.
 *
 * @param mixed $address
 *   Address array or object.
 *
 * @return array
 *   Cleaned address array.
 */
function _alshaya_acm_checkout_clean_address($address) {
  $address = (array) $address;

  $allowed_fields = [
    'firstname',
    'first_name',
    'lastname',
    'last_name',
    'telephone',
    'street',
    'street2',
    'city',
    'region',
    'postcode',
    'country_id',
    'extension',
  ];

  foreach ($address as $key => $value) {
    if (!in_array($key, $allowed_fields)) {
      unset($address[$key]);
    }
  }

  if (!empty($address['region'])) {
    // TODO: We may just require region and not region_id, need to verify later.
    $address['region_id'] = alshaya_acm_checkout_get_region_id_from_name($address['region'], $address['country_id']);
    $address['region'] = $address['region_id'];
  }

  if (!empty($address['telephone'])) {
    $address['telephone'] = _alshaya_acm_checkout_clean_address_phone($address['telephone']);
  }

  return $address;
}

/**
 * Helper function to clean address phone number.
 *
 * @param mixed $phone
 *   Phone string, array or object.
 *
 * @return string
 *   Phone number in string.
 */
function _alshaya_acm_checkout_clean_address_phone($phone) {
  $phone_string = '';

  if (is_string($phone)) {
    $phone_string = $phone;
  }
  elseif (is_array($phone) || is_object($phone)) {
    $phone = (array) $phone;
    if (isset($phone['country_code'])) {
      $phone_string = \Drupal::service('mobile_number.util')->getPhoneNumberAsString($phone['mobile'], $phone['country_code']);
    }
    elseif (isset($phone['country-code'])) {
      $phone_string = \Drupal::service('mobile_number.util')->getPhoneNumberAsString($phone['mobile'], $phone['country-code']);
    }
    elseif (isset($phone['value'])) {
      $phone_string = $phone['value'];
    }
  }

  return $phone_string;
}

/**
 * Implements hook_alshaya_profile_installed().
 */
function alshaya_acm_checkout_alshaya_profile_installed(array $modules) {
  if (in_array('alshaya_i18n', $modules)) {
    // Array of language translation strings.
    $strings = [
      'CUSTOMER SERVICE' => [
        'ar' => 'خدمة العملاء',
      ],
      '<p>For Kuwait <span class="light">+965 XXX XX XX</span></p><p>For other regions <span class="light">8 (800) XXX XX X</span></p><p><span class="light">We are open from Sunday – Saturday from 9:30 am – 8:30 midnight (Kuwait Local Time, GMT +3)</span></p>' => [
        'ar' => '<p>الكويت <span class="light">+965 XXX XX XX</span></p><p>المناطق الأخرى <span class="light">8 (800) XXX XX X</span></p><p><span class="light">مواعيد العمل: الأحد إلى السبت من الساعة 9:30 صباحًا حتى الساعة 8:30 منتصف الليل (حسب التوقيت المحلي للكويت، و3+ بتوقيت غرينتش)</span></p>',
      ],
    ];

    alshaya_i18n_save_translations($strings);
  }

  $acq_checkout_settings = \Drupal::config('alshaya_acm_checkout.settings');

  // Create shipping method term for click and collect during install.
  /** @var \Drupal\alshaya_acm_checkout\CheckoutOptionsManager $checkout_options_manager */
  $checkout_options_manager = \Drupal::service('alshaya_acm_checkout.options_manager');

  // Get the code based on rules of combining carrier and method codes.
  $code = $checkout_options_manager->getClickandColectShippingMethod();

  $default_name = t('Click and collect');
  $default_order_description = t('Your order will be available for pickup at the following store');

  // This is just to create click and collect method term during install.
  $checkout_options_manager->loadShippingMethod($code, $default_name, '', $acq_checkout_settings->get('click_collect_method_carrier_code'), $acq_checkout_settings->get('click_collect_method_method_code'), $default_order_description);
}

/**
 * Helper function to get region code.
 *
 * @param string $region
 *   Region to get region code for. It could be region code itself.
 * @param string $country_code
 *   Country code.
 *
 * @return mixed|string
 *   Region code.
 */
function alshaya_acm_checkout_get_region_id_from_name($region, $country_code = 'US') {
  $subdivision_repo = \Drupal::service('address.subdivision_repository');
  $regions = $subdivision_repo->getList([$country_code]);

  // Country has no regions.
  if (empty($regions)) {
    return '';
  }

  // Region is already the code.
  if (isset($regions[$region])) {
    return $region;
  }

  // Region is name and we have the code.
  if ($region_key = array_search($region, $regions)) {
    return $region_key;
  }

  // Invalid value for region, we log warning and return empty string.
  \Drupal::logger('alshaya_acm_checkout')->warning('Invalid region @region passed for country code @country_code', ['@region' => $region, '@country_code' => $country_code]);

  return '';
}

/**
 * Helper function to return order from session.
 *
 * @return array
 *   Order array if found.
 */
function _alshaya_acm_checkout_get_last_order_from_session() {
  \Drupal::moduleHandler()->loadInclude('alshaya_acm_customer', 'inc', 'alshaya_acm_customer.orders');

  $temp_store = \Drupal::service('user.private_tempstore')->get('alshaya_acm_checkout');
  $order_data = $temp_store->get('order');

  // Throw access denied if nothing in session.
  if (empty($order_data) || empty($order_data['id'])) {
    throw new AccessDeniedHttpException();
  }

  // @TODO: Remove the fix when we get the full order details.
  $order_id = str_replace('"', '', $order_data['id']);

  if (\Drupal::currentUser()->isAnonymous()) {
    $email = $temp_store->get('email');
  }
  else {
    $email = \Drupal::currentUser()->getEmail();
  }

  // At this stage we always want to have fresh data.
  /** @var \Drupal\alshaya_acm_customer\OrdersManager $orders_manager */
  $orders_manager = \Drupal::service('alshaya_acm_customer.orders_manager');
  $orders_manager->clearOrderCache($email);

  $orders = alshaya_acm_customer_get_user_orders($email);

  $order_index = array_search($order_id, array_column($orders, 'order_id'));

  if ($order_index === FALSE) {
    throw new NotFoundHttpException();
  }

  return $orders[$order_index];
}
