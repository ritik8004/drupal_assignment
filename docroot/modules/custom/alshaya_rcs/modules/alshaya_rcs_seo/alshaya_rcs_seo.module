<?php

/**
 * @file
 * Module file for RCS Seo.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Url;
use Drupal\rcs_placeholders\Service\RcsPhPathProcessor;

/**
 * Implements hook_library_info_alter().
 */
function alshaya_rcs_seo_library_info_alter(&$libraries, $extension) {
  if ($extension !== 'datalayer') {
    return;
  }

  $new_source = '/' . drupal_get_path('module', 'alshaya_rcs_seo') . '/js/datapush.js';
  $options = $libraries['datapush']['js']['js/datapush.js'];
  unset($libraries['datapush']['js']['js/datapush.js']);
  $libraries['datapush']['js'][$new_source] = $options;

  $libraries['datapush']['dependencies'] = [
    'core/jquery',
    'core/drupal',
    'core/drupalSettings',
    'rcs_placeholders/helpers',
    'alshaya_rcs_seo/alshaya_rcs_product_seo',
  ];

  // Load it in the footer as the files which contain the event handlers will
  // be loaded in the footer only.
  unset($libraries['datapush']['header']);
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_rcs_seo_page_attachments_alter(&$attachments) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  if ($route_name === 'alshaya_spc.checkout.confirmation') {
    // This adds the library to the top of the array and above the
    // datalayer/datapush library.
    // If we put the weight=-1 for this, then the library dependencies are
    // loaded later, thus causing issues.
    // Hence we follow this approach.
    array_unshift($attachments['#attached']['library'], 'alshaya_rcs_seo/order_confirmation');
  }

  // This adds 'hreflang' to 'rcs_category' and 'rcs_product' page.
  if ($route_name === 'entity.taxonomy_term.canonical' || $route_name === 'entity.node.canonical') {

    // If the current route has no parameters, return.
    $route = $route_match->getRouteObject();
    $parameters = $route ? $route->getOption('parameters') : [];
    if (empty($parameters)) {
      return;
    }

    // Determine if the current route represents an entity.
    foreach ($parameters as $name => $options) {
      if (!isset($options['type']) || !str_starts_with($options['type'], 'entity:')) {
        continue;
      }

      $entity = $route_match->getParameter($name);

      if ($entity instanceof ContentEntityInterface &&
        ($entity->bundle() === 'rcs_category' || $entity->bundle() === 'rcs_product')) {

        foreach ($entity->getTranslationLanguages() as $language) {
          $hreflang = $language->getId();

          $url = Url::fromRoute(
            '<front>',
            [],
            ['absolute' => TRUE, 'language' => $language]
          )->toString();

          // Add the URL as is, RCS expects the URL to be same in all languages.
          $url .= RcsPhPathProcessor::getFullPath();

          // Unset "html_head_link" structure coming from 'content_translation'.
          foreach ($attachments['#attached']['html_head_link'] as $key => $element) {
            if (isset($element[0]['hreflang']) && $element[0]['hreflang'] === $hreflang) {
              unset($attachments['#attached']['html_head_link'][$key]);

              break;
            }
          }

          $attachments['#attached']['html_head_link'][] = [
            [
              'rel' => 'alternate',
              'hreflang' => $hreflang,
              'href' => $url,
            ],
          ];
        }
      }
    }
  }

}

/**
 * Implements hook_simple_sitemap_links_alter().
 */
function alshaya_rcs_seo_simple_sitemap_links_alter(array &$links, $sitemap_variant) {
  if ($sitemap_variant === 'default') {
    // Change the sitemap domain based on config value.
    $sitemap_domain = \Drupal::config('alshaya_rcs_seo.settings')->get('sitemap_domain_to_use') ?? 'drupal';
    switch ($sitemap_domain) {
      case 'magento':
        // Prepare the sitemap domain URL.
        $sitemap_domain_url = \Drupal::config('alshaya_api.settings')->get('magento_host');
        break;

      default:
        global $base_url;
        $sitemap_domain_url = $base_url;
        break;
    }

    $variant_links = [];
    $country_code = _alshaya_custom_get_site_level_country_code();
    $url = $sitemap_domain_url . '/media/sitemap/' . strtolower($country_code) . '/sitemap.xml';
    $variant_links[] = [
      'url' => $url,
      'priority' => '0.5',
    ];

    $links = array_merge($variant_links, $links);

    // Unset the image-sitemap from the default sitemap variant.
    $endsWith = '/image-sitemap';
    $len = strlen($endsWith);
    foreach ($links as $key => $value) {
      if (substr($value['url'], -$len) === $endsWith) {
        unset($links[$key]);
      }
    }
  }
}

/**
 * Implements hook_alshaya_rcs_category_query_fields_alter().
 */
function alshaya_rcs_seo_alshaya_rcs_category_query_fields_alter(&$fields) {
  $current_route = \Drupal::routeMatch()->getRouteName();
  if ($current_route === 'alshaya_seo.sitemap') {
    $fields[] = 'description';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_rcs_seo_module_implements_alter(&$implementations, $hook) {
  // To call the alshaya_rcs_seo_rcs_placeholders_graphql_query_alter at the end
  // for RCS Seo specific changes.
  if ($hook == 'rcs_placeholders_graphql_query_alter'
    && isset($implementations['alshaya_rcs_seo'])) {
    $group = $implementations['alshaya_rcs_seo'];
    unset($implementations['alshaya_rcs_seo']);
    $implementations['alshaya_rcs_seo'] = $group;
  }
}

/**
 * Implements hook_rcs_placeholders_graphql_query_alter().
 */
function alshaya_rcs_seo_rcs_placeholders_graphql_query_alter(&$query_fields) {
  // Adding a check for categories just in case if categories doesn't exists.
  if (array_key_exists('categories', $query_fields)) {
    array_push($query_fields['categories']['query']['query($urlKey: [String])']['categories(filters: { url_path: { in: $urlKey }})']['items'], 'gtm_name');
    array_push($query_fields['categories']['query']['query($urlKey: [String])']['categories(filters: { url_path: { in: $urlKey }})']['items']['breadcrumbs'], 'category_gtm_name');
  }
  // Add the GTM attributes for pdp product query as well.
  if (array_key_exists('pdp_product', $query_fields)) {
    array_push($query_fields['pdp_product']['query']['query($url: String)']['products(filter: {url_key: {eq: $url}})']['items']['categories'], 'gtm_name');
    array_push($query_fields['pdp_product']['query']['query($url: String)']['products(filter: {url_key: {eq: $url}})']['items']['categories']['breadcrumbs'], 'category_gtm_name');
  }
  // Get the GTM attributes in single_product_by_color_sku.
  if (array_key_exists('single_product_by_color_sku', $query_fields)) {
    $items = $query_fields['single_product_by_color_sku']['query']['query($sku: String)']['products(filter: {sku: {eq: $sku}})']['items'];
    $items = array_merge($items, [
      'gtm_attributes' => [
        'name',
      ],
    ]);
    $query_fields['single_product_by_color_sku']['query']['query($sku: String)']['products(filter: {sku: {eq: $sku}})']['items'] = $items;
  }
}

/**
 * Implements hook_metatags_attachments_alter().
 */
function alshaya_rcs_seo_metatags_attachments_alter(array &$attachments) {

  // Do not process for Authenticated user.
  if (\Drupal::currentUser()->isAuthenticated()) {
    return;
  }

  // Check if the SSR is enabled for metatag.
  if (!\Drupal::config('alshaya_rcs_seo.settings')->get('enable_ssr_metatag')) {
    return;
  }

  // Get page type from request i.e. product, category or promotion.
  $page_type = \Drupal::service('rcs_placeholders.path_processor')->getRcsPageType();
  if (empty($page_type)) {
    return;
  }

  /** @var \Drupal\alshaya_rcs_seo\Services\AlshayaRcsMetatagHelper $rcs_metatag_helper */
  $rcs_metatag_helper = \Drupal::service('alshaya_rcs_seo.metatag_helper');
  $rcs_metatags = &drupal_static('rcs_seo_metatag_data', []);

  // Get metatag details using graphQL call to magento for page type.
  if (empty($rcs_metatags[$page_type])) {
    $rcs_metatags[$page_type] = $rcs_metatag_helper->getRcsMetatagFromMagento($page_type);
    // Process meta details w.r.t page type.
    $rcs_metatag_helper->processMetaForPageType($page_type, $rcs_metatags[$page_type]);
  }

  // We will not process if data is not available.
  if (empty($rcs_metatags[$page_type])) {
    return;
  }

  // Replace the rcs placeholders in metatags with actual data.
  foreach ($attachments['#attached']['html_head'] as &$attachment) {
    $attribute_type = $rcs_metatag_helper->getRcsSeoMetatagAttribute($attachment);
    if (empty($attribute_type)) {
      continue;
    }

    // Do the replacement based on RCS data.
    $attribute_data = &$attachment[0]['#attributes'][$attribute_type];
    if (is_string($attribute_data) && strpos($attribute_data, "#rcs.$page_type") > -1) {
      $rcs_key = explode('#', $attribute_data)[1];
      $rcs_metatag = str_replace("rcs.$page_type.", '', $rcs_key);
      if (array_key_exists($rcs_metatag, $rcs_metatags[$page_type])) {
        $attribute_data = str_replace("#$rcs_key#", $rcs_metatags[$page_type][$rcs_metatag], $attribute_data);
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function alshaya_rcs_seo_preprocess_page(&$variables) {
  // Replace the category name and description for PLP pages for SEO.
  // If the data is available in rcs_seo_processed_metatags.
  // @see: alshaya_rcs_seo_metatags_attachments_alter
  // Use the data from static storage to replace the taxonomy data.
  $route = \Drupal::routeMatch();
  if ($route->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $route->getParameter('taxonomy_term');
    if ($term->bundle() == 'rcs_category') {
      $rcs_metatags = &drupal_static('rcs_seo_metatag_data', []);
      if (empty($rcs_metatags['category'])) {
        return;
      }
      // Category name and description replacement using SSR.
      $variables['category_term_name'] = $rcs_metatags['category']['name'];
      $variables['category_term_description'] = $rcs_metatags['category']['description'];
      if (strpos($variables['page']['#title'], '#rcs.category.name#') > -1) {
        $variables['page']['#title'] = $rcs_metatags['category']['name'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function alshaya_rcs_seo_preprocess_block(&$variables) {
  // Replace the category, promotion title and description for PLP pages.
  // If the data is available in rcs_seo_processed_metatags.
  // @see: alshaya_rcs_seo_metatags_attachments_alter
  $block_plugins = [
    'rcs_term_description',
    'page_title_block',
    'alshaya_rcs_promotion_description',
  ];
  if (isset($variables['plugin_id'])
    && in_array($variables['plugin_id'], $block_plugins)) {
    // Check if the data is available.
    $rcs_metatags = &drupal_static('rcs_seo_metatag_data', []);
    // Process only for promo and category pages.
    if (empty($rcs_metatags['category']) && empty($rcs_metatags['promotion'])) {
      return;
    }

    // Replacement for category and promotion name for page title.
    if ($variables['plugin_id'] == 'page_title_block') {
      $title = &$variables['content']['#title'];
      if (!empty($rcs_metatags['category']) && strpos($title['#markup'], '#rcs.category.name#') > -1) {
        $title['#markup'] = str_replace('#rcs.category.name#', $rcs_metatags['category']['name'], $title['#markup']);
      }
      elseif (!empty($rcs_metatags['promotion']) && strpos($title, '#rcs.promotion.name#') > -1) {
        $title = new FormattableMarkup($title, ['#rcs.promotion.name#' => $rcs_metatags['promotion']['name']]);
      }
      return;
    }

    // Replacement for description.
    if ($variables['plugin_id'] == 'rcs_term_description'
      && strpos($variables['content']['#markup'], '#rcs.category.description#') > -1) {
      // Setting max-age to get refresh after 20min with CF settings.
      $variables['#cache']['max-age'] = 1200;
      $variables['content']['#markup'] =
        str_replace('#rcs.category.description#', $rcs_metatags['category']['description'], $variables['content']['#markup']);
    }

    // Replacement for promo description.
    if ($variables['plugin_id'] == 'alshaya_rcs_promotion_description'
      && strpos($variables['content']['inside']['#children'], '#rcs.promotion.description#') > -1) {
      // Setting max-age to get refresh after 20min with CF settings.
      $variables['#cache']['max-age'] = 1200;
      $variables['content']['inside']['#children'] =
        str_replace('#rcs.promotion.description#', $rcs_metatags['promotion']['description'], $variables['content']['inside']['#children']);
    }
  }
}
