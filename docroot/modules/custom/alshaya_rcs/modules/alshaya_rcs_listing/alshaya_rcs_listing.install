<?php

/**
 * @file
 * Functions around module install.
 */

use Drupal\block\Entity\Block;
use Drupal\block\BlockInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\alshaya_rcs_main_menu\Service\AlshayaRcsCategoryDataMigration;

/**
 * Get list of blocks which needs to be enabled/disabled.
 *
 * @return array
 *   An array of block ids.
 */
function alshaya_rcs_listing_get_block_ids() {
  return [
    'alshayagridcountblock_plp' => '',
    'alshaya_algolia_react_plp' => 'alshaya_algolia_listing_v2',
    'categorylhnblock' => 'rcs_placeholders_lhn',
    'views_block__plp_promotional_banner_block_1' => 'alshaya_rcs_promotional_banner',
    'views_block__alshaya_term_description_block_1' => 'alshaya_rcs_term_description',
    'views_block__product_category_level_2_3_block_2' => 'rcs_placeholders_department_lhn',
    'views_block__product_category_level_3_block_2' => 'alshaya_rcs_plp_mobile_menu',
  ];
}

/**
 * Implements hook_install().
 */
function alshaya_rcs_listing_install() {
  // Move the rcs navigation block to current theme.
  $current_theme = \Drupal::config('system.theme')->get('default');
  if (!empty($current_theme)) {
    alshaya_block_move_blocks_theme_to_theme($current_theme, 'alshaya_white_label');
  }
  // Disable the V1 blocks that are not required.
  $blocks = alshaya_rcs_listing_get_block_ids();
  foreach ($blocks as $prev_block_id => $new_block_id) {
    $existing_block_weight = NULL;
    $prev_block = Block::load($prev_block_id);
    if ($prev_block instanceof BlockInterface) {
      // Change the RCS block weight based on the V1 block weight.
      $existing_block_weight = $prev_block->getWeight();
      $prev_block->disable()->save();
      // Load the RCS Block and Change the weight.
      if ($new_block_id) {
        $new_block = Block::load($new_block_id);
        if ($new_block instanceof BlockInterface) {
          $new_block->setWeight($existing_block_weight);
          // Update the block region based on the previous block.
          $new_block->setRegion($prev_block->getRegion());
          $new_block->save();
        }
      }
    }
  }

  // Migrate data.
  alshaya_rcs_listing_migrate_field_carousel_slug();

  // Initiate the batch process to update the advanced page node with proper
  // category slug.
  $batch = [
    'title' => 'Update advanced pages',
    'operations' => [
      ['_alshaya_rcs_listing_advance_page_batch_operation', []],
    ],
    'init' => t('Starting processing of advance page node update'),
    'file' => drupal_get_path('module', 'alshaya_rcs_listing') . '/alshaya_rcs_listing.install',
    'error_message' => t('An error occurred during processing'),
  ];

  batch_set($batch);

  // Fetch acq product category enriched terms.
  $terms = \Drupal::service('alshaya_rcs_main_menu.category_data_migration')->processProductCategoryMigration(NULL, FALSE);
  if (!empty($terms)) {
    // Setting batch separately as it doesnt get executed in service.
    // Set batch operations to migrate terms.
    $operations = [];
    foreach (array_chunk($terms, 30) as $term_chunk) {
      $operations[] = [
        'Drupal\alshaya_rcs_main_menu\Service\AlshayaRcsCategoryDataMigration::batchProcess',
        [$term_chunk, 30, AlshayaRcsCategoryDataMigration::TARGET_VOCABULARY_ID],
      ];
    }
    $batch = [
      'title' => dt('Migrating enriched Product Category'),
      'init_message' => dt('Starting processing rcs category...'),
      'operations' => $operations,
      'error_message' => dt('Unexpected error while migrating enriched ACM Categories.'),
      'finished' => 'Drupal\alshaya_rcs_main_menu\Service\AlshayaRcsCategoryDataMigration::batchFinished',
    ];
    batch_set($batch);
  }

  // Set MDC index as index prefix.
  \Drupal::service('alshaya_search_algolia.index_helper')->setAlgoliaIndexPrefix('mdc');
}

/**
 * Batch function to migrate the product category term to category slug.
 */
function _alshaya_rcs_listing_advance_page_batch_operation(&$sandbox) {
  // Bulk update all the advanced page node with the product category.
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'advanced_page')
    ->execute();
  // Use the sandbox to store the information needed to track progression.
  if (!isset($sandbox['current'])) {
    $sandbox['current'] = 0;
    $sandbox['max'] = count($nids);
  }

  // Process nodes by groups of 10.
  $limit = 10;
  $result = array_slice($nids, $sandbox['current'], $limit);
  foreach ($result as $nid) {
    $entity_storage = \Drupal::entityTypeManager()->getStorage('node');
    $entity = $entity_storage->load($nid);
    // Load different translated versions of the node.
    foreach ($entity->getTranslationLanguages() as $langcode => $language) {
      $translated_node = $entity->getTranslation($langcode);
      // Update advanced page category slug with product category.
      $product_category_id = $translated_node->get('field_product_category')->getString();
      if ($product_category_id) {
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($product_category_id);
        // Proceed only if the term object is present.
        if ($term instanceof TermInterface) {
          $path = $term->get('path');
          if (!$path->isEmpty()) {
            // Remove forward slash if present.
            $alias = $path->alias;
            if ($alias && $alias[0] == '/') {
              $alias = substr($alias, 1);
            }
            $entity->set('field_category_slug', $alias);
            $entity->save();
          }
        }
      }
    }

    // Update our progress information.
    $sandbox['current']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['current'] / $sandbox['max']);

  if ($sandbox['#finished'] >= 1) {
    return 'Product category migration to category slug is finished.';
  }
}

/**
 * Implements hook_uninstall().
 */
function alshaya_rcs_listing_uninstall() {
  // Enable the V1 blocks.
  $blocks = alshaya_rcs_listing_get_block_ids();
  foreach ($blocks as $prev_block_id => $new_block_id) {
    $block = Block::load($prev_block_id);
    if ($block instanceof BlockInterface) {
      $block->enable()->save();
    }
  }

  // Uninstall configs.
  $configs = [
    'field.field.paragraph.product_carousel_category.field_category_carousel_slug',
    'field.storage.paragraph.field_category_carousel_slug',
  ];
  foreach ($configs as $name) {
    Drupal::configFactory()->getEditable($name)->delete();
  }

  // Reinstate ACQ Product Category Terms.
  \Drupal::service('alshaya_rcs_main_menu.category_data_migration')->rollbackProductCategoryMigration();

  // Set Drupal index as index prefix.
  \Drupal::service('alshaya_search_algolia.index_helper')->setAlgoliaIndexPrefix('drupal');
}

/**
 * Helper to migrate data from term to text field.
 */
function alshaya_rcs_listing_migrate_field_carousel_slug() {
  $query = \Drupal::database()->select('paragraph__field_category_carousel', 'pfc');
  $query->addField('pfc', 'revision_id');
  $query->innerJoin('taxonomy_term_field_data', 'td', 'td.tid = pfc.field_category_carousel_target_id');
  $query->addField('pa', 'alias');
  $query->innerJoin('path_alias', 'pa', "pa.path=concat('/taxonomy/term/', td.tid) AND pa.langcode = td.langcode");
  $query->isNotNull('pa.alias');
  $query->distinct(TRUE);
  $result = $query->execute()->fetchAll();

  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');

  foreach ($result as $item) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $paragraph_storage->loadRevision($item->revision_id);

    // Remove prefix.
    $value = str_replace('shop-', '', $item->alias);

    // Remove slashes.
    $value = trim($value, '/');

    $paragraph->set('field_category_carousel_slug', $value)->save();
  }
}
