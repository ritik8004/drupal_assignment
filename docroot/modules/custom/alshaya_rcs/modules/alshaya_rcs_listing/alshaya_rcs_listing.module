<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_preprocess_page().
 */
function alshaya_rcs_listing_preprocess_page(&$variables) {
  // Initialising the variable to check the sidebar visibilty.
  // This will be disable by default.
  $variables['enable_lhn_tree'] = 0;

  $routematch = \Drupal::routeMatch();
  if ($routematch->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = $routematch->getParameter('taxonomy_term');
    if ($term->bundle() == 'rcs_category') {
      // Add description placeholder for mobile view.
      $variables['category_term_name'] = $term->getName();
      $variables['category_term_description'] = '#rcs.category.description#';
      $variables['#attached']['library'][] = 'alshaya_white_label/rcs-ph-term-description';
      $variables['#attached']['library'][] = 'alshaya_rcs_listing/rcs_listing_dynamic_yield';

      // Taking the sidebar visibility check from config for PLP.
      $variables['enable_lhn_tree'] = \Drupal::config('alshaya_acm_product_category.settings')->get('enable_lhn_tree');
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function alshaya_rcs_listing_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = \Drupal::request()->attributes->get('taxonomy_term');
    if ($term->bundle() == 'rcs_category') {
      $suggestions[] = 'page__plp';
    }
  }
}

/**
 * Implements hook_rcs_placeholders_graphql_query().
 */
function alshaya_rcs_listing_rcs_placeholders_graphql_query() {
  $query_fields = [];

  /** @var \Drupal\alshaya_rcs_listing\Services\AlshayaRcsListingHelper $rcs_listing_helper */
  $rcs_listing_helper = \Drupal::service('alshaya_rcs_listing.helper');
  $url_data = $rcs_listing_helper->getListingUrlKey();
  $url_key = [$url_data];
  if (stripos($url_data, '/view-all', 0) !== FALSE) {
    $original_path = substr($url_data, 0, strpos($url_data, '/view-all'));
    array_push($url_key, $original_path);
  }

  $query_fields['categories'] = [
    'query' => [
      'query($urlKey: [String])' => [
        'categories(filters: { url_path: { in: $urlKey }})' => [
          'total_count',
          'items' => [
            'id',
            'name',
            'level',
            'url_path',
            'description',
            'meta_title',
            'meta_keyword',
            'meta_description',
            'image',
            'promo_banner_for_mobile',
            'promotion_banner_mobile',
            'promotion_banner',
            'display_view_all',
            'children' => [
              'id',
              'name',
              'url_path',
              'category_quick_link_plp_mob',
            ],
            'breadcrumbs' => [
              'category_id',
              'category_name',
              'category_level',
              'category_url_key',
              'category_url_path',
            ],
          ],
        ],
      ],
    ],
    'variables' => [
      'urlKey' => $url_key,
    ],
  ];

  // Query to get the parents of a category.
  $query_fields['category_parents_by_path'] = [
    'query' => [
      'query($urlPath: String)' => [
        'categories(filters: {url_path: {eq: $urlPath}})' => [
          'items' => [
            'uid',
            'name',
            'breadcrumbs' => [
              'category_name',
              'category_level',
              'category_url_key',
              'category_url_path',
            ],
          ],
        ],
      ],
    ],
    'variables' => [
      'urlPath' => NULL,
    ],
  ];

  // Query to get the children of the given category.
  $query_fields['category_children_by_path'] = [
    'query' => [
      'query($urlPath: String)' => [
        'categories(filters: {url_path: {eq: $urlPath}})' => [
          'items' => [
            'children' => [
              'id',
              'name',
              'url_path',
            ],
          ],
        ],
      ],
    ],
    'variables' => [
      'urlPath' => NULL,
    ],
  ];

  return $query_fields;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function alshaya_rcs_listing_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'product_carousel_category'
    && isset($element['subform']['field_category_carousel'])
    && isset($element['subform']['field_category_carousel_slug'])) {
    // Hide the entity reference field when the text field is present on the
    // form.
    $element['subform']['field_category_carousel']['#access'] = FALSE;
  }
}

/**
 * Implements hook_rcs_placeholders_processor_path_alter().
 */
function alshaya_rcs_listing_rcs_placeholders_processor_path_alter(string &$path) {
  // Remove the facets params based of the /-- prefix.
  if (stripos($path, '/--', 0) !== FALSE) {
    $path = substr($path, 0, stripos($path, '/--'));
  }
}

/**
 * Implements hook_library_info_alter().
 */
function alshaya_rcs_listing_library_info_alter(&$libraries, $extension) {
  if ($extension === 'alshaya_algolia_react' && isset($libraries['product_category_carousel_rcs'])) {
    $libraries['product_category_carousel_rcs']['dependencies'][] = 'alshaya_rcs_listing/product_carousel_utility';
    $libraries['product_category_carousel_rcs']['dependencies'][] = 'rcs_magento_placeholders/rcs_magento_placeholders';
  }
}

/**
 * Implements hook_rcs_handlebars_templates().
 */
function alshaya_rcs_listing_rcs_handlebars_templates(EntityInterface $entity) {
  // Libraries to attach to all pages node/term.
  $libraries = [
    'carousel.accordion' => 'alshaya_rcs_listing',
    'promotional_banner' => 'alshaya_rcs_listing',
    'lhn_menu' => 'alshaya_rcs_listing',
    'plp_mobile_menu' => 'alshaya_rcs_listing',
  ];

  return $libraries;
}
