<?php

/**
 * @file
 * Contains install, update, uninstall hooks for alshaya_advanced_page module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;
use Drupal\Core\Database\Database;

/**
 * Implements hook_update_N().
 *
 * Set value of 'use as department page' field..
 */
function alshaya_advanced_page_update_8007() {
  $db = Database::getConnection();
  $results = $db->select('node__field_product_category')
    ->fields('node__field_product_category', ['entity_id'])
    ->execute()->fetchAll();
  foreach ($results as $result) {
    $node = Node::load($result->entity_id);
    $node->set('field_use_as_department_page', '1');
    $node->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * Migrating department pages to advanced department pages.
 */
function alshaya_advanced_page_update_8006() {
  // Load all product categories in department page & check if they exist.
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'department_page')
    ->execute();

  drush_print_r($nids);

  if (!empty($nids)) {
    $base_tables = [
      'node',
      'node_field_data',
    ];
    _alshaya_advanced_page_convert_base_tables('advanced_page', $nids, $base_tables);

    // Migrate all fields.
    $field_tables = [
      'node_revision__field_meta_tags',
      'node_revision__field_product_category',
      'node_revision__field_promo_blocks',
      'node_revision__field_show_left_menu',
      'node__field_meta_tags',
      'node__field_product_category',
      'node__field_promo_blocks',
      'node__field_show_left_menu',
    ];

    _alshaya_advanced_page_convert_field_tables('advanced_page', $nids, $field_tables);

    drush_print('Following nodes have been succesfully migrated as department pages.');
    drush_print_r($nids);
  }
}

/**
 * Implements hook_update_N().
 *
 * Merging department page with invalid categories to simple advanced page CT.
 */
function alshaya_advanced_page_update_8005() {
  // Load all product categories in department page & check if they exist.
  $nodes_exclude = [];
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'department_page')
    ->execute();
  $nodes = Node::loadMultiple($nids);
  foreach ($nodes as $department_page) {
    $category_id = $department_page->get('field_product_category')->getValue();
    $category_id = $category_id[0]['target_id'];
    $term = Term::load($category_id);
    if (!isset($term)) {
      $nodes_exclude[] = $department_page->id();
    }
  }

  if (!empty($nodes_exclude)) {
    $base_tables = [
      'node',
      'node_field_data',
    ];
    _alshaya_advanced_page_convert_base_tables('advanced_page', $nodes_exclude, $base_tables);

    $field_tables = [
      'node_revision__field_meta_tags',
      'node_revision__field_promo_blocks',
      'node__field_meta_tags',
      'node__field_promo_blocks',
    ];

    _alshaya_advanced_page_convert_field_tables('advanced_page', $nodes_exclude, $field_tables);
    _alshaya_advanced_page_delete_fields('node_revision__field_product_category', $nodes_exclude);
    _alshaya_advanced_page_delete_fields('node__field_product_category', $nodes_exclude);
    _alshaya_advanced_page_delete_fields('node_revision__field_show_left_menu', $nodes_exclude);
    _alshaya_advanced_page_delete_fields('node__field_show_left_menu', $nodes_exclude);
    drush_print('Following nodes have been migrated as simple advanced pages.');
    drush_print_r($nodes_exclude);
  }
}

/**
 * Implements hook_update_N().
 *
 * Merging department page CT into advanced page CT.
 */
function alshaya_advanced_page_update_8004() {
  $configs = [
    'field.storage.node.field_product_category',
    'field.storage.node.field_show_left_menu',
    'field.storage.node.field_use_as_department_page',
    'field.field.node.advanced_page.field_use_as_department_page',
    'field.field.node.advanced_page.field_show_left_menu',
    'field.field.node.advanced_page.field_product_category',
    'core.entity_form_display.node.advanced_page.default',
    'field.field.node.advanced_page.field_promo_blocks',
  ];
  alshaya_config_install_configs($configs, 'alshaya_advanced_page', 'install');

  // Uninstall alshaya_department_page.
  \Drupal::service('module_installer')->uninstall(['alshaya_department_page']);
}

/**
 * Implements hook_update_N().
 */
function alshaya_advanced_page_update_8003() {
  alshaya_config_install_configs(['field.field.node.advanced_page.field_promo_blocks'], 'alshaya_advanced_page');
}

/**
 * Implements hook_update_N().
 *
 * Enabling translation on paragraph referenced fields.
 */
function alshaya_advanced_page_update_8002() {
  $fields = [
    'field.field.node.advanced_page.field_banner',
    'field.field.node.advanced_page.field_delivery_banner',
    'field.field.node.advanced_page.field_promo_banner_full_width',
    'field.field.node.advanced_page.field_promo_blocks',
    'field.field.node.advanced_page.field_related_info',
    'field.field.node.advanced_page.field_slider',
  ];

  foreach ($fields as $field) {
    $info = explode('.', $field);
    $field_config = FieldConfig::loadByName($info[2], $info[3], $info[4]);

    if ($field_config) {
      alshaya_config_install_configs([$field], 'alshaya_advanced_page');
    }
  }

  // Load all advanced page content.
  $pages = \Drupal::entityTypeManager()
    ->getListBuilder('node')
    ->getStorage()
    ->loadByProperties([
      'type' => 'advanced_page',
    ]);

  // Save all content again with proper data.
  /** @var \Drupal\node\Entity\Node $page */
  foreach ($pages as $page) {
    // Check if we have AR translation available for the content.
    // Data correction is required only for AR.
    if (!$page->hasTranslation('ar')) {
      continue;
    }

    // Load the ar translation.
    /** @var \Drupal\node\Entity\Node $node */
    $node = $page->getTranslation('ar');

    // Loop through all the paragraph fields which require data correction.
    foreach ($fields as $field) {
      $info = explode('.', $field);
      $field = $info[4];

      // Get existing value from EN / default translation.
      $value = $page->get($field)->getValue();

      // If there is value, prepare translated value and add to the translated
      // content.
      if ($value) {
        $node->get($field)->setValue(_alshaya_advanced_page_prepare_migrated_data($value));
      }
    }

    $node->save();
  }
}

/**
 * Implements hook_update_N().
 */
function alshaya_advanced_page_update_8001() {
  alshaya_config_install_configs(['field.field.node.advanced_page.field_promo_blocks'], 'alshaya_advanced_page');
}

/**
 * Helper function to prepare migrated value after enable translation.
 *
 * This function loops through all the existing paragraph entities and creates
 * duplicate of their arabic translations (or default if arabic not available)
 * and returns them back to add them to arabic content (parent node).
 *
 * @param mixed $values
 *   Current values array.
 *
 * @return array
 *   Migrated values array.
 */
function _alshaya_advanced_page_prepare_migrated_data($values) {
  $new_values = [];

  // Loop through all existing values.
  foreach ($values as $paragraph_value) {
    // Load the paragraph from the target_id in value.
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = Paragraph::load($paragraph_value['target_id']);

    // Check if we have arabic translation available, we use translation then.
    if ($paragraph->hasTranslation('ar')) {
      $paragraph = $paragraph->getTranslation('ar');
    }

    // Duplicate the entity to have new entity id for saving in translation of
    // parent/host entity.
    $new_paragraph = $paragraph->createDuplicate();

    // Save it to get id and revision id.
    $new_paragraph->save();

    // Add to new values array.
    $new_values[] = [
      'target_id' => $new_paragraph->id(),
      'target_revision_id' => $new_paragraph->getRevisionId(),
    ];
  }

  return $new_values;
}
