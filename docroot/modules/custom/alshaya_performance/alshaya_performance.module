<?php

/**
 * @file
 * Module file.
 */

use Drupal\alshaya_performance\Logger\AlshayaPerformanceSysLog;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_performance_node_presave(EntityInterface $entity) {
  // Allows for clearing of blocks based on node type.
  // Used for mega menu block.
  $tags = ['node_type:' . $entity->getType()];
  Cache::invalidateTags($tags);
}

/**
 * Helper function to set log mode from settings.
 */
function alshaya_performance_reset_log_mode() {
  $mode = Settings::get('alshaya_performance_log_mode');

  // By default set it to production mode.
  if (empty($mode)) {
    $mode = AlshayaPerformanceSysLog::ALSHAYA_PERFORMANCE_PRODUCTION_MODE;
  }

  $config = \Drupal::configFactory()->getEditable('alshaya_performance.settings');
  $config->set('mode', $mode);
  $config->save();
}

/**
 * Implements hook_logs_http_event_alter().
 */
function alshaya_performance_logs_http_event_alter(&$event) {
  $allowed_uris = \Drupal::config('alshaya_performance.settings')->get('loggly_allowed_routes');

  // If allowed uris is empty, we want to send it for all the pages.
  if (empty($allowed_uris)) {
    return;
  }

  // By default, don't send the event.
  $event['send'] = FALSE;

  // Send the event only for allowed uris.
  /** @var \Drupal\Core\Path\PathMatcherInterface $path_matcher */
  $path_matcher = \Drupal::service('path.matcher');
  $current_path = \Drupal::service('path.current');
  $request = \Drupal::request();
  $uri = rtrim($current_path->getPath($request), '/');
  if ($path_matcher->matchPath($uri, $allowed_uris)) {
    $event['send'] = TRUE;
  }
}
