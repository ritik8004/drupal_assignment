<?php

/**
 * @file
 * Alshaya JS Optimisations Module file.
 */

use Drupal\alshaya_js_optimisations\AlshayaJsOptimisationHelper;

/**
 * Implements hook_library_info_alter().
 */
function alshaya_js_optimisations_library_info_alter(&$libraries, $extension) {
  $jsService = \Drupal::service('alshaya_js_optimisations.helper');

  // Fetch settings once instead of calling on every info_alter per page request.
  if (!isset(AlshayaJsOptimisationHelper::$criticalJsEnabled)) {
    $jsService->fetchCriticalJsSettings();
  }

  // Preconditions.
  if (!AlshayaJsOptimisationHelper::$criticalJsEnabled || empty(AlshayaJsOptimisationHelper::$resolvedLibraries)) {
    return;
  }

  $performance = \Drupal::config('system.performance');
  AlshayaJsOptimisationHelper::$isJsAggregation = $performance->get('js.preprocess');
  if (!AlshayaJsOptimisationHelper::$isJsAggregation) {
    return;
  }

  $processed_libraries = AlshayaJsOptimisationHelper::$resolvedLibraries;

  foreach ($libraries as $library => $library_item) {
    if (empty($library_item['js'])) {
      continue;
    }

    // Enforce JS load on footer.
    $library_item['header'] = FALSE;

    foreach ($library_item['js'] as $path => $library_config) {
      $attributes = !empty($library_config['attributes']) ? $library_config['attributes'] : [];

      // Add script categories attributes and weights.
      if (
        !empty($processed_libraries[$extension]) &&
        !empty($processed_libraries[$extension][$library]) &&
        !empty($processed_libraries[$extension][$library]['attributes']) &&
        !empty($processed_libraries[$extension][$library]['attributes']['data-group']) &&
        !empty($processed_libraries[$extension][$library]['weight'])
      ) {
        $attributes = array_merge(
          $attributes,
          $processed_libraries[$extension][$library]['attributes']
        );
        $library_config['weight'] = $processed_libraries[$extension][$library]['weight'];
      }

      // Add 'defer' on all non critical libraries.
      if (empty($attributes['data-group'])) {
        $attributes['defer'] = TRUE;
      }

      $library_config['attributes'] = $attributes;
      $library_item['js'][$path] = $library_config;
    }

    $libraries[$library] = $library_item;
  }
}

/**
 * Implements hook_js_alter().
 */
function alshaya_js_optimisations_js_alter(&$javascripts) {
  $status_critical_js = !AlshayaJsOptimisationHelper::$isJsAggregation || !AlshayaJsOptimisationHelper::$criticalJsEnabled;
  $status_uglification = \Drupal::config('alshaya_js_optimisations.settings')->get('enable_uglification');
  $mapping = [];

  if ($status_uglification) {
    $mapping = file_get_contents('build/js-performance-build.json');

    if (!empty($mapping)) {
      $mapping = json_decode($mapping, TRUE);
    }
    else {
      $status_uglification = FALSE;
    }
  }

  if (!$status_critical_js && !$status_uglification) {
    // Critical JS and Uglification disabled.
    return;
  }

  foreach ($javascripts as $key => $value) {
    if ($value['type'] !== 'file') {
      // Processing not required for external scripts.
      continue;
    }

    // Enforce load on footer and aggregation on all local scripts.
    if ($status_critical_js) {
      $value['preprocess'] = TRUE;
      $value['scope'] = 'footer';
    }

    // Replace the uglified JS if available in the mapping.
    if ($status_uglification && in_array($key, $mapping['source'])) {
      $value['data'] = 'build/' . $value['data'];
    }

    $javascripts[$key] = $value;
  }
}
