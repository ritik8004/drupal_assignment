<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_mc_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku = $skuManager->getSkuForNode($entity);
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU && $view_mode == 'full') {
      $return = _alshaya_mc_get_product_description($sku_entity);

      // If short description not available, check other consecutive fields.
      if (empty($return['short_desc']['value']['#markup'])) {
        foreach ($return['description'] as $short_description) {
          // If value is available in next field, then
          // use it and no need to process further.
          if (!empty($short_description['value']['#markup'])) {
            $return['short_desc'] = $short_description;
            break;
          }
        }
      }

      // Trim the short description.
      /** @var \Drupal\alshaya_acm_product\ProductHelper $product_helper*/
      $product_helper = \Drupal::service('alshaya_acm_product.helper');
      $short_desc = $product_helper->createShortDescription($return['short_desc']['value']['#markup']);
      // If there is 'readmore' available only then process.
      if (!empty($short_desc['read_more'])) {
        $short_desc['html'] = $product_helper->processShortDescEllipsis($short_desc['html']);
      }
      $return['short_desc']['value']['#markup'] = $short_desc['html'];
      $build['short_desc'] = $return['short_desc'];
      $build['description'] = $return['description'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_mc_acq_sku_view(array &$build, EntityInterface $sku_entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    $return = _alshaya_mc_get_product_description($sku_entity);
    $build['short_desc'] = $return['short_desc'];
    $build['description'] = $return['description'];
  }
}

/**
 * Get product description from SKU.
 */
function _alshaya_mc_get_product_description($sku_entity) {
  $return = [];
  // Prepare $at_glance variable.
  $at_glance = [];
  $at_glance['label'] = [
    '#markup' => t('At a glance'),
  ];
  $at_glance['value'] = [
    '#markup' => $sku_entity->get('attr_at_glance')->getString(),
  ];

  // Prepare $description variable.
  $description = [];
  $description['label'] = [
    '#markup' => t('Features and benefits'),
  ];
  $description_value = '';

  if ($body = $sku_entity->get('attr_description')->getValue()) {
    $description_value = $body[0]['value'];
  }

  if ($bullet_points = $sku_entity->get('attr_bullet_points')
    ->getString()) {
    $description_value .= '<div class="bullet-points-wrapper">';
    $description_value .= $bullet_points;
    $description_value .= '</div>';
  }

  $description['value'] = [
    '#markup' => $description_value,
  ];

  // If specifications are enabled, prepare the specification variable.
  $specifications = [];
  if (\Drupal::config('alshaya_acm.settings')
    ->get('pdp_show_specifications')) {
    $specifications['label'] = [
      '#markup' => t('Specifications'),
    ];

    $specifications['value'] = [
      "#theme" => 'item_list',
      '#items' => [],
    ];

    if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
      $specifications['value']['#items'][] = t('Style Code: @value', [
        '@value' => $attr_style_code,
      ]);
    }

    if ($attr_color = $sku_entity->get('attr_color')->getString()) {
      $specifications['value']['#items'][] = t('Color: @value', [
        '@value' => $attr_color,
      ]);
    }

    if ($attr_season = $sku_entity->get('attr_season')->getString()) {
      $specifications['value']['#items'][] = t('Season: @value', [
        '@value' => $attr_season,
      ]);
    }

    if ($attr_brand = $sku_entity->get('attr_product_brand')
      ->getString()) {
      $specifications['value']['#items'][] = t('Product brand: @value', [
        '@value' => $attr_brand,
      ]);
    }
  }

  // Prepare $whats_in_box variable.
  $whats_in_box = [];
  $whats_in_box['label'] = [
    '#markup' => t("What's In The Box"),
  ];

  $whats_in_box['value'] = [
    '#markup' => $sku_entity->get('attr_whats_in_the_box')->getString(),
  ];

  // Add all variables to $build in the sequence in
  // which they should be displayed.
  // Check comments in MMCPA-218 for sequence requirements.
  // $build['short_desc'] contains the description that should be
  // displayed before 'Read More'.
  $return['short_desc'] = $at_glance;
  $return['description'][] = $at_glance;
  $return['description'][] = $description;
  if (!empty($specifications)) {
    $return['description'][] = $specifications;
  }
  $return['description'][] = $whats_in_box;

  return $return;
}

/**
 * Implements hook_alshaya_performance_preload_alter().
 */
function alshaya_mc_alshaya_performance_preload_alter(array &$preload) {
  // Mothercare's styles and fonts come from whitelabel.
  $alshaya_preload = [
    'as' => 'font',
    'href' => '/themes/custom/transac/alshaya_white_label/fonts/alshaya-icons.woff2?D7b5if',
    'crossorigin' => 'crossorigin',
    'type' => 'font/woff2',
  ];
  $site_preloads = [
    'en' => [
      [
        'as' => 'font',
        'href' => '/themes/custom/transac/alshaya_white_label/fonts/alshaya-thin.woff2',
        'crossorigin' => 'crossorigin',
        'type' => 'font/woff2',
      ],
      $alshaya_preload,
    ],
    'ar' => [
      [
        'as' => 'font',
        'href' => '/themes/custom/transac/alshaya_white_label/fonts/alshaya-arabic-thin.woff2',
        'crossorigin' => 'crossorigin',
        'type' => 'font/woff2',
      ],
      $alshaya_preload,
    ],
  ];
  // Preloading fonts here.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (isset($site_preloads[$language])) {
    $preload = array_merge($site_preloads[$language], $preload);
  }
}
