<?php

/**
 * @file
 * Alshaya vs transac module file.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\block\Entity\Block;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_vs_transac_module_implements_alter(&$implementations, $hook) {
  // We want to alter only for sku_base_form_alter which is not available on
  // all pages. Trying to alter for that hook directly seems not working as
  // expected so added isset check.
  if ($hook == 'form_alter' && isset($implementations['alshaya_vs_transac'])) {
    $group = $implementations['alshaya_vs_transac'];
    unset($implementations['alshaya_vs_transac']);
    $implementations = ['alshaya_vs_transac' => $group] + $implementations;
  }
}

/**
 * Implements hook_alshaya_stores_finder_store_update_alter().
 */
function alshaya_vs_transac_alshaya_stores_finder_store_update_alter(&$node, array $store) {
  if (isset($store['included_in_store'])) {
    $node->get('field_brand')->setValue(trim($store['included_in_store']));
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_vs_transac_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  // Load SKU entity.
  $sku_entity = SKU::load($form['sku_id']['#value']);

  if (!($sku_entity instanceof SKUInterface)) {
    return;
  }

  if (isset($form['ajax'], $form['ajax']['configurables'], $form['ajax']['configurables']['fragrance'])) {
    // For condition check, we need the English value.
    if ($sku_entity->hasTranslation('en')) {
      $sku_entity = $sku_entity->getTranslation('en');
    }

    // Try to get value for product_category. We need to set fragrance field's
    // label based on that.
    $product_category = $sku_entity->get('attr_product_category')->getString();
    if (strtolower($product_category) == 'lip-color') {
      $form['ajax']['configurables']['fragrance']['#title'] = t('Color');
    }
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function alshaya_vs_transac_preprocess_views_view_fields__stores_finder(&$variables) {
  $view = $variables['view'];
  if (!in_array($view->current_display, ['attachment_1', 'page_3', 'page_2', 'page_1'])) {
    return;
  }
  // Change the position of the field brand, to display it after store address.
  if (isset($variables['fields']['field_brand'])) {
    $fields = $variables['fields'];
    unset($fields['field_brand']);
    $new_fields = [];
    foreach ($fields as $field => $field_object) {
      $new_fields[$field] = $field_object;
      if ($field == 'field_store_address') {
        $new_fields['field_brand'] = $variables['fields']['field_brand'];
      }
    }
    $variables['fields'] = $new_fields;
  }
}

/**
 * Implements hook_acq_sku_base_field_additions_alter().
 */
function alshaya_vs_transac_acq_sku_base_field_additions_alter(array &$fields = []) {
  $transac_fields = \Drupal::config('alshaya_vs_transac.sku_base_fields')->get('fields');
  $fields = array_merge($fields, $transac_fields);
}

/**
 * Implements hook_ENTITY_TYPE_load() for node entities.
 */
function alshaya_vs_transac_node_load($nodes) {
  /** @var \Drupal\node\NodeInterface $node */
  foreach ($nodes as $node) {
    if ($node->bundle() === 'acq_product') {
      $sku = SKU::loadFromSku($node->get('field_skus')->first()->getString());

      if ($sku instanceof SKU) {
        // This is done for all Meta title, Page title.
        $node->setTitle(_alshaya_vs_transac_get_title($sku, 'meta'));
      }
    }
  }
}

/**
 * Implements hook_alshaya_acm_product_build_alter().
 */
function alshaya_vs_transac_alshaya_acm_product_build_alter(&$build, SKUInterface $sku, $context = 'pdp') {
  $title = _alshaya_vs_transac_get_title($sku, $context);

  if ($context == 'search') {
    $build['#product_label'] = [
      '#markup' => $title,
    ];

    $settings = \Drupal::config('alshaya_acm_product.display_settings');

    $swatches_display_status = $settings->get('color_swatches');
    if ($swatches_display_status) {
      /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
      $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

      $swatches = $sku_manager->getSwatches($sku);
      if ($swatches) {
        $swatch_plp_limit = $settings->get('swatch_plp_limit');
        $build['#swatches'] = array_slice($swatches, 0, $swatch_plp_limit, TRUE);
        $build['#swatch_more_text'] = count($swatches) > $swatch_plp_limit
          ? t('+ @swatch_count more', ['@swatch_count' => count($swatches) - $swatch_plp_limit])
          : FALSE;
      }
    }
  }
  else {
    $build['title'] = [
      '#markup' => $title,
    ];
  }
}

/**
 * Get the concatenated title based on context.
 *
 * @param \Drupal\acq_commerce\SKUInterface $sku
 *   SKU Entity.
 * @param string $context
 *   Context to get the title for.
 *
 * @return string
 *   Title.
 */
function _alshaya_vs_transac_get_title(SKUInterface $sku, $context = 'pdp') {
  $new = $sku->get('attr_sku_definition')->getString();
  $collection = $sku->get('attr_product_collection')->getString();
  $short_description = $sku->label();

  if ($context === 'pdp' || $context === 'modal') {
    $title = '<span class="title--sub">' . $collection . '</span>';
    $title .= '<span class="title--main">' . $new . ' ' . $short_description . '</span>';
  }
  else {
    $title = implode(' ', [$new, $collection, $short_description]);
  }

  return $title;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_vs_transac_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    $sku = $entity->get('field_skus')->first()->getString();
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU && $view_mode == 'full') {
      $description_value = '';
      $short_desc = [];

      if ($body = $entity->get('body')->getValue()) {
        $description_value = $body[0]['value'];
        $short_desc['label'] = [
          '#markup' => t('Short Description'),
        ];

        $short_desc_len = \Drupal::config('alshaya_acm_product.display_settings')->get('short_desc_characters');
        $short_desc_html = text_summary($description_value, NULL, $short_desc_len);
        // Remove empty paragraphs from short description.
        $short_desc_html = preg_replace("/<p[^>]*>[\s|&nbsp;]*<\/p>/", '', $short_desc_html);
        // Remove br at the end of short desc.
        $short_desc_html = preg_replace('#(( ){0,}<br( {0,})(/{0,1})>){1,}$#i', '', $short_desc_html);
        $short_desc['value'] = [
          '#markup' => $short_desc_html . '...',
        ];

        // If short description is the same as description,
        // do not show 'Read More' button.
        if (strlen($description_value) <= $short_desc_len) {
          $build['read_more_style']['value'] = [
            '#markup' => 'display:none;',
          ];
        }
      }
      else {
        $build['read_more_style']['value'] = [
          '#markup' => 'display:none;',
        ];
      }

      $description['value'] = [
        '#markup' => $description_value,
      ];

      // Add all variables to $build in the sequence in
      // which they should be displayed.
      // $build['short_desc'] contains the description that should be
      // displayed before 'Read More'.
      $build['short_desc'] = $short_desc;
      $build['description'][] = $description;
    }
  }
}

/**
 * Implements hook_alshaya_main_menu_links_alter().
 */
function alshaya_vs_transac_alshaya_main_menu_links_alter(array &$term_tree, $parent_id, array $context) {
  $promo_panel_blocks = alshaya_promo_panel_blocks_get_plugin_ids();

  foreach (array_keys($promo_panel_blocks) as $block_plugin_id) {
    $blocks = \Drupal::entityTypeManager()->getStorage('block')->loadByProperties(['plugin' => $block_plugin_id]);
    $block = reset($blocks);

    if ($block instanceof Block && $block->access('view')) {
      $item = [
        'label' => $block->label(),
        'path' => Url::fromUserInput($promo_panel_blocks[$block_plugin_id])->toString(),
        'class' => 'promo-panel--mobile-link',
        'clickable' => TRUE,
      ];
      array_unshift($term_tree, $item);
    }
  }
}

/**
 * Implements hook_alshaya_stores_finder_marker_label_position_alter().
 */
function alshaya_vs_transac_alshaya_stores_finder_marker_label_position_alter(array &$label_position) {
  $label_position['y'] = 17;
  $label_position['single_y'] = 17;
}
