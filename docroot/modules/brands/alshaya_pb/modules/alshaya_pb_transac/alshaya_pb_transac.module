<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_pb_transac_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    $sku = $entity->get('field_skus')->first()->getString();
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU && $view_mode == 'full') {
      // Prepare the at_glance variable.
      $at_glance['label'] = [
        '#markup' => t('At a glance'),
      ];
      $at_glance['value'] = [
        '#markup' => $sku_entity->get('attr_at_glance')->getString(),
      ];

      // Prepare the description variable.
      $description_value = '';
      $description['label'] = [
        '#markup' => t('Features and benefits'),
      ];

      if ($body = $entity->get('body')->getValue()) {
        $description_value = $body[0]['value'];
      }

      if ($bullet_points = $sku_entity->get('attr_bullet_points')
        ->getString()) {
        $description_value .= '<div class="bullet-points-wrapper">';
        $description_value .= $bullet_points;
        $description_value .= '</div>';
      }

      $description['value'] = [
        '#markup' => $description_value,
      ];

      // If specifications are enabled, prepare the specification variable.
      if (\Drupal::config('alshaya_acm.settings')
        ->get('pdp_show_specifications')) {
        $specifications['label'] = [
          '#markup' => t('Specifications'),
        ];

        $specifications['value'] = [
          "#theme" => 'item_list',
          '#items' => [],
        ];

        if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
          $specifications['value']['#items'][] = t('Style Code: @value', [
            '@value' => $attr_style_code,
          ]);
        }

        if ($attr_color = $sku_entity->get('attr_color')->getString()) {
          $specifications['value']['#items'][] = t('Color: @value', [
            '@value' => $attr_color,
          ]);
        }

        if ($attr_season = $sku_entity->get('attr_season')->getString()) {
          $specifications['value']['#items'][] = t('Season: @value', [
            '@value' => $attr_season,
          ]);
        }

        if ($attr_brand = $sku_entity->get('attr_product_brand')
          ->getString()) {
          $specifications['value']['#items'][] = t('Product brand: @value', [
            '@value' => $attr_brand,
          ]);
        }
      }

      // Add all variables to $build in the sequence in
      // which they should be displayed.
      // $build['short_desc'] contains the description that should be
      // displayed before 'Read More'.
      $build['short_desc'] = $at_glance;
      $build['description'][] = $at_glance;
      $build['description'][] = $description;
      if (!empty($specifications)) {
        $build['description'][] = $specifications;
      }
    }
  }
}

/**
 * Implements template_preprocess_alshaya_cart_product_name().
 */
function alshaya_pb_transac_preprocess_alshaya_cart_product_name(&$variables) {
  if (empty($variables['item_code'])) {
    return;
  }

  $sku = SKU::loadFromSku($variables['item_code']);

  if (!($sku instanceof SKU)) {
    return;
  }

  $variables['name'] = _alshaya_pb_transac_get_sku_title($sku);
}

/**
 * Wrapper function to get product title as per PB logic.
 *
 * @param \Drupal\acq_sku\Entity\SKU $sku
 *   SKU entity.
 *
 * @return string
 *   Product Title.
 */
function _alshaya_pb_transac_get_sku_title(SKU $sku) {
  // @TODO: Update to use combination of attributes when we have info.
  return $sku->label() . ' - ' . $sku->getSku();
}

/**
 * Implements hook_alshaya_acm_product_add_to_cart_ajax_response_alter().
 */
function alshaya_acm_pb_alshaya_acm_product_add_to_cart_ajax_response_alter(AjaxResponse $response, SKU $sku, SKUInterface $selected_sku = NULL) {
  if ($sku->bundle() != 'configurable') {
    return;
  }

  // Update title of parent product based on selected sku if available.
  if ($selected_sku instanceof SKUInterface) {
    // For modal and teaser it will be h2, for main product h1.
    $selector = 'article[data-sku="' . $sku->getSku() . '"]:visible .content__title_wrapper h1,';
    $selector .= 'article[data-sku="' . $sku->getSku() . '"]:visible .content__title_wrapper h2';
    $response->addCommand(new HtmlCommand($selector, _alshaya_pb_transac_get_sku_title($selected_sku)));
  }
}

/**
 * Implements hook_alshaya_acm_customer_build_order_detail_alter().
 */
function hook_alshaya_acm_customer_build_order_detail_alter(array &$build, array $order) {
  foreach ($build['#products'] as &$product) {
    $sku = SKU::loadFromSku($product['sku']);

    if (!($sku instanceof SKUInterface)) {
      continue;
    }

    $product['name'] = _alshaya_pb_transac_get_sku_title($sku);
  }
}
