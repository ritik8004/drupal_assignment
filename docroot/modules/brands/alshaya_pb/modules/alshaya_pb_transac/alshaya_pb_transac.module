<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_pb_transac_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    $sku = $entity->get('field_skus')->first()->getString();
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU && $view_mode == 'full') {
      /** @var \Drupal\alshaya_acm_product\ProductHelper $productHelper */
      $productHelper = \Drupal::service('alshaya_acm_product.helper');

      $description = [];

      if ($body = $entity->get('body')->getValue()) {
        $description['value'] = [
          '#markup' => $body[0]['value'],
        ];

        $build['description'][] = $description;

        $productHelper->updateShortDescription($build, $body[0]['value']);
      }

      if ($product_info = $sku_entity->get('attr_short_description')->getValue()) {
        $build['dimensions_and_care'] = [
          '#theme' => 'pdp_description_accordion',
          '#title' => t('Dimensions and Care'),
          '#text' => [
            '#markup' => $product_info[0]['value'],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_pb_transac_acq_sku_view(array &$build, EntityInterface $sku_entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    $return = _alshaya_pb_transac_get_product_description($sku_entity);
    $build['short_desc'] = $return['short_desc'];
    $build['description'] = $return['description'];
  }
}

/**
 * Get product description from SKU.
 */
function _alshaya_pb_transac_get_product_description($sku_entity) {
  $return = [];
  // Prepare the at_glance variable.
  $at_glance['label'] = [
    '#markup' => t('At a glance'),
  ];
  $at_glance['value'] = [
    '#markup' => $sku_entity->get('attr_at_glance')->getString(),
  ];

  // Prepare the description variable.
  $description_value = '';
  $description['label'] = [
    '#markup' => t('Features and benefits'),
  ];

  if ($body = $sku_entity->get('attr_description')->getValue()) {
    $description_value = $body[0]['value'];
  }

  if ($bullet_points = $sku_entity->get('attr_bullet_points')
    ->getString()) {
    $description_value .= '<div class="bullet-points-wrapper">';
    $description_value .= $bullet_points;
    $description_value .= '</div>';
  }

  $description['value'] = [
    '#markup' => $description_value,
  ];

  // If specifications are enabled, prepare the specification variable.
  if (\Drupal::config('alshaya_acm.settings')
    ->get('pdp_show_specifications')) {
    $specifications['label'] = [
      '#markup' => t('Specifications'),
    ];

    $specifications['value'] = [
      "#theme" => 'item_list',
      '#items' => [],
    ];

    if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
      $specifications['value']['#items'][] = t('Style Code: @value', [
        '@value' => $attr_style_code,
      ]);
    }

    if ($attr_color = $sku_entity->get('attr_color')->getString()) {
      $specifications['value']['#items'][] = t('Color: @value', [
        '@value' => $attr_color,
      ]);
    }

    if ($attr_season = $sku_entity->get('attr_season')->getString()) {
      $specifications['value']['#items'][] = t('Season: @value', [
        '@value' => $attr_season,
      ]);
    }

    if ($attr_brand = $sku_entity->get('attr_product_brand')
      ->getString()) {
      $specifications['value']['#items'][] = t('Product brand: @value', [
        '@value' => $attr_brand,
      ]);
    }
  }

  // Add all variables to $build in the sequence in
  // which they should be displayed.
  // $build['short_desc'] contains the description that should be
  // displayed before 'Read More'.
  $return['short_desc'] = $at_glance;
  $return['description'][] = $at_glance;
  $return['description'][] = $description;
  if (!empty($specifications)) {
    $return['description'][] = $specifications;
  }

  return $return;
}

/**
 * Implements template_preprocess_alshaya_cart_product_name().
 */
function alshaya_pb_transac_preprocess_alshaya_cart_product_name(&$variables) {
  if (empty($variables['item_code'])) {
    return;
  }

  $sku = SKU::loadFromSku($variables['item_code']);

  if (!($sku instanceof SKU)) {
    return;
  }

  /** @var \Drupal\acq_sku\ProductInfoHelper $productInfoHelper */
  $productInfoHelper = \Drupal::service('acq_sku.product_info_helper');
  $title = $productInfoHelper->getTitle($sku, 'basket');
  // Use title of child product in cart only for PB.
  if ($title) {
    isset($variables['name']['#title']) ? $variables['name']['#title'] = $title : $variables['name'] = $title;
  }
}

/**
 * Implements hook_alshaya_acm_product_add_to_cart_ajax_response_alter().
 */
function alshaya_pb_transac_alshaya_acm_product_add_to_cart_ajax_response_alter(AjaxResponse $response, SKU $sku, SKUInterface $selected_sku = NULL) {
  if ($sku->bundle() != 'configurable') {
    return;
  }

  // Update title of parent product based on selected sku if available.
  if ($selected_sku instanceof SKUInterface) {
    /** @var \Drupal\acq_sku\ProductInfoHelper $productInfoHelper */
    $productInfoHelper = \Drupal::service('acq_sku.product_info_helper');
    $title = $productInfoHelper->getTitle($selected_sku, 'pdp');

    if ($title) {
      // For modal and teaser it will be h2, for main product h1.
      $selector = 'article[data-sku="' . $sku->getSku() . '"]:visible .content__title_wrapper h1,';
      $selector .= 'article[data-sku="' . $sku->getSku() . '"]:visible .content__title_wrapper h2';
      $response->addCommand(new HtmlCommand($selector, $title));
    }
  }
}

/**
 * Implements hook_alshaya_acm_customer_build_order_detail_alter().
 */
function hook_alshaya_acm_customer_build_order_detail_alter(array &$build, array $order) {
  foreach ($build['#products'] as &$product) {
    $sku = SKU::loadFromSku($product['sku']);

    if (!($sku instanceof SKUInterface)) {
      continue;
    }

    /** @var \Drupal\acq_sku\ProductInfoHelper $productInfoHelper */
    $productInfoHelper = \Drupal::service('acq_sku.product_info_helper');
    $title = $productInfoHelper->getTitle($sku, 'basket');
    if ($title) {
      $product['name'] = $title;
    }
  }
}

/**
 * Implements hook_alshaya_acm_product_build_alter().
 */
function alshaya_pb_transac_alshaya_acm_product_build_alter(&$build, SKUInterface $sku, $context = 'pdp') {
  if ($context == 'search') {
    // Display swatches on PLP/Search/Promo. We use sku gallery formatter for
    // all these cases and context received here is 'search' for that.
    $settings = \Drupal::config('alshaya_acm_product.display_settings');

    $swatches_display_status = $settings->get('color_swatches');

    // Display swatches only if enabled in configuration.
    if ($swatches_display_status) {
      /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
      $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

      // Get swatches for this product from media.
      $swatches = $sku_manager->getSwatches($sku);
      if ($swatches) {
        // Show only first 'X' swatches as defined in configuration.
        $swatch_plp_limit = $settings->get('swatch_plp_limit');
        $build['#swatches'] = array_slice($swatches, 0, $swatch_plp_limit, TRUE);
        $build['#swatch_more_text'] = count($swatches) > $swatch_plp_limit
          ? t('+ @swatch_count more', ['@swatch_count' => count($swatches) - $swatch_plp_limit])
          : FALSE;
      }
    }
  }
}
