<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_hm_images\SkuAssetManager;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_acq_sku_import_alter().
 */
function alshaya_hm_images_acq_sku_product_sku_alter(&$sku, $product) {
  // Process assets data & create attributes which are needed for sorting
  // the assets while displaying them.
  $sku->attr_assets = _alshaya_hm_images_acq_sku_process_assets($product);
}

/**
 * Helper function to process asset attributes & calculate sorting params.
 *
 * @param array $product
 *   Product array containing assets to be processed.
 *
 * @return string
 *   Serialized & processed assets.
 */
function _alshaya_hm_images_acq_sku_process_assets(array $product) {
  $assets = [];
  if (isset($product['extension'], $product['extension']['assets'])) {
    $assets = $product['extension']['assets'];

    foreach ($assets as $key => $asset) {
      if (empty($asset['Data']['AssetType']) && ($asset['is_old_format'] && empty($asset['Type']))) {
        continue;
      }

      $asset_type_parts = (!empty($asset['Data']['AssetType'])) ? explode('/', $asset['Data']['AssetType']) : [];
      $assets[$key]['sortAssetType'] = !empty($asset['is_old_format']) ? $asset['Type'] : end($asset_type_parts);
      $face_type = SkuAssetManager::LP_DEFAULT_ANGLE;

      if (!empty($asset['Data']['Angle']['Facing']) && !empty($asset['Data']['Angle']['Identifier'])) {
        $face_type = $asset['Data']['Angle']['Facing'] . $asset['Data']['Angle']['Identifier'];
      }
      $assets[$key]['sortFacingType'] = $face_type;
    }
  }

  return serialize($assets);
}

/**
 * Implements hook_theme().
 */
function alshaya_hm_images_theme($existing, $type, $theme, $path) {
  return [
    'alshaya_assets_gallery' => [
      'variables' => [
        'mainImage' => '',
        'hoverImage' => '',
        'label' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function alshaya_hm_images_theme_registry_alter(&$theme_registry) {
  $theme_registry['sku_teaser']['variables']['swatches'] = NULL;
  $theme_registry['sku_teaser']['variables']['swatch_more_text'] = NULL;
}

/**
 * Implements hook_acq_sku_gallery_view_alter().
 */
function alshaya_hm_images_acq_sku_gallery_view_alter(&$elements, $skus) {
  $swatch_plp_limit = \Drupal::config('alshaya_hm_images.settings')->get('swatch_plp_limit');

  foreach ($elements as $delta => $element) {
    // Check if the gallery has a main image. If not, look for assets.
    if (empty($element['#gallery']['#mainImage'])) {
      $sku = $skus[$delta];
      // Get the assets.
      $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
      $main_image_assets = $sku_assets_manager->getSkuAssets($sku, 'plp', ['plp']);
      $hover_image_assets = $sku_assets_manager->getSkuAssets($sku, 'plp_hover', ['plp']);

      // If no assets attached & the sku is configurable, try to use the
      // assets attached with first child sku attached.
      if ((!$main_image_assets) &&
        (!$hover_image_assets) &&
        ($sku->bundle() === 'configurable')) {
        $main_image_assets = $sku_assets_manager->getChildSkuAssets($sku, 'plp', ['plp']);
        $hover_image_assets = $sku_assets_manager->getChildSkuAssets($sku, 'plp_hover', ['plp']);
      }

      $plp_main_image = !empty($main_image_assets) ? $main_image_assets[0] : NULL;
      $plp_hover_image = !empty($hover_image_assets) ? $hover_image_assets[0] : NULL;
      if ($sku instanceof SKU) {
        $swatches = array_filter($sku_assets_manager->getColorsForSku($sku));

        if ($plp_main_image) {
          $sku_gallery = [
            '#theme' => 'alshaya_assets_gallery',
            '#mainImage' => $plp_main_image,
            '#attached' => [
              'library' => [
                'alshaya_hm_images/hm_images',
              ],
            ],
          ];

          // We don't get alt/title, we use product's title for that.
          $sku_gallery['#label'] = $sku->label();

          if ($plp_hover_image) {
            $sku_gallery['#hoverImage'] = $plp_hover_image;
          }

          $elements[$delta]['#gallery'] = $sku_gallery;

          if ($swatches) {
            $elements[$delta]['#swatches'] = array_slice($swatches, 0, $swatch_plp_limit);
            $elements[$delta]['#swatch_more_text'] = count($swatches) > $swatch_plp_limit ? t('+ @swatch_count more', ['@swatch_count' => count($swatches) - $swatch_plp_limit]) : FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_acq_sku_pdp_gallery_media_alter().
 */
function alshaya_hm_images_acq_sku_pdp_gallery_media_alter(&$main_image, &$thumb_images, $sku) {
  if (empty($main_image) && ($sku instanceof SKU)) {
    /** @var \Drupal\alshaya_hm_images\SkuAssetManager $sku_assets_manager */
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $color = \Drupal::request()->query->get('color');

    // If we have color attribute available from query params & the SKU being
    // rendered is configurable, lookup for a simple SKU with that color.
    // Fallback for the same in case of not a valid color is the parent SKU.
    if (($color) &&
      ($sku->bundle() === 'configurable') &&
      (($sku_color = $sku_assets_manager->getChildSkuFromColor($sku, $color)) instanceof SKU)) {
      $sku = $sku_color;
    }

    if ($sku instanceof SKU) {
      $pdp_images = $sku_assets_manager->getImagesForSku($sku, 'pdp',
        [
          'pdp_thumbnail',
          'pdp_zoom',
          'pdp_fullscreen',
          'pdp_main',
        ]
      );

      foreach ($pdp_images['pdp_thumbnail'] as $key => $thumbnail) {
        $thumb_images[$key]['zoomurl'] = $pdp_images['pdp_fullscreen'][$key]['url'];
        $thumb_images[$key]['thumburl'] = $thumbnail['url'];
        $thumb_images[$key]['mediumurl'] = $pdp_images['pdp_main'][$key]['url'];
        $thumb_images[$key]['type'] = 'image';
        $thumb_images[$key]['fullurl'] = $pdp_images['pdp_fullscreen'][$key]['url'];
        $thumb_images[$key]['label'] = $sku->label();
      }

      // Check on main images is sufficient here, since zoom images are
      // variations of main images.
      if (!empty($pdp_images['pdp_main'])) {
        $main_image['zoomurl'] = $pdp_images['pdp_fullscreen'][0]['url'];
        $main_image['mediumurl'] = $pdp_images['pdp_main'][0]['url'];
        $main_image['label'] = $sku->label();
      }
    }
  }
}

/**
 * Implements hook_acq_sku_teaser_media_alter().
 */
function alshaya_hm_images_acq_sku_teaser_media_alter(&$build, $sku_entity) {
  if (empty($build['image'])) {
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $teaser_assets = $sku_assets_manager->getSkuAssets($sku_entity, 'teaser', ['plp']);

    // If no assets attached & the sku is configurable, try to use the
    // assets attached with first child sku attached.
    if (empty($teaser_assets) && ($sku_entity->bundle() === 'configurable')) {
      $teaser_assets = $sku_assets_manager->getChildSkuAssets($sku_entity, 'plp', ['plp']);
    }

    // Try once with plp assets if nothing found for teaser.
    if (empty($teaser_assets)) {
      $teaser_assets = $sku_assets_manager->getSkuAssets($sku_entity, 'plp', ['plp']);
    }

    if (!empty($teaser_assets)) {
      $build['image'] = [
        '#theme' => 'image',
        '#attributes' => [
          'src' => $teaser_assets[0]['url']->toString(),
          'title' => $sku_entity->label(),
          'alt' => $sku_entity->label(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_acq_sku_cart_media_alter().
 */
function alshaya_hm_images_acq_sku_cart_media_alter($sku, &$sku_image) {
  if (empty($sku_image)) {
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $cart_assets = $sku_assets_manager->getSkuAssets($sku, 'cart', ['cart']);

    if (!empty($cart_assets)) {
      $sku_image = [
        '#theme' => 'image',
        '#attributes' => [
          'src' => $cart_assets[0]['url']->toString(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_hm_images_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  $tree = $form_state->get('tree');

  // Check if the product is configurable.
  if (!empty($tree['parent'])) {
    $parent_sku = $tree['parent'];
    $sku_asset_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $swatch_type = $sku_asset_manager->getSkuSwatchType($parent_sku);

    // If the form has color config attribute available.
    if (isset($form['ajax']['configurables']['article_castor_id'])) {
      $options = $form['ajax']['configurables']['article_castor_id']['#options'];
      $form['ajax']['configurables']['article_castor_id']['#title'] = t('Color');
      $form['ajax']['configurables']['article_castor_id']['#attributes']['data-default-title'] = t('Color');

      // Translate color attribute option values to the rgb color values &
      // expose the same in Drupal settings to javascript.
      foreach ($options as $key => $option) {
        if (isset($tree['options']['article_castor_id:' . $key])) {
          $sku_options = $tree['options']['article_castor_id:' . $key];

          foreach ($sku_options as $key_option => $sku) {
            if ($key_option === '#available_config') {
              continue;
            }
            if (!empty($sku)) {
              $sku_entity = $sku;
              break;
            }
          }

          if ($sku_entity instanceof SKU) {
            if (strtoupper($swatch_type) !== SkuAssetManager::LP_SWATCH_RGB) {
              $asset = $sku_asset_manager->getSkuAssets($sku_entity, 'swatch', ['swatch'], $swatch_type);
            }

            // If swatch type is not miniature_image or assets were missing from
            // sku, use rgb color code instead.
            $sku_configurable_options_color[$key] = [
              'display_value' => empty($asset) ? $sku_entity->get('attr_rgb_color')->value : '<img src="' . $asset[0]['url']->toString() . '">',
              'display_label' => $sku_entity->get('attr_color_label')->getString(),
              'swatch_type' => empty($asset) ? SkuAssetManager::LP_SWATCH_RGB : $swatch_type,
            ];
          }
        }
      }

      if (!empty($sku_configurable_options_color)) {
        $form['ajax']['configurables']['article_castor_id']['#attached']['drupalSettings']['sku_configurable_options_color'] = $sku_configurable_options_color;
      }
    }
  }
}

/**
 * Implements template_preprocess_product_zoom().
 */
function alshaya_hm_images_preprocess_product_zoom(&$variables) {
  $variables['#cache']['contexts'][] = 'url.query_args:color';
}
