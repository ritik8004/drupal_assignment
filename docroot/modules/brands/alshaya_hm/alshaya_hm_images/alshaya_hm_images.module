<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_hm_images\SkuAssetManager;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_acq_sku_import_alter().
 */
function alshaya_hm_images_acq_sku_product_sku_alter($sku, $product) {
  // Process assets data & create attributes which are needed for sorting
  // the assets while displaying them.
  $sku->attr_assets = _alshaya_hm_images_acq_sku_process_assets($product);
}

/**
 * Helper function to process asset attributes & calculate sorting params.
 *
 * @param array $product
 *   Product array containing assets to be processed.
 *
 * @return string
 *   Serialized & processed assets.
 */
function _alshaya_hm_images_acq_sku_process_assets($product) {
  $assets = [];
  if (isset($product['extension'], $product['extension']['assets'])) {
    $assets = $product['extension']['assets'];
    foreach ($assets as $key => $asset) {
      $asset_type_parts = explode('/', $asset['Data']['AssetType']);
      $assets[$key]['sortAssetType'] = end($asset_type_parts);
      $face_type = SkuAssetManager::LP_DEFAULT_ANGLE;

      if (!empty($asset['Data']['Angle']['Facing']) && !empty($asset['Data']['Angle']['Identifier'])) {
        $face_type = $asset['Data']['Angle']['Facing'] . $asset['Data']['Angle']['Identifier'];
      }
      $assets[$key]['sortFacingType'] = $face_type;
    }
  }

  return serialize($assets);
}

/**
 * Implements hook_theme().
 */
function alshaya_hm_images_theme($existing, $type, $theme, $path) {
  return [
    'alshaya_assets_gallery' => [
      'variables' => [
        'mainImage' => '',
        'hoverImage' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function alshaya_hm_images_theme_registry_alter(&$theme_registry) {
  $theme_registry['sku_teaser']['variables']['swatches'] = NULL;
}

/**
 * Implements hook_acq_sku_gallery_view_alter().
 */
function alshaya_hm_images_acq_sku_gallery_view_alter(&$elements, $skus) {
  foreach ($elements as $delta => $element) {
    // Check if the gallery has a main image. If not, look for assets.
    if (empty($element['#gallery']['#mainImage'])) {
      $sku = $skus[$delta];
      // Get the assets.
      $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
      $main_image_assets = $sku_assets_manager->getSkuAsset($sku, 'plp', 'plp');
      $hover_image_assets = $sku_assets_manager->getSkuAsset($sku, 'plp_hover', 'plp');

      // If no assets attached & the sku is configurable, try to use the
      // assets attached with first child sku attached.
      if ((!$main_image_assets) && (!$hover_image_assets) && ($sku->bundle() === 'configurable')) {
        $main_image_assets = $sku_assets_manager->getChildSkuAssets($sku, 'plp', 'plp');
        $hover_image_assets = $sku_assets_manager->getChildSkuAssets($sku, 'plp_hover', 'plp');
      }

      $plp_main_image = !empty($main_image_assets) ? $main_image_assets[0] : NULL;
      $plp_hover_image = !empty($hover_image_assets) ? $hover_image_assets[0] : NULL;
      if ($sku instanceof SKU) {
        $swatches = $sku_assets_manager->getColorsForSku($sku);

        if ($plp_main_image) {
          $sku_gallery = [
            '#theme' => 'alshaya_assets_gallery',
            '#mainImage' => $plp_main_image,
            '#swatches' => $swatches,
            '#attached' => [
              'library' => [
                'alshaya_hm_images/hm_images',
              ],
            ],
          ];

          if ($plp_hover_image) {
            $sku_gallery['#hoverImage'] = $plp_hover_image;
          }

          $elements[$delta]['#gallery'] = $sku_gallery;

          if ($swatches) {
            $elements[$delta]['#swatches'] = $swatches;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_acq_sku_pdp_gallery_media_alter().
 */
function alshaya_hm_images_acq_sku_pdp_gallery_media_alter(&$main_image, &$thumb_images, $sku) {
  if (empty($main_image)) {
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $color = \Drupal::request()->query->get('color');

    if (($color) && ($sku->bundle() === 'configurable')) {
      $sku = $sku_assets_manager->getChildSkuFromColor($sku, $color);
    }

    if ($sku->bundle() == 'simple') {
      $main_images = $sku_assets_manager->getSkuAsset($sku, 'pdp', 'pdp_main');
      $thumb_images = $sku_assets_manager->getSkuAsset($sku, 'pdp', 'pdp_thumbnail');

      $zoom_images = $sku_assets_manager->getSkuAsset($sku, 'pdp', 'pdp_zoom');
      $fullscreen_images = $sku_assets_manager->getSkuAsset($sku, 'pdp', 'pdp_fullscreen');
    }
    elseif ($sku->bundle() == 'configurable') {
      $thumb_images = $sku_assets_manager->getChildSkuAssets($sku, 'pdp', 'pdp_thumbnail');
      $zoom_images = $sku_assets_manager->getChildSkuAssets($sku, 'pdp', 'pdp_zoom');
      $fullscreen_images = $sku_assets_manager->getChildSkuAssets($sku, 'pdp', 'pdp_fullscreen');
      $main_images = $sku_assets_manager->getChildSkuAssets($sku, 'pdp', 'pdp_main');
    }

    foreach ($thumb_images as $key => $thumbnail) {
      $thumb_images[$key]['zoomurl'] = $zoom_images[$key]['url'];
      $thumb_images[$key]['thumburl'] = $thumb_images[$key]['url'];
      $thumb_images[$key]['mediumurl'] = $main_images[$key]['url'];
      $thumb_images[$key]['type'] = 'image';
      $thumb_images[$key]['fullurl'] = $fullscreen_images[$key]['url'];
    }

    // Check on main images is sufficient here, since zoom images are variations
    // of main images.
    if ($main_images) {
      $main_image['zoomurl'] = $zoom_images[0]['url'];
      $main_image['mediumurl'] = $main_images[0]['url'];
    }
  }
}

/**
 * Implements hook_acq_sku_teaser_media_alter().
 */
function alshaya_hm_images_acq_sku_teaser_media_alter(&$build, $sku_entity) {
  if (empty($build['image'])) {
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $teaser_assets = $sku_assets_manager->getSkuAsset($sku_entity, 'teaser', 'teaser');

    if (!empty($teaser_assets)) {
      $build['image'] = [
        '#theme' => 'image',
        '#attributes' => [
          'src' => $teaser_assets[0]['url']->toString(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_acq_sku_cart_media_alter().
 */
function alshaya_hm_images_acq_sku_cart_media_alter($sku, &$sku_image) {
  if (empty($sku_image)) {
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $cart_assets = $sku_assets_manager->getSkuAsset($sku, 'cart', 'cart');

    if (!empty($cart_assets)) {
      $sku_image = [
        '#theme' => 'image',
        '#attributes' => [
          'src' => $cart_assets[0]['url']->toString(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function alshaya_hm_images_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  $tree = $form_state->get('tree');

  // Check if the product is configurable.
  if (!empty($tree['parent'])) {
    $parent_sku = $tree['parent'];
    $sku_asset_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $swatch_type = $sku_asset_manager->getSkuSwatchType($parent_sku);

    // If the form has color config attribute available.
    if (isset($form['ajax']['configurables']['article_castor_id'])) {
      $options = $form['ajax']['configurables']['article_castor_id']['#options'];
      $form['ajax']['configurables']['article_castor_id']['#title'] = t('Color');
      $form['ajax']['configurables']['article_castor_id']['#attributes']['data-default-title'] = t('Color');

      // Translate color attribute option values to the rgb color values &
      // expose the same in Drupal settings to javascript.
      foreach ($options as $key => $option) {
        if (isset($tree['options']['article_castor_id:' . $key])) {
          $sku_options = $tree['options']['article_castor_id:' . $key];

          foreach ($sku_options as $key_option => $sku) {
            if ($key_option === '#available_config') {
              continue;
            }
            if (!empty($sku)) {
              $sku_entity = $sku;
              break;
            }
          }

          if ($sku_entity instanceof SKU) {
            if ($swatch_type === 'miniature_image') {
              $asset = $sku_asset_manager->getSkuAsset($sku_entity, 'swatch', 'swatch');
            }

            // If swatch type is not miniature_image or assets were missing from
            // sku, use rgb color code instead.
            $sku_configurable_options_color[$key] = [
              'display_value' => empty($asset) ? $sku_entity->get('attr_rgb_color')->value : '<img src="' . $asset[0]['url']->toString() . '">',
              'display_label' => $sku_entity->get('attr_color_label')->value,
              'swatch_type' => $swatch_type,
            ];
          }
        }
      }

      if (!empty($sku_configurable_options_color)) {
        $form['ajax']['configurables']['article_castor_id']['#attached']['drupalSettings']['sku_configurable_options_color'] = $sku_configurable_options_color;
      }
    }
  }
}
