<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Routing\CurrentRouteMatch;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function alshaya_hm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-alshaya-product-list-block-1') {
    // Change position label.
    if (isset($form['sort_bef_combine']['#options']['nid ASC']) && $form['sort_bef_combine']['#options']['nid ASC']) {
      $form['sort_bef_combine']['#options']['nid ASC'] = t('Best Seller');
    }
  }

  if ($form_id == 'alshaya_newsletter_subscribe') {
    $form['email']['#prefix']   = '<div class="newsletter-block-label">' . t('Be the first to know about our newest arrivals, special offers and store events near you.') . '</div>';
  }
}

/**
 * Implements hook_acq_sku_product_node_alter().
 */
function alshaya_hm_acq_sku_product_node_alter(Drupal\node\Entity\Node &$node, array $product) {
  // Set product activation date if available.
  if (isset($product['attributes']['product_activation_date'])) {
    $node->created = strtotime($product['attributes']['product_activation_date']);
  }
}

/**
 * Implements template_preprocess_block().
 */
function alshaya_hm_preprocess_block(&$variables) {
  // @Todo: Figure out which block needs this preprocess & add a test around plugin id to avoid this being called for all blocks.
  // Set alshaya-private-card image path.
  $image_path = drupal_get_path('module', 'alshaya_hm') . '/images/alshaya-priv-card.svg';
  if ($variables['base_plugin_id'] == 'join_the_club') {
    $variables['content']['image']['#uri'] = $image_path;
  }

  // Alter language switcher links to honor the color query parameter translation.
  if ($variables['base_plugin_id'] == 'language_block') {
    $color_query = \Drupal::request()->query->get('color');
    /** @var CurrentRouteMatch $current_route_matcher */
    $current_route_matcher = \Drupal::service('current_route_match');
    $sku_asset_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');

    // Alter block only if we have color query parameter on a PDP.
    if (($color_query) &&
      ($current_route_matcher->getRouteName() == 'entity.node.canonical') &&
      ($node = $current_route_matcher->getParameter('node')) &&
      ($node->getType() == 'acq_product')) {

      // Alter the color parameter in the query string.
      foreach ($variables['content']['#links'] as $langcode => $link) {
        // Load color translation from the translation of SKU variant with the
        // color in the query parameter.
        if (($langcode != \Drupal::languageManager()->getCurrentLanguage()->getId()) &&
          ($node->hasTranslation($langcode))) {
          $sku = SKU::loadFromSku($node->get('field_skus')->first()->getString());
          // Get one of the child SKUs whose color label matches the query string.
          $sku_color = $sku_asset_manager->getChildSkuFromColor($sku, $color_query);

          // If its a valid SKU & has translation in the language for which the
          // lang-switcher link is being built, fetch the color label translation.
          if (($sku_color instanceof SKU) &&
            ($sku_color->hasTranslation($langcode))) {
            $color_query_translation = $sku_color->getTranslation($langcode)->get('attr_color_label')->value;
            $variables['content']['#links'][$langcode]['query']['color'] = $color_query_translation;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_datalayer_alter().
 */
function alshaya_hm_datalayer_alter(&$data_layer) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }
  try {
    if (isset($data_layer['cartItemsFlocktory'])) {
      $cart_storage = \Drupal::service('acq_cart.cart_storage');
      $cart = $cart_storage->getCart(FALSE);
      if ($cart) {
        $cart_items = $cart->get('items');
        if (\Drupal::moduleHandler()->moduleExists('alshaya_hm_images')) {
          foreach ($cart_items as $key => $item) {
            $sku = SKU::loadFromSku($item['sku']);
            $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
            $images = $sku_assets_manager->getImagesForSKU($sku, 'pdp', 'pdp_main');
            if (isset($images[0]['url'])) {
              $data_layer['cartItemsFlocktory'][$key]['image'] = $images[0]['url']->toString();
            }
          }
        }
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->error('Error while fetching GTM attributes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Implemented hook_gtm_product_attributes_alter().
 */
function alshaya_hm_gtm_product_attributes_alter($product, &$attributes, &$skuAttributes) {
  if (\Drupal::moduleHandler()->moduleExists('alshaya_hm_images')) {
    $skuId = $product->get('field_skus')->first()->getString();
    if (isset($skuId)) {
      $sku = SKU::loadFromSku($skuId);
      $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
      $images = $sku_assets_manager->getImagesForSKU($sku, 'pdp', 'pdp_main');
      if (!empty($images)) {
        // Changes for the image count.
        $skuAttributes['gtm-dimension4'] = count($images);
      }
    }
  }
}

/**
 * Implemented hook_module_implements_alter().
 */
function alshaya_hm_module_implements_alter(&$implementations, $hook) {
  // To call the alshaya_hm_datalayer_alter at the end for HnM specific changes.
  if ($hook == 'datalayer_alter') {
    $group = $implementations['alshaya_hm'];
    unset($implementations['alshaya_hm']);
    $implementations['alshaya_hm'] = $group;
  }
}
