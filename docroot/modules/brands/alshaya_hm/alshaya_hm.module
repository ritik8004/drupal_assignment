<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_sku\Plugin\AcquiaCommerce\SKUType\Configurable;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_form_alter().
 */
function alshaya_hm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'alshaya_newsletter_subscribe') {
    $form['email']['#prefix'] = '<div class="newsletter-block-label">' . t('Be the first to know about our newest arrivals, special offers and store events near you.') . '</div>';
  }
}

/**
 * Implements template_preprocess_block().
 */
function alshaya_hm_preprocess_block(&$variables) {
  // @Todo: Figure out which block needs this preprocess & add a test around plugin id to avoid this being called for all blocks.
  // Set alshaya-private-card image path.
  $image_path = drupal_get_path('module', 'alshaya_hm') . '/images/alshaya-priv-card.svg';
  if ($variables['base_plugin_id'] == 'join_the_club') {
    $variables['content']['image']['#uri'] = $image_path;
  }
}

/**
 * Implements hook_datalayer_alter().
 */
function alshaya_hm_datalayer_alter(&$data_layer) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }
  try {
    if (isset($data_layer['cartItemsFlocktory'])) {
      /** @var \Drupal\acq_cart\CartSessionStorage $cart_storage */
      $cart_storage = \Drupal::service('acq_cart.cart_storage');
      $cart = $cart_storage->getCart(FALSE);
      if ($cart) {
        $cart_items = $cart->items();
        if (\Drupal::moduleHandler()->moduleExists('alshaya_hm_images')) {
          foreach ($cart_items as $key => $item) {
            $sku = SKU::loadFromSku($item['sku']);
            if ($sku instanceof SKU) {
              $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
              $images = $sku_assets_manager->getImagesForSku($sku, 'pdp');
              if (!empty($images[0]) && isset($images[0]['url'])) {
                $data_layer['cartItemsFlocktory'][$key]['image'] = $images[0]['url']->toString();
              }
            }
          }
        }
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->error('Error while fetching GTM attributes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Implements hook_gtm_product_attributes_alter().
 */
function alshaya_hm_gtm_product_attributes_alter($product, &$attributes) {
  // Changes for the image count.
  $attributes['gtm-dimension4'] = ($product instanceof NodeInterface) ? (count(alshaya_hm_get_product_images($product)) ?: 'image not available') : 'image not available';
}

/**
 * Implements hook_gtm_pdp_attributes_alter().
 */
function alshaya_hm_gtm_pdp_attributes_alter($sku, &$attributes) {
  if (empty($attributes['productPictureUrl'])) {
    $images = alshaya_hm_get_sku_images($sku);
    if (!empty($images[0]) && isset($images[0]['url'])) {
      $attributes['productPictureUrl'] = $images[0]['url']->toString();
    }
  }
}

/**
 * Get the product images from the product object.
 *
 * @param \Drupal\node\NodeInterface $product
 *   The product node object.
 *
 * @return array
 *   Return the array of images or empty array.
 */
function alshaya_hm_get_product_images(NodeInterface $product) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
  $skuId = $skuManager->getSkuForNode($product);

  if (\Drupal::moduleHandler()->moduleExists('alshaya_hm_images') && !empty($skuId)) {
    return alshaya_hm_get_sku_images($skuId);
  }
  return [];
}

/**
 * Get the images from given sku.
 *
 * @param int|Object $sku
 *   The SKU id or SKU entity object.
 *
 * @return array
 *   Return the array of images or empty array.
 */
function alshaya_hm_get_sku_images($sku) {
  $sku = $sku instanceof SKU ? $sku : SKU::loadFromSku($sku);
  $images = [];
  if ($sku instanceof SKU) {
    $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
    $images = $sku_assets_manager->getImagesForSku($sku, 'pdp');
  }
  return $images;
}

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_hm_module_implements_alter(&$implementations, $hook) {
  // To call the alshaya_hm_datalayer_alter at the end for HnM specific changes.
  if ($hook == 'datalayer_alter') {
    $group = $implementations['alshaya_hm'];
    unset($implementations['alshaya_hm']);
    $implementations['alshaya_hm'] = $group;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_hm_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $sku = $skuManager->getSkuForNode($entity);
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU && $view_mode == 'full') {
      $return = _alshaya_hm_get_product_description($sku_entity);
      $build['description'] = $return['description'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_hm_acq_sku_view(array &$build, EntityInterface $sku_entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    $return = _alshaya_hm_get_product_description($sku_entity);
    $build['short_desc'] = $return['description'][0];
    $build['read_more_style']['value'] = [
      '#markup' => 'display:none;',
    ];
  }
}

/**
 * Get product description from SKU.
 */
function _alshaya_hm_get_product_description($sku_entity) {
  $return = [];
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
  $search_direction = $sku_entity->getType() == 'configurable' ? 'children' : 'self';
  $description_value = '';

  if ($body = $sku_entity->get('attr_description')->getValue()) {
    $description_value .= $body[0]['value'];
  }

  if ($concepts = $sku_entity->get('attr_concept')->getValue()) {
    $concepts_markup = [
      '#theme' => 'product_concept_markup',
      '#concepts' => $concepts,
    ];

    $description_value .= render($concepts_markup);
  }

  // Render the wrapper div for composition always so that the same can be
  // filled with data on variant selection.
  // Prepare the description variable.
  $composition = $skuManager->fetchProductAttribute($sku_entity, 'attr_composition', $search_direction);
  $composition_markup = [
    '#theme' => 'product_composition_markup',
  ];

  if (!empty($composition)) {
    $composition_markup['#composition']['#markup'] = $composition;
  }

  $description_value .= render($composition_markup);

  $washing_instructions = $sku_entity->get('attr_washing_instructions')
    ->getString();
  $dry_cleaning_instructions = $sku_entity->get('attr_dry_cleaning_instructions')
    ->getString();
  if (!empty($washing_instructions) || !empty($dry_cleaning_instructions)) {
    $description_value .= '<div class="care-instructions-wrapper">';
    $description_value .= '<div class="care-instructions-label">' . t('care instructions') . '</div>';
    if (!empty($washing_instructions)) {
      $description_value .= '<div class="care-instructions-value washing-instructions">' . $washing_instructions . '</div>';
    }
    if (!empty($dry_cleaning_instructions)) {
      $description_value .= '<div class="care-instructions-value dry-cleaning-instructions">' . $dry_cleaning_instructions . '</div>';
    }
    $description_value .= '</div>';
  }

  // Render the wrapper div for article warning always so that the same
  // can be filled with data on variant selection.
  $warning = $skuManager->fetchProductAttribute($sku_entity, 'attr_article_warning', $search_direction);
  $warning_markup = [
    '#theme' => 'product_article_warning_markup',
  ];

  if (!empty($warning)) {
    $warning_markup['#warning']['#markup'] = $warning;
  }

  $description_value .= render($warning_markup);

  $description['value'] = [
    '#markup' => $description_value,
  ];

  // If specifications are enabled, prepare the specification variable.
  if (\Drupal::config('alshaya_acm.settings')
    ->get('pdp_show_specifications')) {
    $specifications['label'] = [
      '#markup' => t('Specifications'),
    ];

    $specifications['value'] = [
      "#theme" => 'item_list',
      '#items' => [],
    ];

    if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
      $specifications['value']['#items'][] = t('Style Code: @value', [
        '@value' => $attr_style_code,
      ]);
    }

    if ($attr_color = $sku_entity->get('attr_color')->getString()) {
      $specifications['value']['#items'][] = t('Color: @value', [
        '@value' => $attr_color,
      ]);
    }

    if ($attr_season = $sku_entity->get('attr_season')->getString()) {
      $specifications['value']['#items'][] = t('Season: @value', [
        '@value' => $attr_season,
      ]);
    }

    if ($attr_brand = $sku_entity->get('attr_product_brand')->getString()) {
      $specifications['value']['#items'][] = t('Product brand: @value', [
        '@value' => $attr_brand,
      ]);
    }
  }

  // Add all variables to $build in the sequence in
  // which they should be displayed.
  $return['description'][] = $description;
  if (!empty($specifications)) {
    $return['description'][] = $specifications;
  }

  return $return;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_hm_acq_sku_presave(SKUInterface $sku) {
  // Update composition field.
  $composition = json_decode($sku->get('attr_composition')->getString(), TRUE);
  if (!empty($composition)) {
    $sku->set('attr_composition', \Drupal::service('alshaya_acm_product.skumanager')
      ->transformCompositionArrayToList($composition));
  }
  else {
    if (!empty($sku->get('attr_composition')->getString())) {
      \Drupal::logger('alshaya_hm')->info('Invalid JSON. Unable to parse JSON data for SKU: @sku. JSON: @json', ['@sku' => $sku->getSku(), '@json' => $sku->get('attr_composition')->getString()]);
    }

    $sku->set('attr_composition', NULL);
  }
}

/**
 * Implements hook_alshaya_get_currency_code().
 */
function alshaya_hm_alshaya_get_currency_code_alter(&$currency) {
  // Updated UAE currency code.
  $currency['ae']['en'] = 'DHS';
}

/**
 * Implements hook_acq_sku_product_sku_alter().
 */
function alshaya_hm_acq_sku_product_sku_alter(SKU $sku, array $product) {
  if (isset($product['style_code']) && $sku->hasField('attr_style_code')) {
    $sku->get('attr_style_code')->setValue($product['style_code']);
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_hm_theme($existing, $type, $theme, $path) {
  return [
    'color_node_links' => [
      'variables' => [
        'color_nodes' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_hm_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  $selected = $form_state->getValue('configurables');

  if (!empty($selected['article_castor_id'])) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
    $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

    // Load SKU entity.
    $sku_entity = $sku_manager->loadSkuById((int) $form['sku_id']['#value']);

    $product_tree = Configurable::deriveProductTree($sku_entity);
    if (!empty($product_tree['combinations']['attribute_sku']['article_castor_id'][$selected['article_castor_id']])) {
      $article_castor_id_child_sku_code = $product_tree['combinations']['attribute_sku']['article_castor_id'][$selected['article_castor_id']][0];

      if (($article_castor_id_child_sku = SKU::loadFromSku($article_castor_id_child_sku_code)) &&
        ($article_castor_id_child_sku instanceof SKU)) {
        $parent_sku = $sku_manager->getParentSkuBySku($article_castor_id_child_sku);
        // Set SKU tree to the parent based on color chosen. This is used while
        // submitting the data back to MDC.
        if ($parent_sku instanceof SKU) {
          $form_state->set('tree_sku', $parent_sku->getSku());
        }
      }
    }
  }
}

/**
 * Implements hook_alshaya_acm_product_add_to_cart_ajax_response_alter().
 */
function alshaya_hm_alshaya_acm_product_add_to_cart_ajax_response_alter(FormStateInterface $form_state, AjaxResponse $response, SKUInterface $sku, SKUInterface $selected_sku = NULL) {
  // List of attributes selected by end-users on the form.
  $selected = $form_state->getValue('configurables');

  /** @var \Drupal\alshaya_acm_product\SkuManager $sku_manager */
  $sku_manager = \Drupal::service('alshaya_acm_product.skumanager');

  // Update PDP Url when switching color if the SKU has style code attribute.
  if (($sku_manager->fetchStyleCode($sku)) &&
    !empty($selected['article_castor_id'])) {
    $product_tree = Configurable::deriveProductTree($sku);

    // If we have options for article castor id, compare it with the one
    // selected, load the right child SKU, fetch the color node & update url in
    // AJAX response.
    if (!empty($product_tree['combinations']['attribute_sku']['article_castor_id'][$selected['article_castor_id']])) {
      $article_castor_id_child_sku_code = $product_tree['combinations']['attribute_sku']['article_castor_id'][$selected['article_castor_id']][0];

      if (($article_castor_id_child_sku = SKU::loadFromSku($article_castor_id_child_sku_code)) &&
        ($article_castor_id_child_sku instanceof SKU)) {
        $parent_sku = $sku_manager->getParentSkuBySku($article_castor_id_child_sku);

        // Update Item code when switching the color.
        $item_code['#markup'] = $parent_sku instanceof SKU ? $parent_sku->getSku() : '';
        $item_code['#prefix'] = '<span class="field__value">';
        $item_code['#suffix'] = '</span>';

        $response->addCommand(new ReplaceCommand('article[data-sku="' . $sku->getSku() . '"] .content--item-code .field__value', $item_code));

        // Fetch display node based on the castor Id selected.
        $display_node = $sku_manager->getDisplayNode($article_castor_id_child_sku);
        $data['display_node_url'] = $display_node->toUrl()->toString();
        $data['display_node_title'] = $display_node->getTitle();
        $data['parent_sku_id'] = $sku->id();

        $response->addCommand(new InvokeCommand('', 'updatePdpUrl', [$data]));
      }
    }
  }
}

/**
 * Implements hook_acq_sku_configurable_cart_options_alter().
 */
function alshaya_hm_acq_sku_configurable_cart_options_alter(array &$options, SKU $sku) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  if ($skuManager->fetchStyleCode($sku)) {
    foreach ($options as $index => $option) {
      if ($option['option_id'] == 999999) {
        unset($options[$index]);
        break;
      }
    }
  }
}

/**
 * Implements hook_acq_sku_configurable_product_configurations_alter().
 */
function alshaya_hm_acq_sku_configurable_product_configurations_alter(array &$configurations, SKU $sku) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $style_code = $skuManager->fetchStyleCode($sku);

  // If we do not have any value for style code or we have
  // article_castor_id already set, we do no further processing.
  if (empty($style_code) || isset($configurations['article_castor_id'])) {
    return;
  }

  $variants = \Drupal::entityTypeManager()
    ->getStorage('acq_sku')
    ->loadByProperties([
      'attr_style_code' => $style_code,
      'type' => 'configurable',
    ]);

  if (empty($variants)) {
    return;
  }

  $langcode = $sku->language()->getId();
  $cid = implode(':', [
    $sku->id(),
    $langcode,
  ]);

  $cache = \Drupal::cache('hm_product_configurations')->get($cid);

  if (isset($cache, $cache->data)) {
    $configurations = $cache->data;
    return;
  }

  // Ensure configurable value id is used as key in values.
  foreach ($configurations as $code => $configuration) {
    if (empty($configuration['values'])) {
      continue;
    }
    $values = $configuration['values'];
    $configurations[$code]['values'] = [];
    foreach ($values as $value) {
      $configurations[$code]['values'][$value['value_id']] = $value;
    }
  }

  /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
  $plugin = $sku->getPluginInstance();
  /** @var \Drupal\acq_sku\Entity\SKU $variant */
  foreach ($variants as $variant) {
    if (!$plugin->isProductInStock($variant)) {
      continue;
    }

    if ($langcode != $variant->language()->getId() && $variant->hasTranslation($langcode)) {
      $variant = $variant->getTranslation($langcode);
    }

    $variant_configurations = unserialize($variant->get('field_configurable_attributes')->getString());

    foreach ($variant_configurations as $variant_configurable) {
      if (empty($configurations[$variant_configurable['code']])) {
        $configurations[$variant_configurable['code']] = $variant_configurable;
        $configurations[$variant_configurable['code']]['values'] = [];
      }

      foreach ($variant_configurable['values'] as $value) {
        $configurations[$variant_configurable['code']]['values'][$value['value_id']] = $value;
      }
    }
  }

  $colors = [];
  $children = Configurable::getChildren($sku);
  foreach ($children as $child) {
    $attributes = $child->get('attributes')->getValue();
    $attributes = array_column($attributes, 'value', 'key');
    $colors[$attributes['article_castor_id']] = [
      'label' => $attributes['color_label'],
      'value_id' => $attributes['article_castor_id'],
    ];
  }

  if (empty($colors)) {
    return;
  }

  $configurations = [
    'article_castor_id' => [
      'attribute_id' => 999999,
      'code' => 'article_castor_id',
      'label' => (string) t('Article Castor Id'),
      'position' => -1,
      'values' => $colors,
    ],
  ] + $configurations;

  \Drupal::cache('hm_product_configurations')->set($cid, $configurations, Cache::PERMANENT, $sku->getCacheTags());
}

/**
 * Implements hook_acq_sku_configurable_variants_alter().
 */
function alshaya_hm_acq_sku_configurable_variants_alter(array &$children, SKU $sku) {
  // If we do not have any value for style code we do no further processing.
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $style_code = $skuManager->fetchStyleCode($sku);
  if (empty($style_code)) {
    return;
  }

  // If we we have article_castor_id already set, we do no further processing.
  $configurations = unserialize($sku->get('field_configurable_attributes')->getString());
  $configurable_attribute_codes = array_column($configurations, 'code', 'code');
  if (isset($configurable_attribute_codes['article_castor_id'])) {
    return;
  }

  $query = \Drupal::database()->select('acq_sku__field_configured_skus', 'asfcs');

  $query->leftJoin('acq_sku_field_data', 'sku', 'sku.id = asfcs.entity_id AND sku.langcode = asfcs.langcode AND sku.default_langcode = :default AND sku.type = :type', [
    ':default' => 1,
    ':type' => 'configurable',
  ]);
  $query->leftJoin('acq_sku_stock', 'stock', 'stock.sku = asfcs.field_configured_skus_value');

  $query->condition('sku.attr_style_code', $style_code);
  $query->condition('stock.quantity', 0, '>');
  $query->condition('stock.status', 1);

  $query->fields('asfcs', ['field_configured_skus_value']);

  $result = $query->execute()->fetchAll();

  $children = [];

  foreach ($result ?? [] as $row) {
    if (isset($children[$row->field_configured_skus_value])) {
      continue;
    }

    $child = SKU::loadFromSku($row->field_configured_skus_value);
    if (!($child instanceof SKU)) {
      continue;
    }

    $children[$child->getSku()] = $child;
  }
}

/**
 * Implements hook_acq_sku_indexes_alter().
 */
function alshaya_hm_acq_sku_indexes_alter(array &$indexes) {
  $indexes['acq_sku__attr_style_code'] = [
    'table' => 'acq_sku_field_data',
    'fields' => [
      ['attr_style_code', 10],
    ],
    'spec' => [
      'fields' => [
        'attr_style_code' => [
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ],
      ],
    ],
  ];
}
