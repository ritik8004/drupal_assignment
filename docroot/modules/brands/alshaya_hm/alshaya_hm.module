<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_form_alter().
 */
function alshaya_hm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'alshaya_newsletter_subscribe') {
    $form['email']['#prefix'] = '<div class="newsletter-block-label">' . t('Be the first to know about our newest arrivals, special offers and store events near you.') . '</div>';
  }
}

/**
 * Implements template_preprocess_block().
 */
function alshaya_hm_preprocess_block(&$variables) {
  // @Todo: Figure out which block needs this preprocess & add a test around plugin id to avoid this being called for all blocks.
  // Set alshaya-private-card image path.
  $image_path = drupal_get_path('module', 'alshaya_hm') . '/images/alshaya-priv-card.svg';
  if ($variables['base_plugin_id'] == 'join_the_club') {
    $variables['content']['image']['#uri'] = $image_path;
  }
}

/**
 * Implements hook_datalayer_alter().
 */
function alshaya_hm_datalayer_alter(&$data_layer) {
  if (!_alshaya_seo_process_gtm()) {
    return;
  }
  try {
    if (isset($data_layer['cartItemsFlocktory'])) {
      /** @var \Drupal\acq_cart\CartSessionStorage $cart_storage */
      $cart_storage = \Drupal::service('acq_cart.cart_storage');
      $cart = $cart_storage->getCart(FALSE);
      if ($cart) {
        $cart_items = $cart->items();
        if (\Drupal::moduleHandler()->moduleExists('alshaya_hm_images')) {
          foreach ($cart_items as $key => $item) {
            $sku = SKU::loadFromSku($item['sku']);
            if ($sku instanceof SKU) {
              $sku_assets_manager = \Drupal::service('alshaya_hm_images.skuassetsmanager');
              $images = $sku_assets_manager->getAssetsForSku($sku, 'pdp');
              if (!empty($images[0]) && isset($images[0]['url'])) {
                $data_layer['cartItemsFlocktory'][$key]['image'] = $images[0]['url']->toString();
              }
            }
          }
        }
      }
    }
  }
  catch (Exception $e) {
    \Drupal::logger('alshaya_seo')->error('Error while fetching GTM attributes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function alshaya_hm_module_implements_alter(&$implementations, $hook) {
  // To call the alshaya_hm_datalayer_alter at the end for HnM specific changes.
  if ($hook == 'datalayer_alter') {
    $group = $implementations['alshaya_hm'];
    unset($implementations['alshaya_hm']);
    $implementations['alshaya_hm'] = $group;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_hm_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product') {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

    $sku = $skuManager->getSkuForNode($entity);
    $sku_entity = SKU::loadFromSku($sku);

    if ($sku_entity instanceof SKU && $view_mode == 'full') {
      $return = _alshaya_hm_get_product_description($sku_entity);
      $build['description'] = $return['description'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_hm_acq_sku_view(array &$build, EntityInterface $sku_entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    $return = _alshaya_hm_get_product_description($sku_entity);
    $build['short_desc'] = $return['description'][0];
    $build['read_more_style']['value'] = [
      '#markup' => 'display:none;',
    ];
  }
}

/**
 * Get product description from SKU.
 */
function _alshaya_hm_get_product_description($sku_entity) {
  $return = [];
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
  $search_direction = $sku_entity->getType() == 'configurable' ? 'children' : 'self';
  $description_value = '';

  if ($body = $sku_entity->get('attr_description')->getValue()) {
    $description_value .= $body[0]['value'];
  }

  if ($concepts = $sku_entity->get('attr_concept')->getValue()) {
    $concepts_markup = [
      '#theme' => 'product_concept_markup',
      '#title' => t('concept'),
      '#concepts' => $concepts,
    ];

    $description_value .= render($concepts_markup);
  }

  // Render the wrapper div for composition always so that the same can be
  // filled with data on variant selection.
  // Prepare the description variable.
  $composition = $skuManager->fetchProductAttribute($sku_entity, 'attr_composition', $search_direction);
  $composition_markup = [
    '#theme' => 'product_composition_markup',
    '#title' => t('composition'),
  ];

  if (!empty($composition)) {
    $composition_markup['#composition']['#markup'] = $composition;
  }

  $description_value .= render($composition_markup);

  $washing_instructions = $sku_entity->get('attr_washing_instructions')
    ->getString();
  $dry_cleaning_instructions = $sku_entity->get('attr_dry_cleaning_instructions')
    ->getString();
  if (!empty($washing_instructions) || !empty($dry_cleaning_instructions)) {
    $description_value .= '<div class="care-instructions-wrapper">';
    $description_value .= '<div class="care-instructions-label">' . t('care instructions') . '</div>';
    if (!empty($washing_instructions)) {
      $description_value .= '<div class="care-instructions-value washing-instructions">' . $washing_instructions . '</div>';
    }
    if (!empty($dry_cleaning_instructions)) {
      $description_value .= '<div class="care-instructions-value dry-cleaning-instructions">' . $dry_cleaning_instructions . '</div>';
    }
    $description_value .= '</div>';
  }

  // Render the wrapper div for article warning always so that the same
  // can be filled with data on variant selection.
  $warning = $skuManager->fetchProductAttribute($sku_entity, 'attr_article_warning', $search_direction);
  $warning_markup = [
    '#theme' => 'product_article_warning_markup',
    '#title' => t('safety warning'),
  ];

  if (!empty($warning)) {
    $warning_markup['#warning']['#markup'] = $warning;
  }

  $description_value .= render($warning_markup);

  $description['value'] = [
    '#markup' => $description_value,
  ];

  // If specifications are enabled, prepare the specification variable.
  if (\Drupal::config('alshaya_acm.settings')
    ->get('pdp_show_specifications')) {
    $specifications['label'] = [
      '#markup' => t('Specifications'),
    ];

    $specifications['value'] = [
      "#theme" => 'item_list',
      '#items' => [],
    ];

    if ($attr_style_code = $sku_entity->get('attr_style')->getString()) {
      $specifications['value']['#items'][] = t('Style Code: @value', [
        '@value' => $attr_style_code,
      ]);
    }

    if ($attr_color = $sku_entity->get('attr_color')->getString()) {
      $specifications['value']['#items'][] = t('Color: @value', [
        '@value' => $attr_color,
      ]);
    }

    if ($attr_season = $sku_entity->get('attr_season')->getString()) {
      $specifications['value']['#items'][] = t('Season: @value', [
        '@value' => $attr_season,
      ]);
    }

    if ($attr_brand = $sku_entity->get('attr_product_brand')->getString()) {
      $specifications['value']['#items'][] = t('Product brand: @value', [
        '@value' => $attr_brand,
      ]);
    }
  }

  // Add all variables to $build in the sequence in
  // which they should be displayed.
  $return['description'][] = $description;
  if (!empty($specifications)) {
    $return['description'][] = $specifications;
  }

  return $return;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function alshaya_hm_acq_sku_presave(SKUInterface $sku) {
  // Update composition field.
  $composition = json_decode($sku->get('attr_composition')->getString(), TRUE);
  if (!empty($composition)) {
    $sku->set('attr_composition', \Drupal::service('alshaya_acm_product.skumanager')
      ->transformCompositionArrayToList($composition));
  }
  else {
    if (!empty($sku->get('attr_composition')->getString())) {
      \Drupal::logger('alshaya_hm')->info('Invalid JSON. Unable to parse JSON data for SKU: @sku. JSON: @json', ['@sku' => $sku->getSku(), '@json' => $sku->get('attr_composition')->getString()]);
    }

    $sku->set('attr_composition', NULL);
  }
}

/**
 * Implements hook_alshaya_get_currency_code().
 */
function alshaya_hm_alshaya_get_currency_code_alter(&$currency) {
  // Updated UAE currency code.
  $currency['ae']['en'] = 'DHS';
}

/**
 * Implements hook_acq_sku_product_sku_alter().
 */
function alshaya_hm_acq_sku_product_sku_alter(SKU $sku, array $product) {
  if (isset($product['style_code']) && $sku->hasField('attr_style_code')) {
    $sku->get('attr_style_code')->setValue($product['style_code']);
  }
}

/**
 * Implements hook_theme().
 */
function alshaya_hm_theme($existing, $type, $theme, $path) {
  return [
    'color_node_links' => [
      'variables' => [
        'color_nodes' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_sku_variant_info_alter().
 */
function alshaya_hm_sku_variant_info_alter(array &$variant, SKUInterface $child, ?SKUInterface $parent) {
  /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
  $skuManager = \Drupal::service('alshaya_acm_product.skumanager');

  $composition = $skuManager->fetchProductAttribute($child, 'attr_composition', 'self');
  $composition_markup = '';
  if (!empty($composition)) {
    $markup = [
      '#theme' => 'product_composition_markup',
      '#title' => t('composition'),
      '#composition' => [
        '#markup' => $composition,
      ],
    ];

    $composition_markup = render($markup);
  }

  $variant['description'][] = [
    'selector' => '.composition-wrapper',
    'markup' => $composition_markup,
  ];

  $warning = $skuManager->fetchProductAttribute($child, 'attr_article_warning', 'self');
  $warning_markup = '';
  if (!empty($warning)) {
    $markup = [
      '#theme' => 'product_article_warning_markup',
      '#title' => t('safety warning'),
      '#composition' => [
        '#markup' => $warning,
      ],
    ];

    $warning_markup = render($markup);
  }

  $variant['description'][] = [
    'selector' => '.warning-wrapper',
    'markup' => $warning_markup,
  ];
}

/**
 * Implements hook_alshaya_acm_product_build_alter().
 */
function alshaya_hm_alshaya_acm_product_build_alter(&$build, SKUInterface $sku, $context = 'pdp') {
  if ($context == 'search') {
    // Product attribute labels for teaser view.
    $labels = _alshaya_hm_get_collection_labels($sku);
    $build['#product_attribute_labels'] = [
      '#markup' => $labels,
    ];
  }
}

/**
 * Implements hook_preprocess_template().
 */
function alshaya_hm_preprocess_alshaya_magazine(&$vars) {
  if ($vars['sku'] instanceof SKUInterface) {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    // Get parent sku.
    $parent_sku = $skuManager->getParentSkuBySku($vars['sku']);
    $labels = _alshaya_hm_get_collection_labels($parent_sku);
    $vars['product_attribute_labels'] = [
      '#markup' => $labels,
    ];
  }
}

/**
 * Get collection labels from sku.
 *
 * @param \Drupal\acq_commerce\SKUInterface $sku
 *   Sku object.
 *
 * @return string
 *   Labels with markup.
 */
function _alshaya_hm_get_collection_labels(SKUInterface $sku) {
  $product_attribute_labels = [];
  $label_product_environment = '';
  if ($sku->hasField('attr_product_environment') && $sku->get('attr_product_environment')->getString()) {
    // This gives primary label eg: conscious.
    $label_product_environment = $sku->get('attr_product_environment')->getString();
  }
  if ($sku->hasField('attr_concept') && $sku->get('attr_concept')->getString()) {
    if (strstr($sku->get('attr_concept')->getString(), ',')) {
      $product_attribute_labels = array_merge(
        $product_attribute_labels, explode(', ', $sku->get('attr_concept')->getString())
      );
    }
    else {
      $product_attribute_labels[] = $sku->get('attr_concept')->getString();
    }
  }
  $labels = '';
  if ($label_product_environment) {
    $labels .= '<li class="collection-label-primary">' . $label_product_environment . '</li>';
  }
  foreach ($product_attribute_labels as $attribute_label) {
    $labels .= '<li class="collection-label-default">' . $attribute_label . '</li>';
  }

  return $labels;
}
