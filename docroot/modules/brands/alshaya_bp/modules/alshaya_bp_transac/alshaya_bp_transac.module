<?php

/**
 * @file
 * Alshaya bp transac module file.
 */

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_acm_product_category\ProductCategoryTree;
use Drupal\Core\Link;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_bp_transac_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'acq_product' && $view_mode == 'full') {
    /** @var \Drupal\alshaya_acm_product\SkuManager $skuManager */
    $skuManager = \Drupal::service('alshaya_acm_product.skumanager');
    $sku = $skuManager->getSkuForNode($entity);
    $sku_entity = SKU::loadFromSku($sku);
    if ($sku_entity instanceof SKU) {
      $return = _alshaya_bp_transac_get_product_description($sku_entity);
      $build['short_desc'] = $return['short_desc'];
      $build['description'] = $return['description'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function alshaya_bp_transac_acq_sku_view(array &$build, EntityInterface $sku_entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'modal') {
    /** @var \Drupal\alshaya_acm_product\ProductHelper $productHelper */
    $productHelper = \Drupal::service('alshaya_acm_product.helper');

    $body = $sku_entity->get('attr_description')->getValue();
    if ($body) {
      $description = [];
      $description['value'] = [
        '#markup' => $body[0]['value'],
      ];
      $build['description'][] = $description;
      $productHelper->updateShortDescription($build, $body[0]['value']);
    }
  }
}

/**
 * Get product description from SKU.
 */
function _alshaya_bp_transac_get_product_description($sku_entity) {
  /** @var \Drupal\alshaya_acm_product\ProductHelper $productHelper */
  $productHelper = \Drupal::service('alshaya_acm_product.helper');

  $return = [];
  $body = $sku_entity->get('attr_description')->getValue();
  if ($body) {
    $description = [];
    $description['value'] = [
      '#markup' => $body[0]['value'],
    ];
    $return['description'][] = $description;
    $productHelper->updateShortDescription($return, $body[0]['value']);
    if (!empty($return['short_desc'])) {
      $return['short_desc']['value']['#markup'] = $productHelper->processShortDescEllipsis($return['short_desc']['value']['#markup']);
    }
  }

  if ($suitable_for = $sku_entity->get('attr_suitable_for')->getString()) {
    $suitable_for = [
      'label' => ['#markup' => t('Suitable for')],
      'value' => ['#markup' => $suitable_for],
    ];
    $return['description'][] = $suitable_for;
  }

  if ($how_to_use = $sku_entity->get('attr_how_to_use')->getString()) {
    $how_to_use = [
      'label' => ['#markup' => t('How to use')],
      'value' => ['#markup' => $how_to_use],
    ];
    $return['description'][] = $how_to_use;
  }

  if ($hazards_and_cautions = $sku_entity->get('attr_hazards_and_cautions')->getString()) {
    $hazards_and_cautions = [
      'label' => ['#markup' => t('Hazards and cautions')],
      'value' => ['#markup' => $hazards_and_cautions],
    ];
    $return['description'][] = $hazards_and_cautions;
  }

  if ($important_info = $sku_entity->get('attr_important_info')->getString()) {
    $important_info = [
      'label' => ['#markup' => t('Important info')],
      'value' => ['#markup' => $important_info],
    ];
    $return['description'][] = $important_info;
  }

  if ($ingredients = $sku_entity->get('attr_ingredients')->getString()) {
    $ingredients = [
      'label' => ['#markup' => t('Ingredients')],
      'value' => ['#markup' => $ingredients],
    ];
    $return['description'][] = $ingredients;
  }

  if ($active_ingredients = $sku_entity->get('attr_active_ingredients')->getString()) {
    $active_ingredients = [
      'label' => ['#markup' => t('Active ingredients')],
      'value' => ['#markup' => $active_ingredients],
    ];
    $return['description'][] = $active_ingredients;
  }

  if ($indications_age_restrictions = $sku_entity->get('attr_indications_age_restrictions')->getString()) {
    $indications_age_restrictions = [
      'label' => ['#markup' => t('Indications age restrictions')],
      'value' => ['#markup' => $indications_age_restrictions],
    ];
    $return['description'][] = $indications_age_restrictions;
  }

  if ($pil = $sku_entity->get('attr_pil')->getString()) {
    $pil = [
      'label' => ['#markup' => t('PIL')],
      'value' => ['#markup' => $pil],
    ];
    $return['description'][] = $pil;
  }

  if ($body_area = $sku_entity->get('attr_body_area')->getString()) {
    $body_area = [
      'label' => ['#markup' => t('Body area')],
      'value' => ['#markup' => $body_area],
    ];
    $return['description'][] = $body_area;
  }

  return $return;
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function alshaya_bp_transac_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Changing breadcrumb for advance pages.
  $breadcrumb_links = [];
  if ($route_match->getRouteName() == 'entity.node.canonical'
      && $route_match->getParameter('node')->bundle() == 'advanced_page') {
    $breadcrumb_links[] = Link::createFromRoute(t('Home', [], ['context' => 'breadcrumb']), '<front>');

    /** @var \Drupal\node\Entity\Node $node */
    $node = $route_match->getParameter('node');

    if ($field_product_category = $node->get('field_product_category')) {
      $term_list = $field_product_category->getValue();
      $entity_repository = \Drupal::service('entity.repository');
      $product_category_helper = \Drupal::service('alshaya_acm_product.category_helper');
      if ($parents = $product_category_helper->getBreadcrumbTermList($term_list)) {
        foreach (array_reverse($parents) as $term) {
          $term = $entity_repository->getTranslationFromContext($term);
          $breadcrumb_links[] = Link::createFromRoute($term->getName(), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
        }
      }
      else {
        $title = \Drupal::service('title_resolver')->getTitle(\Drupal::service('request_stack')->getCurrentRequest(), $route_match->getRouteObject());
        $breadcrumb_links[] = Link::createFromRoute($title, 'entity.node.canonical', ['node' => $node->id()]);
      }
    }

    // Setting breadcrumb links for advanced pages.
    $breadcrumb = _alshaya_bp_transac_set_breadcrumb_links($breadcrumb_links);
  }
}

/**
 * Implements hook_sku_product_info_alter().
 */
function alshaya_bp_transac_sku_product_info_alter(array &$data, SKUInterface $sku) {
  if ($sku->bundle() !== 'simple') {
    return;
  }

  // Update those products info having grouping attribute and
  // enabled swatch config for that attribute.
  $grouping_attribute = \Drupal::service('alshaya_color_split.manager')->getGroupingAttribute($sku);
  $grouping_attribute_with_swatch = \Drupal::config('alshaya_color_split.settings')->get('process_swatch_for_grouping_attributes');
  if (!empty($grouping_attribute) && $grouping_attribute_with_swatch) {
    $data['grouping_attribute_with_swatch'] = $grouping_attribute_with_swatch;
  }
}

/**
 * Set breadcrumb links after altering links.
 */
function _alshaya_bp_transac_set_breadcrumb_links($breadcrumb_links) {
  $breadcrumb = new Breadcrumb();
  // This breadcrumb builder is based on a route parameter, and hence it
  // depends on the 'route' cache context.
  $breadcrumb->addCacheContexts(['route']);
  $breadcrumb->setLinks($breadcrumb_links);
  return $breadcrumb;
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function alshaya_bp_transac_pathauto_alias_alter(&$alias, array $context) {
  if ($context['module'] != 'taxonomy' || $context['bundle'] != ProductCategoryTree::VOCABULARY_ID) {
    return;
  }
  // Remove shop-department- from url alias.
  if (str_contains($alias, 'shop-department-')) {
    $alias = str_replace('shop-department-', '', $alias);
  }
}

/**
 * Implements hook_alshaya_srp_sort_settings_form_alter().
 */
function alshaya_bp_transac_form_alshaya_srp_sort_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['sort_options']['#options']['attr_brand'] = t('Brand');
}

/**
 * Implements hook_acq_sku_clean_synced_data_alter().
 */
function alshaya_bp_transac_acq_sku_clean_synced_data_alter(&$context_results) {
  foreach ($context_results as $key => $data) {
    if ($data['type'] == 'taxonomy_term') {
      // Query for categories mapped in I&A pages.
      $value = \Drupal::database()->select('taxonomy_term__field_remove_shop_prefix', 'frsp')
        ->fields('frsp', ['field_remove_shop_prefix_value'])
        ->condition('entity_id', $data['entity_id'])
        ->condition('bundle', 'acq_product_category')
        ->execute()
        ->fetchCol();
      if (reset($value)) {
        unset($context_results[$key]);
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function alshaya_bp_transac_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (($view->id() == 'product_category_level_3' && $view->current_display === 'entity_reference_1') ||
  ($view->id() == 'product_category_level_2_3' && $view->current_display === 'block_2')) {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Boolean field value is made 5 so that terms appear irrespective
        // of TRUE or FALSE.
        if (($condition['field'] == 'taxonomy_term__field_category_include_menu.field_category_include_menu_value') ||
        ($condition['field'] == 'taxonomy_term_field_data_taxonomy_term__parent__taxonomy_term__field_category_include_menu.field_category_include_menu_value')) {
          $condition['value'] = 5;
          $condition['operator'] = '!=';
        }
      }
    }
  }
}

/**
 * Implements hook_alshaya_search_api_facet_block_data_alter().
 */
function alshaya_bp_transac_alshaya_search_api_facet_block_data_alter(&$block_data) {
  if ($block_data['id'] === 'brandcategory') {
    $block_data['visibility']['alshaya_listing_page_types']['id'] = 'alshaya_listing_page_types';
    $block_data['visibility']['alshaya_listing_page_types']['page_types']['product_option_list'] = 1;
    $block_data['visibility']['alshaya_listing_page_types']['show_on_selected_pages'] = '1';
  }
}

/**
 * Implements hook_alshaya_performance_preload_alter().
 */
function alshaya_bp_transac_alshaya_performance_preload_alter(array &$preload) {
  // Footlocker's icon font comes from whitelabel.
  $preload[] = [
    'as' => 'font',
    'href' => '/themes/custom/transac/alshaya_boots/fonts/BootsSharp-Regular.woff2',
    'crossorigin' => 'crossorigin',
    'type' => 'font/woff2',
  ];
  $preload[] = [
    'as' => 'font',
    'href' => '/themes/custom/transac/alshaya_white_label/fonts/alshaya-icons.woff2?D7b5if',
    'crossorigin' => 'crossorigin',
    'type' => 'font/woff2',
  ];
}
