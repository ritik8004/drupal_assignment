<?php

/**
 * @file
 * Module file.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\acq_sku\Entity\SKU;
use Drupal\alshaya_acm_product\SkuImagesHelper;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\acq_commerce\SKUInterface;

/**
 * Implements hook_alshaya_stores_finder_store_update_alter().
 */
function alshaya_spc_alshaya_stores_finder_store_update_alter(&$node, array $store) {
  // Set value in `field_store_type` to denote if it's a store or a collection point.
  if (isset($store['pudo_service'])) {
    $node->get('field_store_type')->setValue($store['pudo_service']);
  }
}

/**
 * Implements hook_alshaya_spc_checkout_build_alter().
 * Add cnc collection point feature related data.
 */
function alshaya_spc_alshaya_spc_checkout_build_alter(array &$build) {
  $config = \Drupal::config('alshaya_spc.collection_points');
  $cnc_collection_points_enabled = $config->get('click_collect_collection_points_enabled');
  $build['#attached']['drupalSettings']['cnc_collection_points_enabled'] = $cnc_collection_points_enabled;
  $build['#cache']['tags'] = array_merge($build['#cache']['tags'], $config->getCacheTags());

  // If collection point feature is not enabled, return.
  if (!$cnc_collection_points_enabled) {
    return;
  }

  $build['#strings'][] = [
    'key' => 'cnc_collection_point',
    'value' => t('Collection Point'),
  ];

  $build['#strings'][] = [
    'key' => 'cnc_find_your_collection_point',
    'value' => t('find your collection point'),
  ];

  $build['#strings'][] = [
    'key' => 'cnc_select',
    'value' => t('select'),
  ];

  $build['#strings'][] = [
    'key' => 'cnc_valid_govtid_message',
    'value' => t('Please ensure that the person collecting this order has a valid government ID and printed copy of the invoice.'),
  ];

  $build['#strings'][] = [
    'key' => 'cnc_selected_collection_point',
    'value' => t('Selected collection point'),
  ];

  $build['#strings'][] = [
    'key' => 'cnc_collection_collect_in_store',
    'value' => t('Collect in'),
  ];

  $build['#attached']['drupalSettings']['cnc_collection_point_map_icon'] = $config->get('click_collect_collection_point_map_icon');
  $build['#attached']['drupalSettings']['cnc_store_map_icon'] = $config->get('click_collect_store_map_icon');
  $build['#attached']['library'][] = 'alshaya_white_label/checkout-pudo-aramex';
}

/**
 * Implements hook_theme().
 */
function alshaya_spc_theme($existing, $type, $theme, $path) {
  return [
    'spc_checkout' => [
      'variables' => [
        'areas' => [],
        'strings' => [],
      ],
    ],
    'spc_confirmation' => [
      'variables' => [
        'strings' => [],
      ],
    ],
    'translatable_strings' => [
      'variables' => [
        'strings' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function alshaya_spc_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Changing text for cart page breadcrumb.
  if ($route_match->getRouteName() == 'acq_cart.cart') {
    $breadcrumb_links = $breadcrumb->getLinks();
    $breadcrumb_links[1]->setText(t('Shopping Bag'));
  }
}

/**
 * Implements hook_block_access().
 */
function alshaya_spc_block_access(Block $block, $operation, AccountInterface $account) {
  // Page title block should not be accessible on cart page.
  if ($operation == 'view' && $block->getPluginId() == 'page_title_block') {
    return AccessResult::forbiddenIf(\Drupal::routeMatch()->getRouteName() == 'acq_cart.cart');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function alshaya_spc_form_sku_base_form_alter(&$form, FormStateInterface $form_state) {
  unset($form['add_to_cart']['#ajax']);
  $form['#attached']['library'][] = 'alshaya_spc/add_to_cart';

  $backend_version = \Drupal::service('alshaya_spc.helper')->getCommerceBackendVersion();
  $form['#attached']['library'][] = 'alshaya_spc/commerce_backend.cart.v' . $backend_version;
}

/**
 * Get middleware url.
 *
 * @return string
 *   Middleware url.
 */
function _alshaya_spc_get_middleware_url() {
  return '/middleware/public';
}

/**
 * Implements hook_alshaya_acm_product_light_product_data_alter().
 */
function alshaya_spc_alshaya_acm_product_light_product_data_alter(SKU $sku, array &$data, $type) {
  if (!empty($data) && $type == 'light' && !empty(\Drupal::requestStack()->getCurrentRequest()->query->get('context'))) {
    \Drupal::moduleHandler()->loadInclude('alshaya_acm_product', 'inc', 'alshaya_acm_product.utility');
    $data['extra_data'] = [];
    $image = alshaya_acm_get_product_display_image($sku, SkuImagesHelper::STYLE_PRODUCT_TEASER, 'cart');
    if (!empty($image)) {
      if ($image['#theme'] == 'image_style') {
        $data['extra_data']['cart_image'] = [
          'url' => ImageStyle::load($image['#style_name'])->buildUrl($image['#uri']),
          'title' => $image['#title'],
          'alt' => $image['#alt'],
        ];
      }
      elseif ($image['#theme'] == 'image') {
        $data['extra_data']['cart_image'] = [
          'url' => $image['#attributes']['src'],
          'title' => $image['#attributes']['title'],
          'alt' => $image['#attributes']['alt'],
        ];
      }
    }
  }
}

/**
 * Get the address form fields with the render order.
 *
 * @return array
 *   Address form fields.
 */
function _alshaya_spc_get_address_fields() {
  $fields = [];

  /* @var \Drupal\alshaya_addressbook\AlshayaAddressBookManager $address_book_manager */
  $address_book_manager = \Drupal::service('alshaya_addressbook.manager');
  $alshaya_addressbook_settings = \Drupal::config('alshaya_addressbook.settings');
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

  $magento_form_fields = $address_book_manager->getMagentoFormFields();
  $field_mapping = array_flip($address_book_manager->getMagentoFieldMappings());
  $address_fields = $address_book_manager->getFieldSortOrder();

  foreach ($magento_form_fields as $field) {
    $key = $field_mapping[$field['attribute_code']] ?? '';
    if (empty($key)
      || !isset($address_fields[$key])
      || $key === 'country_code') {
      continue;
    }

    $fields[$key] = [
      'key' => $field['attribute_code'],
      'label' => $field['store_label'],
      'required' => $field['used_for_shipping_rate'] || $field['required'],
      'visible' => (bool) $field['visible'],
      'order' => (int) $field['sort_order'],
      'maxLength' => $alshaya_addressbook_settings->get('max_length.' . $field['attribute_code'] . '.' . $langcode),
    ];
  }

  return $fields;
}

/**
 * Get mobile country code.
 *
 * @return mixed
 *   Mobile country code.
 */
function _alshaya_spc_get_country_mobile_code() {
  $country_code = _alshaya_custom_get_site_level_country_code();
  return \Drupal::service('mobile_number.util')->getCountryCode($country_code);
}

/**
 * Get location term.
 *
 * @param mixed $location_id
 *   Location id.
 *
 * @return mixed
 *   Location term.
 */
function _alshaya_spc_get_location_term_by_location_id($location_id) {
  $areas_term_helper = \Drupal::service('alshaya_addressbook.area_terms_helper');
  return $areas_term_helper->getLocationTermFromLocationId($location_id);
}

/**
 * Implements hook_alshaya_social_SOICAL_NETWORK_alter().
 */
function alshaya_spc_alshaya_social_social_auth_facebook_alter(&$network, $route_name) {
  $network['text_link'] = in_array($route_name, ['alshaya_spc.checkout.login'])
    ? t('sign in with Facebook')
    : t('sign up with Facebook');
}

/**
 * Implements hook_alshaya_social_SOICAL_NETWORK_alter().
 */
function alshaya_spc_alshaya_social_social_auth_google_alter(&$network, $route_name) {
  $network['text_link'] = in_array($route_name, ['alshaya_spc.checkout.login'])
    ? t('sign in with Google')
    : t('sign up with Google');
}

/**
 * Implements hook_user_logout().
 */
function alshaya_spc_user_logout(AccountInterface $account) {
  $cookies = \Drupal::request()->cookies->all();
  // Expire the cookie set by middleware on logout, So spc can not fetch
  // existing cart related info.
  if (isset($cookies['PHPSESSID'])) {
    $requestTime = \Drupal::time()->getRequestTime();
    setrawcookie('PHPSESSID', '', $requestTime - 3600, '/');
    setrawcookie('PHPSESSID-legacy', '', $requestTime - 3600, '/');
  }
}

/**
 * Global error message.
 *
 * @return string
 *   Global error message.
 */
function _alshaya_spc_global_error_message() {
  return t('Sorry, something went wrong and we are unable to process your request right now. Please try again later.')->render();
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_spc_page_attachments_alter(&$page) {
  $cart_version = \Drupal::service('alshaya_spc.helper')->getCommerceBackendVersion();
  if ($cart_version != 2) {
    return;
  }

  $api_settings = Settings::get('alshaya_api.settings');
  $store_settings = Settings::get('magento_lang_prefix');
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // We proxy the requests via cloudflare, so we use the current domain as is
  // without any language suffix so HTTP_HOST is enough.
  $page['#attached']['drupalSettings']['cart']['url'] = 'https://' . $_SERVER['HTTP_HOST'];

  // Use proxy on local env as here we don't have Cloudflare.
  if (Settings::get('env') === 'local') {
    $page['#attached']['drupalSettings']['cart']['url'] = '/proxy/?url=' . $api_settings['magento_host'];
  }

  // Add the prefix for rest and store code.
  $page['#attached']['drupalSettings']['cart']['url'] .= '/rest/' . $store_settings[$current_language];

  $page['#attached']['drupalSettings']['cart']['retryMaxAttempts'] = Settings::get('alshaya_checkout_settings')['max_native_update_attempts'] ?? 10;
  $page['#attached']['drupalSettings']['cart']['exceptionMessages'] = Settings::get('alshaya_spc.exception_message', []);
}

/**
 * Implements hook_js_settings_alter().
 */
function alshaya_spc_js_settings_alter(&$settings, AttachedAssetsInterface $assets) {
  // Add Magento Customer Id to drupal settings.
  $settings['userDetails']['customerId'] = 0;

  $current_user = \Drupal::currentUser();

  // Load the customer id from account if it is customer account.
  if ($current_user->isAuthenticated() && alshaya_acm_customer_is_customer($current_user)) {
    $user = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->load($current_user->id());

    $settings['userDetails']['customerId']= (int) $user->get('acq_customer_id')->getString();

    // For V2, add user token to drupalSettings for direct backend calls.
    if (\Drupal::service('alshaya_spc.helper')->getCommerceBackendVersion() == 2) {
      $settings['userDetails']['customerToken'] = \Drupal::service('alshaya_spc.customer_helper')
        ->getCustomerTokenBySocialDetail(
          $user->get('mail')->getString()
        );
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function alshaya_spc_preprocess_page(&$variables) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  $strings = [
    '#theme' => 'translatable_strings',
    '#strings' => [
      [
        'key' => 'backend_obsolete_version',
        'value' => t('We have upgraded your experience, please refresh the page and try again.'),
      ],
      [
        'key' => 'check_area_availability',
        'value' => t('Check availability in your area', [], ['context' => 'delivery_area']),
      ],
      [
        'key' => 'governate_label',
        'value' => t('Select @label', [], ['context' => 'delivery_area']),
      ],
    ],
  ];
  $variables['page']['content']['commerce_backend'] = $strings;
}

/**
 * Implements hook_alshaya_acm_product_build_alter().
 */
function alshaya_spc_alshaya_acm_product_build_alter(&$build, SKUInterface $sku, $context = 'pdp') {
  if ($context !== 'pdp') {
    return;
  }
  $express_delivery_config = \Drupal::config('alshaya_spc.express_delivery');

  // Return if express delivery feature is disabled.
  // And product is not buyable.
  // Otherwise show express delivery options.
  if (!($express_delivery_config->get('status')) || !(alshaya_acm_product_is_buyable($sku))) {
    return;
  }
  // Adding address related configs to load area list block.
  $country_code = _alshaya_custom_get_site_level_country_code(TRUE);
  $build['#attached']['drupalSettings']['expressDelivery'] = [
    'enabled' => TRUE,
    'deliveryOptionsOrder' => $express_delivery_config->get('delivery_options_order'),
  ];
  $build['#attached']['drupalSettings']['country_code'] = $country_code;
  $build['#attached']['drupalSettings']['alshaya_spc']['address_fields'] = _alshaya_spc_get_address_fields();

  $build['express_delivery']['#markup'] = '<div id="express-delivery-options"></div>';
  $build['#attached']['library'][] = 'alshaya_spc/express_delivery';
  $build['#attached']['library'][] = 'alshaya_white_label/sameday-express-delivery';

  unset($build['home_delivery']);
}
