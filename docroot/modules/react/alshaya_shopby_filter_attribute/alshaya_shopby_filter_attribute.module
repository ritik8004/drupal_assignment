<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Url;
use Drupal\alshaya_acm_product_category\ProductCategoryTree;

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_shopby_filter_attribute_page_attachments_alter(&$page) {
  // Add cache tags for the module's settings.
  $page['#cache']['tags'] = Cache::mergeTags($page['#cache']['tags'], ['config:alshaya_shopby_filter_attribute.settings']);

  // Load shop by filter attribute module's configs.
  $shopby_filter_attribute_configs = \Drupal::service('alshaya_shopby_filter_attribute.helper')->getShopByFilterAttributeConfigs();

  // Return if feature is disabled.
  if (!$shopby_filter_attribute_configs['enabled']) {
    return;
  }

  // Pass the configs in drupal settings to use on front-end.
  $page['#attached']['drupalSettings']['shopByFilterAttribute'] = $shopby_filter_attribute_configs;

  // Attach the library if feature is enabled.
  $page['#attached']['library'][] = 'alshaya_shopby_filter_attribute/menu_attribute_navigation';
  $page['#attached']['library'][] = 'alshaya_white_label/megamenu-shop-by-filter';
}

/**
 * Implements hook_query_TAG_NAME_alter().
 */
function alshaya_shopby_filter_attribute_query_product_category_child_terms_alter(AlterableInterface $query) {
  // Return if feature is not enabled.
  if (!\Drupal::service('alshaya_shopby_filter_attribute.helper')->isShopByFilterAttributeEnabled()) {
    return;
  }

  // Add shopby_filter_attribute field.
  $query->leftJoin('taxonomy_term__field_shopby_filter_attribute', 'shopby_filter_attribute', 'shopby_filter_attribute.entity_id=tfd.tid');
  $query->addField('shopby_filter_attribute', 'field_shopby_filter_attribute_value', 'shopby_filter_attribute');

  // Add shopby_filter_target_cid field.
  $query->leftJoin('taxonomy_term__field_shopby_filter_target_cid', 'shopby_filter_target_cid', 'shopby_filter_target_cid.entity_id=tfd.tid');
  $query->addField('shopby_filter_target_cid', 'field_shopby_filter_target_cid_value', 'shopby_filter_target_cid');
}

/**
 * Implements hook_acq_sku_commerce_category_alter().
 */
function alshaya_shopby_filter_attribute_acq_sku_commerce_category_alter(TermInterface $term, array $category, $parent) {
  if (!empty($category['custom_attributes'])) {
    // Add the new attribute field for show_filters_shoe_size menu items.
    if (isset($category['custom_attributes']['show_filters_shoe_size'])) {
      $term->get('field_shopby_filter_attribute')->setValue($category['custom_attributes']['show_filters_shoe_size']['value']);
    }

    // Add the new attribute field for target_category menu items. This field
    // contains the targetted commerce category ID for shopy by filter attribute
    // menu items.
    if (isset($category['custom_attributes']['target_category'])) {
      $term->get('field_shopby_filter_target_cid')->setValue($category['custom_attributes']['target_category']['value']);
    }
  }
}

/**
 * Implements hook_alshaya_acm_product_category_tree_data_alter().
 */
function alshaya_shopby_filter_attribute_alshaya_acm_product_category_tree_data_alter(&$data, $term) {
  // Load shop by filter attribute module's configs.
  $shopby_filter_attribute_configs = \Drupal::service('alshaya_shopby_filter_attribute.helper')->getShopByFilterAttributeConfigs();

  // Return if feature is disabled.
  if (!$shopby_filter_attribute_configs['enabled']) {
    return;
  }

  // Return if the shopby_filter_attribute parameter is not set or false.
  if (!isset($term->shopby_filter_attribute)
    || !((bool) $term->shopby_filter_attribute)) {
    return;
  }

  // Adding class for CSS selector.
  $data[$term->tid]['class'][] = 'shop-by-filter-attribute';

  // Identify the parent target ID for the shop by filter attribute menu items
  // path. If $term->shopby_filter_target_cid contains a value i.e. a commerce
  // target category ID, we need to get the associate taxonomy term ID and use
  // that instead of $term->parent_target_id.
  $parent_target_id = $term->parent_target_id;
  if (isset($term->shopby_filter_target_cid)
    && !empty($term->shopby_filter_target_cid)) {
    // Get term ID from commerce Id.
    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $term_ids = $term_storage->getQuery()
      ->condition('field_commerce_id', $term->shopby_filter_target_cid)
      ->condition('vid', ProductCategoryTree::VOCABULARY_ID)
      ->execute();

    if (!empty($term_ids)) {
      $term_id = reset($term_ids);
      $parent_target_id = $term_id;
    }
  }

  // Add necessary parameters on this menu item itself for React component to
  // utilise and display the filters data.
  // Get the hierarchy data from the target term ID for english language always.
  // This is because our filters accepts EN data only.
  /** @var \Drupal\alshaya_acm_product_category\Service\ProductCategoryPage $product_category_page */
  $product_category_page = \Drupal::service('alshaya_acm_product_category.page');
  $term_hierarchy_data = $product_category_page->getCurrentSelectedCategory('en', $parent_target_id);

  $path = Url::fromRoute(
    'entity.taxonomy_term.canonical',
    ['taxonomy_term' => $parent_target_id],
    ['language' => \Drupal::languageManager()->getCurrentLanguage()]
  )->toString(TRUE)->getGeneratedUrl();

  $data[$term->tid]['data_target_url'] = $path ?? '';

  // Pass the data_nav_attr for element identification that will be used to
  // show filter menu items.
  $data[$term->tid]['data_nav_attr'] = $shopby_filter_attribute_configs['menuFilterAttributes'] ?? '';

  // Both these data)hierarchy and data_rule_context will be used in React
  // component to fetch available filter options in given context.
  $data[$term->tid]['data_hierarchy'] = $term_hierarchy_data['hierarchy'] ?? '';
  $data[$term->tid]['data_rule_context'] = $term_hierarchy_data['ruleContext'] ? implode(',', $term_hierarchy_data['ruleContext']) : '';
}
