<?php

/**
 * @file
 * Contains alshaya_aura_react.module.
 */

use Drupal\alshaya_user\Plugin\Block\MyAccountLinks;
use Drupal\alshaya_aura_react\Constants\AuraStatus;
use Drupal\user\Entity\User;
use Drupal\alshaya_user\AlshayaUserInfo;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\alshaya_aura_react\Constants\AuraDictionaryApiConstants;

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_aura_react_page_attachments_alter(array &$page) {
  $aura_helper = \Drupal::service('alshaya_aura_react.aura_helper');
  $settings['enabled'] = $aura_helper->isAuraEnabled();

  // Do not proceed if AURA is not enabled.
  if ($settings['enabled'] !== TRUE) {
    return;
  }

  $uid = \Drupal::currentUser()->id();
  $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);

  if (!empty($user)) {
    $settings['userDetails'] = [
      'id' => $uid,
      'email' => \Drupal::currentUser()->getEmail(),
      'userName' => AlshayaUserInfo::getFullName($user, ' ') ?? '',
      'loyaltyStatus' => $aura_helper->getUserAuraStatus(),
      'tier' => $aura_helper->getUserAuraTier(),
    ];
  }

  $settings['allAuraTier'] = \Drupal::service('alshaya_aura_react.aura_api_helper')->getAuraApiConfig([AuraDictionaryApiConstants::APC_TIER_TYPES], \Drupal::languageManager()->getCurrentLanguage()->getId())[AuraDictionaryApiConstants::APC_TIER_TYPES];
  $settings['allAuraStatus'] = AuraStatus::ALL_AURA_STATUS;

  $page['#attached']['library'][] = 'alshaya_aura_react/aura_header_library';
  $page['#attached']['library'][] = 'alshaya_white_label/aura-loyalty-global';

  $current_route = \Drupal::routeMatch();
  // Attach aura library on cart/checkout page.
  if (in_array($current_route->getRouteName(), ['acq_cart.cart', 'alshaya_spc.checkout'])) {
    $page['#attached']['library'][] = 'alshaya_white_label/aura-loyalty-spc';
  }
  elseif ($current_route->getRouteName() === 'alshaya_spc.checkout.confirmation') {
    $page['#attached']['library'][] = 'alshaya_white_label/aura-loyalty-spc-confirmation';
  }
  elseif ($current_route->getRouteName() === 'entity.node.canonical' && $current_route->getParameter('node')->bundle() === 'acq_product') {
    $page['#attached']['library'][] = 'alshaya_aura_react/alshaya_aura_pdp';
  }
  elseif ($current_route->getRouteName() === 'entity.user.canonical') {
    $page['#attached']['library'][] = 'alshaya_aura_react/alshaya_aura_my_accounts';
  }
  $settings['config'] = $aura_helper->getAuraConfig();
  $settings = array_merge($settings, \Drupal::service('alshaya_aura_react.aura_api_helper')->prepareAuraDictionaryApiData());

  $page['#attached']['drupalSettings']['aura'] = $settings;
}

/**
 * Implements hook_alshaya_my_account_links_alter().
 */
function alshaya_aura_react_alshaya_my_account_links_alter(array &$links) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  // Add My Aura link.
  $links['alshaya_loyalty_club'] = [
    'text' => t('My AURA'),
    'route' => 'alshaya_aura_react.my_loyalty_club',
    'weight' => 11,
  ];
}

/**
 * Implements hook_theme().
 */
function alshaya_aura_react_theme() {
  $theme = [
    'my_loyalty_club' => [
      'variables' => [
        'strings' => [],
      ],
    ],
    'my_accounts_aura_block' => [
      'variables' => [
        'strings' => [],
      ],
    ],
    'aura_rewards_header' => [
      'variables' => [
        'strings' => [],
      ],
      'template' => 'aura-rewards-header',
    ],
  ];

  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function alshaya_aura_react_preprocess_html(&$variables) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  if ($variables['logged_in']) {
    $my_account_links_routes = array_column(MyAccountLinks::getMyAccountLinks(), 'route');
    if (in_array(\Drupal::routeMatch()->getRouteName(), $my_account_links_routes)) {
      // Add class to body to distinguish between my account and other pages.
      $variables['attributes']['class'][] = 'aura-my-account';
    }
  }
  // Aura Enabled class.
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('aura-enabled');
}

/**
 * Implements hook_alshaya_acm_customer_update_account_alter().
 */
function alshaya_aura_react_alshaya_acm_customer_update_account_alter(User $user, array $customer) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  if (isset($customer['extension'])) {
    // Update user aura status and tier in drupal if changed.
    if (!empty($customer['extension']['apc_link'])
      && $customer['extension']['apc_link'] !== $user->get('field_aura_loyalty_status')->getString()) {
      $user->set('field_aura_loyalty_status', $customer['extension']['apc_link']);
    }
    if (!empty($customer['extension']['tier_info'])
      && $customer['extension']['tier_info'] !== $user->get('field_aura_tier')->getString()) {
      $user->set('field_aura_tier', $customer['extension']['tier_info']);
    }
  }
}

/**
 * Implements hook_alshaya_spc_order_details_settings_alter().
 */
function alshaya_aura_react_alshaya_spc_order_details_settings_alter(&$settings, $order) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  if (isset($order['extension']['apc_accrued_points'])) {
    $settings['order_details']['accruedPoints'] = $order['extension']['apc_accrued_points'] ?? 0;
  }

  if (isset($order['extension']['apc_redeemed_points'])) {
    $settings['order_details']['redeemedPoints'] = $order['extension']['apc_redeemed_points'] ?? 0;
  }

  // Add `paidWithAura` and `balancePayable` in totals to show
  // with order summary on order confirmation page.
  if (isset($order['base_total_paid'])) {
    $settings['order_details']['totals']['paidWithAura'] = $order['base_total_paid'] ?? 0;
  }
  if (isset($order['base_total_due'])) {
    $settings['order_details']['totals']['balancePayable'] = $order['base_total_due'] ?? 0;
  }
}

/**
 * Implements hook_block_view_alter().
 */
function alshaya_aura_react_block_view_alter(&$build, $block) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  if ($block->getPluginId() === 'alshaya_my_account_links') {
    $build['#pre_render'][] = '_alshaya_aura_react_my_account_block_pre_render';
  }
  if ($block->getPluginId() === 'system_menu_block:account') {
    $build['#pre_render'][] = '_alshaya_aura_react_system_menu_block_account_pre_render';
  }
}

/**
 * Pre render callback for building My Account Links block.
 *
 * @param array $build
 *   The block build array.
 *
 * @return array
 *   The altered block build array.
 */
function _alshaya_aura_react_my_account_block_pre_render(array $build) {
  $build['content']['my_account_my_aura_block_root'] = [
    '#markup' => '<div id="my-accounts-aura-mobile"></div>',
    '#weight' => -1,
  ];

  $build['#attributes']['class'][] = 'aura-enabled';

  return $build;
}

/**
 * Pre render callback for system_menu_block:account block.
 *
 * @param array $build
 *   The block build array.
 *
 * @return array
 *   The altered block build array.
 */
function _alshaya_aura_react_system_menu_block_account_pre_render(array $build) {
  $build['content']['#prefix'] = '<div id="aura-mobile-header-signin-register"></div>';
  return $build;
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function alshaya_aura_react_block_view_page_title_block_alter(&$build, $block) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  // Add edit account link beside page title block.
  if (\Drupal::routeMatch()->getRouteName() === 'entity.user.canonical') {
    $build['#pre_render'][] = '_alshaya_aura_react_page_title_pre_render';
  }
}

/**
 * Pre render callback for page_title_block block.
 *
 * @param array $build
 *   The block build array.
 *
 * @return array
 *   The altered block build array.
 */
function _alshaya_aura_react_page_title_pre_render(array $build) {
  $edit_account = [
    '#type' => 'link',
    '#title' => t('edit account details'),
    '#url' => Url::fromRoute('entity.user.edit_form', ['user' => \Drupal::currentUser()->id()]),
    '#attributes' => [
      'class' => ['button', 'button-wide', 'edit-account'],
    ],
  ];

  $build['content']['#suffix'] = \Drupal::service('renderer')->render($edit_account);

  return $build;
}

/**
 * Implements hook_alshaya_acm_customer_alshaya_user_recent_orders_build_alter().
 */
function alshaya_aura_react_alshaya_acm_customer_alshaya_user_recent_orders_build_alter(array &$build) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  if (\Drupal::routeMatch()->getRouteName() === 'entity.user.canonical') {
    // On my account page, remove edit account link because we are adding
    // it with page title when aura enabled.
    unset($build['edit_account']);
  }

  return $build;
}

/**
 * Implements hook_preprocess_alshaya_main_menu_level1() for menu template.
 */
function alshaya_aura_react_preprocess_alshaya_main_menu_level1(array &$variables) {
  $variables['aura_enabled'] = \Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled();
}

/**
 * Implements hook_preprocess_node().
 */
function alshaya_aura_react_preprocess_node(&$variables) {
  if ($variables['node']->bundle() === 'acq_product') {
    $variables['aura_enabled'] = \Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled();
  }
}

/**
 * Implements hook_alshaya_spc_checkout_build_alter().
 */
function alshaya_aura_react_alshaya_spc_checkout_build_alter(array &$build) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  \Drupal::moduleHandler()->loadInclude('alshaya_aura_react', 'inc', 'alshaya_aura_react.static_strings');
  $build['#strings'] = array_merge($build['#strings'], _alshaya_aura_static_strings());

  // Add aura dictionary api data in drupalSettings.
  $build['#attached']['drupalSettings']['aura'] = \Drupal::service('alshaya_aura_react.aura_api_helper')->prepareAuraDictionaryApiData();
}

/**
 * Implements hook_alshaya_spc_cart_build_alter().
 */
function alshaya_aura_react_alshaya_spc_cart_build_alter(array &$build) {
  // Do not proceed if AURA is not enabled.
  if (\Drupal::service('alshaya_aura_react.aura_helper')->isAuraEnabled() !== TRUE) {
    return;
  }

  // Add aura dictionary api data in drupalSettings.
  $build['#attached']['drupalSettings']['aura'] = \Drupal::service('alshaya_aura_react.aura_api_helper')->prepareAuraDictionaryApiData();
}
