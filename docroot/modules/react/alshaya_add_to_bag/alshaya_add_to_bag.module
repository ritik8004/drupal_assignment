<?php

/**
 * @file
 * Module file.
 */

use Drupal\acq_commerce\SKUInterface;
use Drupal\acq_sku\Entity\SKU;
use Drupal\Core\Cache\Cache;
use Drupal\search_api\IndexInterface;
use Drupal\alshaya_search_algolia\Service\AlshayaAlgoliaIndexHelper;
use Drupal\alshaya_add_to_bag\Services\AddToBagIndexHelper;

/**
 * Implements hook_theme().
 */
function alshaya_add_to_bag_theme() {
  return [
    'add_to_bag_strings' => [
      'variables' => [
        'strings' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function alshaya_add_to_bag_page_attachments_alter(array &$page) {
  // Ignore admin paths.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  // Skip the processing of add to bag for checkout and confirmation page.
  if (in_array(\Drupal::routeMatch()->getRouteName(), [
    'alshaya_spc.checkout',
    'alshaya_spc.checkout.confirmation',
  ])) {
    return;
  }

  /** @var \Drupal\alshaya_add_to_bag\Services\AddToBagHelper $add_to_bag_helper */
  $add_to_bag_helper = \Drupal::service('alshaya_add_to_bag.helper');
  $add_to_bag_feature_status = $add_to_bag_helper->isAddToBagFeatureEnabled();
  $add_to_bag_settings = \Drupal::config('alshaya_add_to_bag.settings');

  $page['#attached']['drupalSettings']['add_to_bag']['display_addtobag'] = $add_to_bag_feature_status;
  $page['#cache']['tags'] = Cache::mergeTags($page['#cache']['tags'] ?? [], $add_to_bag_settings->getCacheTags());

  // Allow other modules to update the feature status so all the required
  // libraries and settings will be available on the page but the main
  // feature status in drupalSettings still says false.
  $add_to_bag_altered_feature_status = &drupal_static('add_to_bag_altered_feature_status', $add_to_bag_feature_status);
  \Drupal::moduleHandler()->alter('alshaya_add_to_bag_feature_status', $add_to_bag_altered_feature_status);

  $page['#attached']['drupalSettings']['add_to_bag']['gtm_product_push'] = FALSE;
  if (!$add_to_bag_altered_feature_status) {
    return;
  }

  $add_to_bag_helper->setAddToBagCommonSettingsToBuild($page);
}

/**
 * Implements hook_preprocess_page().
 */
function alshaya_add_to_bag_preprocess_page(&$variables) {
  \Drupal::moduleHandler()->loadInclude('alshaya_add_to_bag', 'inc', 'alshaya_add_to_bag.static_strings');
  $add_to_bag_strings = [
    '#strings' => _alshaya_add_to_bag_strings(),
    '#theme' => 'add_to_bag_strings',
  ];

  $status = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  // For 404 page, page.content is not rendered so we add it to pre_content.
  if ($status && $status->getStatusCode() == 404) {
    $variables['page']['pre_content']['add_to_bag_strings'] = $add_to_bag_strings;
  }
  else {
    $variables['page']['content']['add_to_bag_strings'] = $add_to_bag_strings;
  }
}

/**
 * Implements hook_search_api_algolia_objects_alter().
 */
function alshaya_add_to_bag_search_api_algolia_objects_alter(array &$objects, IndexInterface $index, array $items) {
  foreach ($objects as $id => &$object) {
    if (empty($object['sku'])) {
      continue;
    }
    $node = $items[$id]->getOriginalObject()->getValue();
    $atbAttributeName = AddToBagIndexHelper::ADD_TO_BAG_ATTRIBUTE;
    // Process index object for product list index.
    if ($index->id() == AlshayaAlgoliaIndexHelper::PRODUCT_LIST_INDEX) {
      $nodeLanguages = $node->getTranslationLanguages();
      foreach ($nodeLanguages as $lan_key => $lan_value) {
        $node_object = $node->getTranslation($lan_key);
        $atb_attribute = _alshaya_add_to_bag_get_language_specific_data($lan_key, $object['sku'], $node_object);
        if ($atb_attribute) {
          $object[$atbAttributeName][$lan_key] = $atb_attribute;
        }
      }
    }
    else {
      $atb_attribute = _alshaya_add_to_bag_get_language_specific_data($object['search_api_language'], $object['sku'], $node);
      if ($atb_attribute) {
        $object[$atbAttributeName] = $atb_attribute;
      }
    }
  }
}

/**
 * Implements hook_alshaya_product_list_exclude_attribute_alter().
 */
function alshaya_add_to_bag_alshaya_product_list_exclude_attribute_alter(array &$excludedAttributes) {
  $atbAttributeName = AddToBagIndexHelper::ADD_TO_BAG_ATTRIBUTE;
  $excludedAttributes[] = $atbAttributeName;
}

/**
 * Get Language specific SKU and Node.
 */
function _alshaya_add_to_bag_get_language_specific_data($lang, $sku_data, $node) {
  $sku = SKU::loadFromSku($sku_data, $lang);
  if (!($sku instanceof SKUInterface)) {
    return FALSE;
  }
  if ($sku->language()->getId() != $node->language()->getId()) {
    return FALSE;
  }
  $value = \Drupal::service('alshaya_add_to_bag.index_helper')->getItemsToIndex($node, $sku, $lang);
  return $value;
}

/**
 * Implements hook_library_info_alter().
 */
function alshaya_add_to_bag_library_info_alter(&$libraries, $extension) {
  // Added add to bag utility as dependency.
  if ($extension === 'alshaya_algolia_react') {
    $libraries['autocomplete']['dependencies'][] = 'alshaya_acm_product/add_to_bag_utility';
  }
}
