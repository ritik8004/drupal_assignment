<?php

/**
 * @file
 * Install, update and uninstall hooks for the Lightning Extender subprofile.
 */

use Drupal\Core\Site\Settings;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_update_N().
 *
 * Migrate paragraphs content from asymmetric to symmetric translations.
 */
function alshaya_update_8012() {
  /* @var \Drupal\alshaya_config\AlshayaConfigManager $config_manager */
  $config_manager = \Drupal::service('alshaya_config.manager');

  // First update config of normal fields which are inside paragraph.
  $configs = [
    'field.field.paragraph.product_carousel_category.field_category_carousel',
    'field.field.paragraph.product_carousel_category.field_category_carousel_limit',
    'field.field.paragraph.product_carousel_category.field_use_as_accordion',
  ];
  $config_manager->updateConfigs($configs, 'alshaya_paragraphs_transac', 'optional');

  // First update config of normal fields which are inside paragraph.
  $configs = [
    'field.field.paragraph.delivery_usp_block.field_arrow_color',
    'field.field.paragraph.delivery_usp_block.field_usp_text_font_color',
    'field.field.paragraph.delivery_usp_block.field_usp_timer',
    'field.field.paragraph.slug_banner.field_mobile_slug_bkg_color',
  ];
  $config_manager->updateConfigs($configs, 'alshaya_paragraphs', 'install');

  // Do migration now.
  /** @var \Drupal\alshaya_paragraphs\Helper\MigrateSymmetricToAsymmetric $migrateUtility */
  $migrateUtility = \Drupal::service('alshaya_paragraphs.migrate_utility');

  // Load all advanced page nodes.
  $entities = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'advanced_page',
  ]);
  foreach ($entities as $entity) {
    $migrateUtility->migrateEntity($entity);

    // Some contents are missed or improperly updated on first go. We do it
    // again to ensure everything is proper after migration.
    $migrateUtility->migrateEntity($entity);
  }

  $block_ids = \Drupal::database()->query('SELECT distinct(entity_id) FROM block_content__field_paragraph_content')->fetchAll();
  foreach ($block_ids as $block_id) {
    $block = \Drupal::entityTypeManager()->getStorage('block_content')->load($block_id->entity_id);
    $migrateUtility->migrateEntity($block);
  }
}

/**
 * Implements hook_update_N().
 *
 * Uninstall lightning_scheduler module.
 */
function alshaya_update_8011() {
  if (\Drupal::moduleHandler()->moduleExists('lightning_media_audio')) {
    \Drupal::service('module_installer')->uninstall(['lightning_media_audio']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Migrate paragraphs content from asymmetric to symmetric translations.
 */
function alshaya_update_8010() {
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');

  // First make normal fields inside paragraphs translatable.
  $configs = [
    'field.field.paragraph.product_carousel_category.field_category_carousel_title',
    'field.field.paragraph.product_carousel_category.field_view_all_text',
  ];

  $manager->updateConfigs($configs, 'alshaya_paragraphs_transac', 'optional');

  $configs = [
    'field.field.paragraph.delivery_usp_block.field_usp_text',
    'field.field.paragraph.delivery_usp_block.field_usp_text_background',
    'field.field.paragraph.promo_block.field_margin_d_t',
    'field.field.paragraph.promo_block.field_margin_mobile',
    'field.field.paragraph.promo_block.field_promo_block_seo_text',
    'field.field.paragraph.promo_block.field_promo_block_seo_title',
    'field.field.paragraph.promo_block.field_promotion_image_mobile',
    'field.field.paragraph.section_divider.field_section_divider_text',
    'field.field.paragraph.offers_bordered.field_banner',
    'field.field.paragraph.image_title_subtitle.field_banner'
  ];

  $manager->updateConfigs($configs, 'alshaya_paragraphs');

  // Do migration now.
  /** @var \Drupal\alshaya_paragraphs\Helper\MigrateSymmetricToAsymmetric $migrateUtility */
  $migrateUtility = \Drupal::service('alshaya_paragraphs.migrate_utility');

  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'advanced_page',
  ]);

  foreach ($nodes as $node) {
    $migrateUtility->migrateEntity($node);

    // Some contents are missed or improperly updated on first go. We do it
    // again to ensure everything is proper after migration.
    $migrateUtility->migrateEntity($node);
  }

  $block_ids = \Drupal::database()->query('SELECT distinct(entity_id) FROM block_content__field_paragraph_content')->fetchAll();
  foreach ($block_ids as $block_id) {
    $block = \Drupal::entityTypeManager()->getStorage('block_content')->load($block_id->entity_id);
    $migrateUtility->migrateEntity($block);
  }

  // Make paragraph fields non-translatable now.
  $configs = [
    'alshaya_acm_product_category' => [
      'field.field.taxonomy_term.acq_product_category.field_main_menu_highlight',
    ],
    'alshaya_paragraph_block' => [
      'field.field.block_content.paragraph_block.field_paragraph_content',
    ],
    'alshaya_advanced_page' => [
      'field.field.node.advanced_page.field_banner',
      'field.field.node.advanced_page.field_delivery_banner',
      'field.field.node.advanced_page.field_promo_banner_full_width',
      'field.field.node.advanced_page.field_promo_blocks',
      'field.field.node.advanced_page.field_related_info',
      'field.field.node.advanced_page.field_slider',
    ],
    'alshaya_paragraphs' => [
      'field.field.paragraph.1_row_1_col.field_promo_block',
      'field.field.paragraph.1_row_1_col_dept.field_promo_block',
      'field.field.paragraph.1_row_1st_col_2_row_2nd_col.field_1st_col_promo_block',
      'field.field.paragraph.1_row_1st_col_2_row_2nd_col.field_2nd_col_promo_block',
      'field.field.paragraph.1_row_2_col.field_1_row_2_col',
      'field.field.paragraph.1_row_2_col_1_2_dept.field_1_row_2_col_1',
      'field.field.paragraph.1_row_2_col_1_2_dept.field_1_row_2_col_2',
      'field.field.paragraph.1_row_2_col_2_1_dept.field_1_row_2_col_1',
      'field.field.paragraph.1_row_2_col_2_1_dept.field_1_row_2_col_2',
      'field.field.paragraph.1_row_2_col_dept.field_1_row_2_col',
      'field.field.paragraph.1_row_3_col.field_1_row_promo_block',
      'field.field.paragraph.1_row_3_col_dept.field_1_row_promo_block',
      'field.field.paragraph.1_row_3_col_text.field_promo_block',
      'field.field.paragraph.banner.field_promo_block_button',
      'field.field.paragraph.promo_block.field_promo_block_button',
    ],
  ];

  foreach ($configs as $module => $fields) {
    $manager->updateConfigs($fields, $module);
  }
}

/**
 * Implements hook_update_N().
 *
 * Uninstall features_ui and features module.
 */
function alshaya_update_8009() {
  if (\Drupal::moduleHandler()->moduleExists('features_ui')) {
    \Drupal::service('module_installer')->uninstall(['features_ui']);
  }

  if (\Drupal::moduleHandler()->moduleExists('features')) {
    \Drupal::service('module_installer')->uninstall(['features']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Uninstall lightning_scheduler module.
 */
function alshaya_update_8008() {
  if (\Drupal::moduleHandler()->moduleExists('lightning_scheduler')) {
    \Drupal::service('module_installer')->uninstall(['lightning_scheduler']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Install alshaya_paragraph_block module.
 */
function alshaya_update_8007() {
  \Drupal::service('module_installer')->install(['alshaya_paragraph_block']);
}

/**
 * Implements hook_update_N().
 *
 * Update header for 'restrict_login_by_ip' module.
 */
function alshaya_update_8006() {
  alshaya_config_install_configs(['restrict_role_login_by_ip.settings'], 'alshaya', 'optional');
}

/**
 * Implements hook_update_N().
 *
 * Enable 'restrict_login_by_ip' module.
 * Enable 'alshay_image_sitemap' module.
 */
function alshaya_update_8005() {
  \Drupal::service('module_installer')->install(['restrict_role_login_by_ip']);
  alshaya_config_install_configs(['restrict_role_login_by_ip.settings'], 'alshaya', 'optional');

  // Install Alshaya Image Sitemap.
  \Drupal::service('module_installer')->install(['alshaya_image_sitemap']);
}

/**
 * Implements hook_update_N().
 *
 * Enable 'alshaya_amp' module.
 */
function alshaya_update_8004() {
  \Drupal::service('module_installer')->install(['alshaya_amp']);
}

/**
 * Implements hook_update_N().
 *
 * Disable admin modules.
 */
function alshaya_update_8003() {
  \Drupal::service('module_installer')->uninstall(['field_ui']);
  \Drupal::service('module_installer')->uninstall(['quickedit']);
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_performance on all sites on all environments.
 */
function alshaya_update_8002() {
  \Drupal::service('module_installer')->install(['alshaya_performance']);
}

/**
 * Implements hook_update_N().
 *
 * Enable acquia_purge on ACSF environments.
 */
function alshaya_update_8001() {
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    \Drupal::service('module_installer')->install(['acquia_purge']);

    // Enable acquia_purge purger.
    /** @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers */
    $purge_purgers = \Drupal::service('purge.purgers');
    $purgers_enabled = $purge_purgers->getPluginsEnabled();
    $purgers_enabled[$purge_purgers->createId()] = 'acquia_purge';
    $purge_purgers->setPluginsEnabled($purgers_enabled);
  }
}

/**
 * Implements hook_install().
 */
function alshaya_install() {
  // Prerequisite for google_tag module.
  $uri = "public://google_tag";
  file_prepare_directory($uri, FILE_CREATE_DIRECTORY);

  // Remove all roles created by Lightning.
  $coreRoles = [
    'anonymous',
    'authenticated',
    'administrator',
  ];
  foreach (user_roles() as $role) {
    if (!in_array($role->id(), $coreRoles)) {
      $role->delete();
    }
  }

  // Stop lightning from creating user roles in future.
  \Drupal::configFactory()->getEditable('lightning_roles.settings')->setData([
    'content_roles' => [
      'creator' => [
        'enabled' => FALSE,
      ],
      'reviewer' => [
        'enabled' => FALSE,
      ],
    ],
  ])->save();

  // Set the page cache for 30 minutes.
  \Drupal::configFactory()->getEditable('system.performance')
    ->set('cache', [
      'page' => [
        'max_age' => 1800,
      ],
    ])
    ->save();

  // TODO: List the modules common for transac and non-transac profiles.
  $modules = [
    'alshaya_paragraph_block',
  ];

  global $_alshaya_modules_installed;
  $_alshaya_modules_installed = [];

  foreach ($modules as $module) {
    \Drupal::service('module_installer')->install([$module]);
    $_alshaya_modules_installed[] = $module;
  }

  \Drupal::moduleHandler()->invokeAll('alshaya_profile_installed', ['alshaya', $modules]);
  \Drupal::service('module_installer')->uninstall(['field_ui']);
  \Drupal::service('module_installer')->uninstall(['quickedit']);
}

/**
 * Implements hook_alshaya_transac_profile_installed().
 *
 * This is not real hook implementation as we are in profile file. This
 * function is called at the end of alshaya_transac.install.
 */
function alshaya_sub_profile_installed($profile, $modules) {
  alshaya_final_common_install_task($profile, $modules);
}

/**
 * This is the very last function called at the end of the installation.
 */
function alshaya_final_common_install_task($profile) {
  global $_alshaya_modules_installed;

  // Get the modules to be enabled for this env.
  $additional_modules = Settings::get('additional_modules');

  // Additional modules which are to be enabled are to be done here
  // as it cant be done in the hook_install.
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    $additional_modules[] = 'shield';
    $additional_modules[] = 'acquia_purge';
  }

  foreach ($additional_modules as $module) {
    \Drupal::service('module_installer')->install([$module]);
  }

  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    // Enable acquia_purge purger.
    /** @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers */
    $purge_purgers = \Drupal::service('purge.purgers');
    $purgers_enabled = $purge_purgers->getPluginsEnabled();
    $purgers_enabled[$purge_purgers->createId()] = 'acquia_purge';
    $purge_purgers->setPluginsEnabled($purgers_enabled);
  }

  if (\Drupal::moduleHandler()->moduleExists('shield')) {
    \Drupal::getContainer()->get('config.factory')
      ->getEditable('shield.settings')
      ->set('allow_cli', TRUE)
      ->set('user', Settings::get('alshaya_custom_shield_default_user'))
      ->set('pass', Settings::get('alshaya_custom_shield_default_pass'))
      ->set('print', '')
      ->save();
  }

  \Drupal::moduleHandler()->invokeAll('alshaya_profile_installed_final_task', [$profile, $_alshaya_modules_installed]);

  // Delete basic page content type, we don't need this in Alshaya.
  $node_type = NodeType::load('page');
  if ($node_type) {
    $node_type->delete();
  }
}
