<?php

/**
 * @file
 * Install, update and uninstall hooks for the Lightning Extender subprofile.
 */

use Drupal\Core\Site\Settings;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_performance on all sites on all environments.
 */
function alshaya_update_8002() {
  \Drupal::service('module_installer')->install(['alshaya_performance']);
}

/**
 * Implements hook_update_N().
 *
 * Enable acquia_purge on ACSF environments.
 */
function alshaya_update_8001() {
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    \Drupal::service('module_installer')->install(['acquia_purge']);

    // Enable acquia_purge purger.
    /** @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers */
    $purge_purgers = \Drupal::service('purge.purgers');
    $purgers_enabled = $purge_purgers->getPluginsEnabled();
    $purgers_enabled[$purge_purgers->createId()] = 'acquia_purge';
    $purge_purgers->setPluginsEnabled($purgers_enabled);
  }
}

/**
 * Implements hook_install().
 */
function alshaya_install() {
  // Prerequisite for google_tag module.
  $uri = "public://google_tag";
  file_prepare_directory($uri, FILE_CREATE_DIRECTORY);

  // Set default country from settings.
  \Drupal::configFactory()->getEditable('system.date')
    ->set('country.default', Settings::get('country_code'))
    ->save();

  // Try to get timezone from country code.
  $timezones = \DateTimeZone::listIdentifiers(\DateTimeZone::PER_COUNTRY, Settings::get('country_code'));

  // Use Kuwait by default, use first one from the result if found.
  $timezone = empty($timezones) ? 'Asia/Kuwait' : reset($timezones);

  // Set default timezone from settings.
  \Drupal::configFactory()->getEditable('system.date')
    ->set('timezone.default', $timezone)
    ->save();

  // Remove all roles created by Lightning.
  $coreRoles = [
    'anonymous',
    'authenticated',
    'administrator',
  ];
  foreach (user_roles() as $role) {
    if (!in_array($role->id(), $coreRoles)) {
      $role->delete();
    }
  }

  // Stop lightning from creating user roles in future.
  \Drupal::configFactory()->getEditable('lightning_roles.settings')->setData([
    'content_roles' => [
      'creator' => [
        'enabled' => FALSE,
      ],
      'reviewer' => [
        'enabled' => FALSE,
      ],
    ],
  ])->save();

  // Set the page cache for 30 minutes.
  \Drupal::configFactory()->getEditable('system.performance')
    ->set('cache', [
      'page' => [
        'max_age' => 1800,
      ],
    ])
    ->save();

  // TODO: List the modules common for transac and non-transac profiles.
  $modules = [];

  global $_alshaya_modules_installed;
  $_alshaya_modules_installed = [];

  foreach ($modules as $module) {
    \Drupal::service('module_installer')->install([$module]);
    $_alshaya_modules_installed[] = $module;
  }

  \Drupal::moduleHandler()->invokeAll('alshaya_profile_installed', ['alshaya', $modules]);
}

/**
 * Implements hook_alshaya_transac_profile_installed().
 *
 * This is not real hook implementation as we are in profile file. This
 * function is called at the end of alshaya_transac.install.
 */
function alshaya_sub_profile_installed($profile, $modules) {
  alshaya_final_common_install_task($profile, $modules);
}

/**
 * This is the very last function called at the end of the installation.
 */
function alshaya_final_common_install_task($profile) {
  global $_alshaya_modules_installed;

  // Get the modules to be enabled for this env.
  $additional_modules = Settings::get('additional_modules');

  // Additional modules which are to be enabled are to be done here
  // as it cant be done in the hook_install.
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    $additional_modules[] = 'shield';
    $additional_modules[] = 'acquia_purge';
  }

  foreach ($additional_modules as $module) {
    \Drupal::service('module_installer')->install([$module]);
  }

  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    // Enable acquia_purge purger.
    /** @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers */
    $purge_purgers = \Drupal::service('purge.purgers');
    $purgers_enabled = $purge_purgers->getPluginsEnabled();
    $purgers_enabled[$purge_purgers->createId()] = 'acquia_purge';
    $purge_purgers->setPluginsEnabled($purgers_enabled);
  }

  if (\Drupal::moduleHandler()->moduleExists('shield')) {
    \Drupal::getContainer()->get('config.factory')
      ->getEditable('shield.settings')
      ->set('allow_cli', TRUE)
      ->set('user', Settings::get('alshaya_custom_shield_default_user'))
      ->set('pass', Settings::get('alshaya_custom_shield_default_pass'))
      ->set('print', '')
      ->save();
  }

  \Drupal::moduleHandler()->invokeAll('alshaya_profile_installed_final_task', [$profile, $_alshaya_modules_installed]);

  // Delete basic page content type, we don't need this in Alshaya.
  $node_type = NodeType::load('page');
  if ($node_type) {
    $node_type->delete();
  }
}
