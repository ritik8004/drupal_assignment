<?php

/**
 * @file
 * Install, update and uninstall hooks for the alshaya_transac subprofile.
 */

use Drupal\alshaya_config\AlshayaConfigManager;
use Drupal\node\Entity\Node;
use Drupal\Core\Database\Database;
use Drupal\Core\Site\Settings;
use Drupal\block\BlockInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\facets\Entity\Facet;
use Drupal\user\Entity\Role;
use Drupal\search_api\Entity\Server;

/**
 * Implements hook_update_N().
 *
 * Disable search api default server and uninstall acquia_search module.
 */
function alshaya_transac_update_8141() {
  if (\Drupal::service('module_handler')->moduleExists('acquia_search')) {
    // Disable search api default server.
    $acquia_search_server = Server::load('acquia_search_server');
    if (!empty($acquia_search_server)) {
      $acquia_search_server->setStatus(FALSE)->save();
    }
    // Remove acquia_search module.
    \Drupal::service('module_installer')->uninstall(['acquia_search']);
  }

  // Recreate acquia_search_index.
  \Drupal::service('alshaya_config.manager')->updateConfigs(
    ['search_api.index.acquia_search_index'],
    'alshaya_search',
    'optional',
  );
}

/**
 * Implements hook_update_N().
 *
 * Installs jquery_ui_accordion, jquery_ui_effects module if it is not enabled.
 */
function alshaya_transac_update_8140() {
  if (!(\Drupal::moduleHandler()->moduleExists('jquery_ui_tabs'))) {
    \Drupal::service('module_installer')->install(['jquery_ui_tabs']);
  }
  if (!(\Drupal::moduleHandler()->moduleExists('jquery_ui_effects'))) {
    \Drupal::service('module_installer')->install(['jquery_ui_effects']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Installs jquery_ui_accordion module if it is not enabled.
 */
function alshaya_transac_update_8139() {
  if (!(\Drupal::moduleHandler()->moduleExists('jquery_ui_accordion'))) {
    \Drupal::service('module_installer')->install(['jquery_ui_accordion']);
  }
}

/**
 * Implements hook_update_n().
 *
 * Uninstall amp contrib and custom modules.
 */
function alshaya_transac_update_8138() {
  // Remove alshaya_amp themes.
  $theme_handler = \Drupal::service('theme_handler');
  // Remove alshaya_amp_hnm theme.
  if ($theme_handler->themeExists('alshaya_amp_hnm')) {
    \Drupal::service('theme_installer')->uninstall(['alshaya_amp_hnm']);
  }
  // Remove alshaya_amp_mothercare theme.
  if ($theme_handler->themeExists('alshaya_amp_mothercare')) {
    \Drupal::service('theme_installer')->uninstall(['alshaya_amp_mothercare']);
  }
  // Remove alshaya_amp_pottery_barn theme.
  if ($theme_handler->themeExists('alshaya_amp_pottery_barn')) {
    \Drupal::service('theme_installer')->uninstall(['alshaya_amp_pottery_barn']);
  }
  // Remove alshaya_amp_victoria_secret theme.
  if ($theme_handler->themeExists('alshaya_amp_victoria_secret')) {
    \Drupal::service('theme_installer')->uninstall(['alshaya_amp_victoria_secret']);
  }
  // Remove alshaya_amp_white_label theme.
  if ($theme_handler->themeExists('alshaya_amp_white_label')) {
    \Drupal::service('theme_installer')->uninstall(['alshaya_amp_white_label']);
  }
  // Remove amptheme theme.
  if ($theme_handler->themeExists('amptheme')) {
    \Drupal::service('theme_installer')->uninstall(['amptheme']);
  }
  // Remove am contrib and custom modules.
  $module_handler = \Drupal::service('module_handler');
  // Remove amp module.
  if ($module_handler->moduleExists('amp')) {
    \Drupal::service('module_installer')->uninstall(['amp']);
  }
}

/**
 * Implements hook_update_N().
 *
 * [6.11.2] Installs alshaya_js_optimisations module if it is not enabled.
 */
function alshaya_transac_update_8137() {
  if (!(\Drupal::moduleHandler()->moduleExists('alshaya_js_optimisations'))) {
    \Drupal::service('module_installer')->install(['alshaya_js_optimisations']);
  }
}

/**
 * Implements hook_update_n().
 *
 * [6.4.0] Uninstall redundant drupal core themes.
 */
function alshaya_transac_update_8136() {
  // Remove redundant drupal core themes.
  $theme_handler = \Drupal::service('theme_handler');
  // We set a admin theme as part of alshaya_admin module.
  if ($theme_handler->themeExists('claro')) {
    \Drupal::service('theme_installer')->uninstall(['claro']);
  }
  // We set a site theme as part of brand module.
  if ($theme_handler->themeExists('bartik')) {
    \Drupal::service('theme_installer')->uninstall(['bartik']);
  }
}

/**
 * Implements hook_update_N().
 *
 * [6.3.0] Uninstall acq_cybersource module from
 * docroot/modules/commerce/acq_commerce/modules.
 */
function alshaya_transac_update_8135() {
  \Drupal::service('module_installer')->uninstall(['acq_cybersource']);
}

/**
 * Implements hook_update_N().
 *
 * [6.1.0] Uninstall the unused KNET module and disable the knet plugins.
 */
function alshaya_transac_update_8134() {
  // Disabling these modules for transac profile only, as these modules are
  // still in use by some non-transac sites.
  \Drupal::service('module_installer')->uninstall(['alshaya_acm_knet']);
  \Drupal::service('module_installer')->uninstall(['alshaya_knet']);

  /** @var \Drupal\alshaya_config\AlshayaConfigManager $configManager */
  $configManager = \Drupal::service('alshaya_config.manager');

  // Disable the config so that plugin not found error is not thrown.
  $configManager->updateConfigs(
    [
      'rest.resource.knet_finalize_request',
      'rest.resource.knet_init_request',
    ],
    'alshaya_mobile_app',
    'optional'
  );

  // Disable the resource related permissions.
  foreach (Role::loadMultiple(['anonymous', 'authenticated']) as $role) {
    if ($role->hasPermission('restful get knet_init_request')) {
      $role->revokePermission('restful get knet_init_request');
    }
    if ($role->hasPermission('restful get knet_finalize_request')) {
      $role->revokePermission('restful get knet_finalize_request');
    }
    $role->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * [5.11.0]Updating the trigger field value in back_to_top settings
 * to make it visible after the specified value.
 */
function alshaya_transac_update_8133() {
  \Drupal::configFactory()->getEditable('back_to_top.settings')
    ->set('back_to_top_button_trigger', 650)
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * [5.8.0]Installs alshaya_acm_dashboard module if it is not enabled.
 * Installs alshaya_dynamic_yield module for sites which have
 * dynamic_yield enabled.
 */
function alshaya_transac_update_8132() {
  if (!(\Drupal::moduleHandler()->moduleExists('alshaya_acm_dashboard'))) {
    \Drupal::service('module_installer')->install(['alshaya_acm_dashboard']);
  }
  if (\Drupal::service('module_handler')->moduleExists('dynamic_yield')) {
    \Drupal::service('module_installer')->install(['alshaya_dynamic_yield']);
  }
}

/**
 * Implements hook_update_N().
 *
 * Installs alshaya_pdp_react module.
 */
function alshaya_transac_update_8131() {
  \Drupal::service('module_installer')->install(['alshaya_pdp_react']);
}

/**
 * Implements hook_update_N().
 *
 * Installs alshaya_pdp_layouts module.
 */
function alshaya_transac_update_8130() {
  \Drupal::service('module_installer')->install(['alshaya_pdp_layouts']);
}

/**
 * Implements hook_update_N().
 *
 * Installs alshaya_spc module.
 */
function alshaya_transac_update_8129() {
  \Drupal::service('module_installer')->install(['alshaya_spc']);

  // Move react mini cart block to proper theme.
  alshaya_block_move_blocks_theme_to_theme(
    \Drupal::service('theme_handler')->getDefault(),
    'alshaya_white_label'
  );

  \Drupal::configFactory()->getEditable('block.block.cartminiblock')->delete();
  \Drupal::configFactory()->getEditable('block.block.baskethorizontalproductrecommendation')->delete();
  \Drupal::configFactory()->getEditable('block.block.alshayacartpromotionsblock')->delete();

  $blocks = [
    'block.block.customerservice',
    'block.block.footerlogos',
    'block.block.sociallinks',
    'block.block.copyright',
  ];
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');
  $manager->updateConfigs(
    $blocks,
    'alshaya_transac',
    'optional'
  );
}

/**
 * Implements hook_update_N().
 *
 * To remove old category facets.
 */
function alshaya_transac_update_8128() {
  // Facets to remove.
  $old_category_facets = [
    'category',
    'plp_category_facet',
    'promotion_category_facet',
  ];

  foreach ($old_category_facets as $facets) {
    $facet = Facet::load($facets);
    if (isset($facet)) {
      $facet->delete();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Installs Exponea module.
 */
function alshaya_transac_update_8127() {
  \Drupal::service('module_installer')->install(['exponea']);
  /** @var \Drupal\alshaya_acm\AlshayaAcmConfigCheck $config_check */
  $config_check = \Drupal::service('alshaya_acm.config_check');
  $config_check->checkConfig(TRUE, 'exponea.settings');
}

/**
 * Implements hook_update_N().
 *
 * Updates category block config.
 */
function alshaya_transac_update_8126() {
  $manager = \Drupal::service('alshaya_config.manager');
  $manager->updateConfigs(
    ['block.block.categoryfacetsearch'],
    'alshaya_transac',
    'optional'
  );
}

/**
 * Implements hook_update_N().
 *
 * Uninstall un-wanted crop modules.
 */
function alshaya_transac_update_8125() {
  if (!(\Drupal::moduleHandler()->moduleExists('crop'))) {
    \Drupal::logger('alshaya_transac')->notice('Crop module already in disabled state.');
    return;
  }

  $crops = \Drupal::entityTypeManager()->getStorage('crop')->loadMultiple();
  foreach ($crops as $crop) {
    \Drupal::logger('alshaya_transac')->warning('Deleting crop entity with id @id', ['@id' => $crop->id()]);
    $crop->delete();
  }

  \Drupal::service('module_installer')->uninstall(['image_widget_crop', 'crop']);
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya feed module.
 */
function alshaya_transac_update_8124() {
  \Drupal::service('module_installer')->install(['alshaya_feed']);
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya options list module.
 */
function alshaya_transac_update_8123() {
  \Drupal::service('module_installer')->install(['alshaya_options_list']);
  // Get current default theme.
  $current_theme = \Drupal::config('system.theme')->get('default');

  // Move blocks to current default theme.
  if (!empty($current_theme)) {
    alshaya_block_move_blocks_theme_to_theme($current_theme, 'alshaya_white_label');
  }
}

/**
 * Remove you will be able to block on login register pages.
 */
function alshaya_transac_update_8122() {
  // On some sites we also have custom content blocks of "you will be able to"
  // which are not present in config, using this opportunity to also cleanup
  // this blocks.
  $blocks = ['youllbeableto', 'youllbeableto..', 'youllbeableto...'];
  alshaya_block_delete_blocks($blocks);
}

/**
 * Implements hook_update_N().
 *
 * Enable `alshaya_knet` module and update k-net configs.
 */
function alshaya_transac_update_8121() {
  // Install module.
  \Drupal::service('module_installer')->install(['alshaya_knet']);

  // Update the k-net settings.
  $data = \Drupal::config('alshaya_acm_knet.settings')->getRawData();
  \Drupal::configFactory()->getEditable('alshaya_knet.settings')
    ->setData($data)
    ->save();

  // Delete old k-net settings.
  \Drupal::configFactory()->getEditable('alshaya_acm_knet.settings')->delete();
}

/**
 * Implements hook_update_N().
 *
 * Move facet blocks for left sidebar region to content region for
 * PLP/SRP/Promo pages. Blocks should be placed after block exposed form block
 * of sort.
 */
function alshaya_transac_update_8120() {
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager*/
  $manager = \Drupal::service('alshaya_config.manager');
  // New category facet/facet_summary for plp.
  $manager->updateConfigs(['facets.facet.category_facet_plp'], 'alshaya_product', 'optional');
  $manager->updateConfigs(['facets_summary.facets_summary.filter_bar_plp'], 'alshaya_product', 'optional', AlshayaConfigManager::MODE_MERGE);

  // New category facet/facet_summary for promo.
  $manager->updateConfigs(['facets.facet.category_facet_promo'], 'alshaya_acm_promotion', 'optional');
  $manager->updateConfigs(['facets_summary.facets_summary.filter_bar_promotions'], 'alshaya_acm_promotion', 'optional', AlshayaConfigManager::MODE_MERGE);

  // New category facet/facet_summary for search.
  $manager->updateConfigs(['facets.facet.category_facet_search'], 'alshaya_search', 'optional');
  $manager->updateConfigs(['facets_summary.facets_summary.filter_bar'], 'alshaya_search', 'optional', AlshayaConfigManager::MODE_MERGE);

  // For the PLP.
  $facet_source = 'search_api:views_block__alshaya_product_list__block_1';
  $source_block = 'exposedformalshaya_product_listblock_1';
  $weight = \Drupal::entityTypeManager()->getStorage('block')
    ->load('exposedformalshaya_product_listblock_1')->getWeight();
  _alshaya_transac_reposition_all_facet_blocks($facet_source, $source_block, $weight);

  // For the promo.
  $facet_source = 'search_api:views_block__alshaya_product_list__block_2';
  $source_block = 'exposedformalshaya_product_listblock_2';
  $weight = \Drupal::entityTypeManager()->getStorage('block')
    ->load('exposedformalshaya_product_listblock_2')->getWeight();
  _alshaya_transac_reposition_all_facet_blocks($facet_source, $source_block, $weight);

  // For the SRP.
  $facet_source = 'search_api:views_page__search__page';
  $source_block = 'exposedformsearchpage_3';
  $weight = \Drupal::entityTypeManager()->getStorage('block')
    ->load('exposedformsearchpage_3')->getWeight();
  _alshaya_transac_reposition_all_facet_blocks($facet_source, $source_block, $weight);
}

/**
 * Update and re-assign all facet blocks in `content` region.
 *
 * @param string $facet_source
 *   Facet source.
 * @param string $source_block
 *   Source block.
 * @param mixed $weight
 *   Source block weight.
 */
function _alshaya_transac_reposition_all_facet_blocks($facet_source, $source_block, $weight) {
  // Get active theme.
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  // Get all block of `content` region with active theme.
  $all_content_region_blocks = \Drupal::entityTypeManager()->getStorage('block')
    ->loadByProperties(['region' => 'content', 'theme' => $active_theme]);

  /** @var \Drupal\facets\FacetInterface[] $facets */
  $facets = \Drupal::service('facets.manager')->getEnabledFacets();
  $facet_blocks = [];
  if (!empty($facets)) {
    foreach ($facets as $facet) {
      $facet_id = $facet->id();
      if ($facet->getFacetSourceId() == $facet_source) {
        // Mark `soft_limit` to 0 for PLP facets as now we show all facet links.
        \Drupal::configFactory()->getEditable('facets.facet.' . $facet_id)
          ->set('widget.config.soft_limit', 0)
          ->save();
        $block_id = str_replace('_', '', $facet->id());
        $blck = \Drupal::entityTypeManager()->getStorage('block')->load($block_id);
        if ($blck instanceof BlockInterface) {
          $facet_blocks[] = $blck;
        }
      }
    }
  }

  $alshaya_facet_manager = \Drupal::service('alshaya_search_api.facets_manager');
  // Sort the facet blocks.
  uasort($facet_blocks, [$alshaya_facet_manager, 'sortBlocksByWeight']);

  // Doing `+2` as we need to adjust the weight of new category facet block.
  $temp_weight = $weight + 2;
  if (!empty($facet_blocks)) {
    foreach ($facet_blocks as $facet_block) {
      $facet_block->setRegion('content');
      $temp_weight += 1;
      $facet_block->setWeight($temp_weight);
      $facet_block->save();
    }

    $manager = \Drupal::service('alshaya_config.manager');

    // Blocks handling for PLP.
    if ($source_block == 'exposedformalshaya_product_listblock_1') {
      // Adding new `All facets` block for PLP.
      $manager->updateConfigs(
        ['block.block.alshaya_plp_facets_block_all'],
        'alshaya_search_api',
        'install'
      );

      // Adding new `Grid/Count` block for PLP.
      $manager->updateConfigs(
        ['block.block.alshayagridcountblock_plp'],
        'alshaya_search_api',
        'install'
      );

      // Adding new category facet block for plp.
      $manager->updateConfigs(
        ['block.block.categoryfacetplp'],
        'alshaya_transac',
        'optional'
      );

      // Updating the weight with new weight adjustment for new 'All filter'
      // block for plp.
      \Drupal::configFactory()->getEditable('block.block.alshaya_plp_facets_block_all')
        ->set('weight', $temp_weight + 1)
        ->save();

      // Updating the weight with new weight adjustment for new 'Grid/Count'
      // block for plp.
      \Drupal::configFactory()->getEditable('block.block.alshayagridcountblock_plp')
        ->set('weight', $temp_weight + 2)
        ->save();

      // Update/Adjust weight of new category facet block for plp.
      \Drupal::configFactory()->getEditable('block.block.categoryfacetplp')
        ->set('weight', $weight + 1)
        ->save();

      // Disabled old category facet block for plp.
      \Drupal::configFactory()->getEditable('block.block.plpcategoryfacet')
        ->set('status', FALSE)
        ->save();

    }

    // Block handling for promo.
    if ($source_block == 'exposedformalshaya_product_listblock_2') {
      // Adding new `All facets` block for promo.
      $manager->updateConfigs(
        ['block.block.alshaya_promo_facets_block_all'],
        'alshaya_search_api',
        'install'
      );

      // Adding new `Grid/Count` block for Promo.
      $manager->updateConfigs(
        ['block.block.alshayagridcountblock_promo'],
        'alshaya_search_api',
        'install'
      );

      // New category facet block for promo.
      $manager->updateConfigs(
        ['block.block.categoryfacetpromo'],
        'alshaya_transac',
        'optional'
      );

      // Updating the weight with new weight adjustment for promo.
      \Drupal::configFactory()->getEditable('block.block.alshaya_promo_facets_block_all')
        ->set('weight', $temp_weight + 1)
        ->save();

      // Updating the weight with new weight adjustment for new 'Grid/Count'
      // block for promo.
      \Drupal::configFactory()->getEditable('block.block.alshayagridcountblock_promo')
        ->set('weight', $temp_weight + 2)
        ->save();

      // Update/Adjust weight of new category facet block for promo.
      \Drupal::configFactory()->getEditable('block.block.categoryfacetpromo')
        ->set('weight', $weight + 1)
        ->save();

      // Disabled old category facet block for promo.
      \Drupal::configFactory()->getEditable('block.block.promotioncategoryfacet')
        ->set('status', FALSE)
        ->save();
    }

    // Block handling for search.
    if ($source_block == 'exposedformsearchpage_3') {
      // Adding new `All facets` block for search.
      $manager->updateConfigs(
        ['block.block.alshaya_search_facets_block_all'],
        'alshaya_search_api',
        'install'
      );

      // Adding new `Grid/Count` block for Search.
      $manager->updateConfigs(
        ['block.block.alshayagridcountblock_search'],
        'alshaya_search_api',
        'install'
      );

      // New category facet block for search.
      $manager->updateConfigs(
        ['block.block.categoryfacetsearch'],
        'alshaya_transac',
        'optional'
      );

      // Updating the weight with new weight adjustment for search.
      \Drupal::configFactory()->getEditable('block.block.alshaya_search_facets_block_all')
        ->set('weight', $temp_weight + 1)
        ->save();

      // Updating the weight with new weight adjustment for new 'Grid/Count'
      // block for search.
      \Drupal::configFactory()->getEditable('block.block.alshayagridcountblock_search')
        ->set('weight', $temp_weight + 2)
        ->save();

      // Update/Adjust weight of new category facet block for search.
      \Drupal::configFactory()->getEditable('block.block.categoryfacetsearch')
        ->set('weight', $weight + 1)
        ->save();

      // Disabled old category facet for search.
      \Drupal::configFactory()->getEditable('block.block.category')
        ->set('status', FALSE)
        ->save();
    }

    // Now update blocks in content region with appropriate weight.
    foreach ($all_content_region_blocks as $all_block) {
      if (($all_block->getWeight() >= $weight) && $all_block->id() != $source_block) {
        $all_block_weight = $all_block->getWeight() + count($facet_blocks) + 4;
        $all_block->setWeight($all_block_weight);
        $all_block->save();
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Correcting the block positions for promotion banner blocks.
 */
function alshaya_transac_update_8119() {
  // Place the block in highlighted region.
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');
  // Place block in correct region for all sites.
  $manager->updateConfigs(
    ['block.block.views_block__promotion_banner_block_1'],
    'alshaya_transac',
    'optional'
  );

  // Fix weight for blocks in all sites, respective override file
  // added in each brand.
  $manager->updateConfigs(
    ['block.block.views_block__alshaya_promotion_description_block_1'],
    'alshaya_transac',
    'optional'
  );
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_social_facebook module.
 */
function alshaya_transac_update_8118() {
  \Drupal::service('module_installer')->install(['alshaya_social_facebook']);
}

/**
 * Implements hook_update_N().
 *
 * Enable views_ajax_get and configure search, promo, plp views to use GET.
 */
function alshaya_transac_update_8117() {
  // Install alshaya_paragraphs_transac module.
  \Drupal::service('module_installer')->install(['views_ajax_get']);

  // Reinstall views configs for search, plp and promo pages and views settings.
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');
  $manager->updateConfigs(
    ['views.settings'],
    'views',
    'install',
    AlshayaConfigManager::MODE_RESAVE
  );

  $manager->updateConfigs(['views.view.alshaya_product_list'], 'alshaya_product');
  $manager->updateConfigs(['views.view.search'], 'alshaya_search');
}

/**
 * Implements hook_update_N().
 *
 * Re-install promotion category facet block.
 */
function alshaya_transac_update_8116() {
  /** @var \Drupal\alshaya_config\AlshayaConfigManager $manager */
  $manager = \Drupal::service('alshaya_config.manager');
  $manager->updateConfigs(
    ['block.block.promotioncategoryfacet'],
    'alshaya_transac',
    'optional'
  );

  // Get current default theme.
  $current_theme = \Drupal::config('system.theme')->get('default');

  // Move blocks to current default theme.
  if (!empty($current_theme)) {
    alshaya_block_move_blocks_theme_to_theme($current_theme, 'alshaya_white_label');
  }
}

/**
 * Implements hook_update_N().
 *
 * Enable 'New In' sort option for all brands.
 */
function alshaya_transac_update_8115() {
  $manager = \Drupal::service('alshaya_config.manager');
  $manager->updateConfigs(
    ['alshaya_acm_product_position.settings'],
    'alshaya_acm_product_position',
    'install',
    AlshayaConfigManager::MODE_MERGE
  );

  $manager->updateConfigs(
    ['alshaya_search.settings'],
    'alshaya_search',
    'install',
    AlshayaConfigManager::MODE_MERGE
  );
}

/**
 * Implements hook_update_N().
 *
 * Change stock mode based on settings.
 * Install alshaya_product_options module.
 * Create "join the club" block for checkout confirm page.
 */
function alshaya_transac_update_8114() {
  \Drupal::configFactory()->getEditable('acq_sku.settings')->save();

  \Drupal::service('module_installer')->install(['alshaya_product_options']);

  alshaya_config_install_configs(['block.block.jointheclub_checkout_confirm'], 'alshaya_transac', 'optional');

  // Move "join the club" block  from alshaya_white_label to default theme.
  alshaya_block_move_blocks_theme_to_theme(\Drupal::service('theme_handler')->getDefault(), 'alshaya_white_label');
}

/**
 * Implements hook_update_N().
 *
 * Install alshaya_paragraphs_transac module and update
 * product_carousel_category paragraph type and its fields.
 */
function alshaya_transac_update_8113() {
  // Install alshaya_paragraphs_transac module.
  \Drupal::service('module_installer')->install(['alshaya_paragraphs_transac']);

  // Update name of product_carousel_category, field descriptions, weights and
  // add a new field "use as accordion".
  $configs = [
    'paragraphs.paragraphs_type.product_carousel_category',
    'field.storage.paragraph.field_use_as_accordion',
    'field.field.paragraph.product_carousel_category.field_use_as_accordion',
    'field.field.paragraph.product_carousel_category.field_category_carousel_title',
    'core.entity_form_display.paragraph.product_carousel_category.default',
  ];
  alshaya_config_install_configs($configs, 'alshaya_paragraphs_transac', 'optional');
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_search_api module. Remove color_family and color_description.
 */
function alshaya_transac_update_8112() {
  \Drupal::service('module_installer')->install(['alshaya_search_api']);

  /** @var \Drupal\acq_sku\SKUFieldsManager $manager */
  $manager = \Drupal::service('acq_sku.fields_manager');
  $manager->removeField('color_description');
  $manager->removeField('color_family');
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_promo_panel module.
 */
function alshaya_transac_update_8111() {
  \Drupal::service('module_installer')->install(['alshaya_promo_panel']);
}

/**
 * Implements hook_update_N().
 *
 * Set value of 'use as department page' field.
 * Delete the department page CT.
 */
function alshaya_transac_update_8110() {
  // Clear cache so that 'field_use_as_department_page' gets generated.
  drupal_flush_all_caches();

  $db = Database::getConnection();
  $results = $db->select('node__field_product_category')
    ->fields('node__field_product_category', ['entity_id'])
    ->execute()->fetchAll();
  foreach ($results as $result) {
    $node = Node::load($result->entity_id);
    $node->set('field_use_as_department_page', '1');
    $node->save();
  }

  // Delete the department page CT.
  $content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('department_page');
  if (isset($content_type)) {
    $content_type->delete();
  }
}

/**
 * Implements hook_update_N().
 *
 * Migrating department pages to advanced department pages.
 */
function alshaya_transac_update_8109() {
  // Load all product categories in department page & check if they exist.
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'department_page')
    ->execute();

  if (!empty($nids)) {
    $base_tables = [
      'node',
      'node_field_data',
    ];
    _alshaya_advanced_page_convert_base_tables('advanced_page', $nids, $base_tables);

    // Migrate all fields.
    $field_tables = [
      'node_revision__field_meta_tags',
      'node_revision__field_product_category',
      'node_revision__field_promo_blocks',
      'node_revision__field_show_left_menu',
      'node__field_meta_tags',
      'node__field_product_category',
      'node__field_promo_blocks',
      'node__field_show_left_menu',
    ];

    _alshaya_advanced_page_convert_field_tables('advanced_page', $nids, $field_tables);

    drush_print('Nodes have been succesfully migrated as department pages.');
  }
}

/**
 * Implements hook_update_N().
 *
 * Migrating department page with invalid categories to simple advanced page CT.
 */
function alshaya_transac_update_8108() {
  // Uninstall alshaya_department_page module.
  \Drupal::service('module_installer')->uninstall(['alshaya_department_page']);

  // Load all product categories in department page & check if they exist.
  $nodes_exclude = [];
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'department_page')
    ->execute();
  $nodes = Node::loadMultiple($nids);
  foreach ($nodes as $department_page) {
    $category_id = $department_page->get('field_product_category')->getValue();
    $category_id = $category_id[0]['target_id'];
    $term = Term::load($category_id);
    if (!isset($term)) {
      $nodes_exclude[] = $department_page->id();
    }
  }

  if (!empty($nodes_exclude)) {
    $base_tables = [
      'node',
      'node_field_data',
    ];
    _alshaya_advanced_page_convert_base_tables('advanced_page', $nodes_exclude, $base_tables);

    $field_tables = [
      'node_revision__field_meta_tags',
      'node_revision__field_promo_blocks',
      'node__field_meta_tags',
      'node__field_promo_blocks',
    ];

    _alshaya_advanced_page_convert_field_tables('advanced_page', $nodes_exclude, $field_tables);
    _alshaya_advanced_page_delete_fields('node_revision__field_product_category', $nodes_exclude);
    _alshaya_advanced_page_delete_fields('node__field_product_category', $nodes_exclude);
    _alshaya_advanced_page_delete_fields('node_revision__field_show_left_menu', $nodes_exclude);
    _alshaya_advanced_page_delete_fields('node__field_show_left_menu', $nodes_exclude);
    drush_print('Following nodes have been migrated as simple advanced pages.');
    drush_print_r($nodes_exclude);
  }
}

/**
 * Implements hook_update_N().
 *
 * Install config for department(advanced) page block.
 */
function alshaya_transac_update_8107() {
  alshaya_config_install_configs(['block.block.views_block__product_category_level_2_3_block_2'], 'alshaya_transac', 'optional');
  // Move super category block from alshaya_white_label to default theme.
  alshaya_block_move_blocks_theme_to_theme(\Drupal::service('theme_handler')->getDefault(), 'alshaya_white_label');
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_super_category.
 */
function alshaya_transac_update_8106() {
  // Delete existing super category menu block.
  alshaya_block_delete_blocks(['supercategorymenu']);
  \Drupal::service('module_installer')->install(['alshaya_super_category']);
  // Move super category block from alshaya_white_label to default theme.
  alshaya_block_move_blocks_theme_to_theme(\Drupal::service('theme_handler')->getDefault(), 'alshaya_white_label');
}

/**
 * Implements hook_update_N().
 *
 * Install config for department page block.
 */
function alshaya_transac_update_8105() {
  alshaya_config_install_configs(['block.block.views_block__product_category_level_2_3_block_2'], 'alshaya_transac', 'optional');
  // Move super category block from alshaya_white_label to default theme.
  alshaya_block_move_blocks_theme_to_theme(\Drupal::service('theme_handler')->getDefault(), 'alshaya_white_label');
}

/**
 * Implements hook_update_N().
 *
 * Enable alshaya_stores_finder_transac sub module of alshaya_stores_finder.
 */
function alshaya_transac_update_8104() {
  \Drupal::service('module_installer')->install(['alshaya_stores_finder_transac']);
}

/**
 * Implements hook_update_n().
 *
 * Enable on stores finder transac module and super category features.
 */
function alshaya_transac_update_8103() {
  // Enable alshaya_stores_finder_transac sub module of alshaya_stores_finder.
  \Drupal::service('module_installer')->install(['alshaya_stores_finder_transac']);
  // Install default block config.
  $configs = [
    'block.block.supercategorymenu',
    'block.block.shopby',
  ];
  alshaya_config_install_configs($configs, 'alshaya_transac', 'optional');
  // Move super category block from alshaya_white_label to default theme.
  alshaya_block_move_blocks_theme_to_theme(\Drupal::service('theme_handler')->getDefault(), 'alshaya_white_label');
}

/**
 * Implements hook_update_n().
 *
 * Hook update to disable whitelabel_transac theme and enable
 * alshaya_white_label.
 */
function alshaya_transac_update_8102() {
  /* Uninstalling the whitelabel_transac theme. */
  \Drupal::service('theme_installer')->uninstall(['whitelabel_transac']);
}

/**
 * Implements hook_install().
 */
function alshaya_transac_install() {
  $modules = [
    // Custom modules.
    'alshaya_arabic',
    'alshaya_custom',
    'alshaya_addressbook',
    'alshaya_advanced_page',
    'alshaya_acm',
    'alshaya_acm_checkout',
    'alshaya_acm_customer',
    'alshaya_acm_product',
    'alshaya_acm_product_category',
    'alshaya_acm_product_position',
    'alshaya_acm_promotion',
    'alshaya_admin',
    'alshaya_block',
    'alshaya_captcha',
    'alshaya_click_collect',
    'alshaya_config',
    'alshaya_contact',
    'alshaya_default_content',
    'alshaya_default_content_transac',
    'alshaya_feed',
    'alshaya_i18n',
    'alshaya_loyalty',
    'alshaya_main_menu',
    'alshaya_master',
    'alshaya_menus',
    'alshaya_acm_cart_notification',
    'alshaya_newsletter',
    'alshaya_paragraphs_transac',
    'alshaya_permissions',
    'alshaya_product',
    'alshaya_promo_panel',
    'alshaya_search',
    'alshaya_seo_transac',
    'alshaya_social_facebook',
    'alshaya_social_google',
    'alshaya_stores_finder',
    'alshaya_stores_finder_transac',
    'alshaya_super_category',
    'alshaya_user',
    'alshaya_acm_checkoutcom',
    'alshaya_static_html',
    'alshaya_product_options',
    'alshaya_image_sitemap',
    'alshaya_options_list',
    'alshaya_facets_pretty_paths',
    'exponea',
    'alshaya_spc',
    'alshaya_pdp_layouts',
    'alshaya_acm_dashboard',
    'datadog_js',
  ];

  // Add 10 MB per module we are going to enable above.
  $memory = 256 + 10 * count($modules);
  ini_set('memory_limit', $memory . 'M');

  global $_alshaya_modules_installed;

  foreach ($modules as $module) {
    \Drupal::service('module_installer')->install([$module]);
    $_alshaya_modules_installed[] = $module;

    \Drupal::service('entity.memory_cache')->deleteAll();
    \Drupal::configFactory()->clearStaticCache();
    drupal_static_reset();
  }

  // Invoke a hook to let other modules know that profile installation is done.
  \Drupal::moduleHandler()->invokeAll('alshaya_profile_installed', [
    'alshaya_transac',
    $modules,
  ]);

  if (\Drupal::moduleHandler()->moduleExists('sharethis')) {
    // Configure ShareThis defaults.
    $configFactory = \Drupal::configFactory()->getEditable('sharethis.settings');
    if (\Drupal::moduleHandler()->moduleExists('acq_sku')) {
      // Enable share this for Product CT.
      $configFactory->set('node_types.acq_product', 'acq_product');
    }
    // Set the option to use custom style for showing share images.
    $configFactory->set('button_option', 'stbc_custom');
    // Save the changes.
    $configFactory->save();
  }

  // Set alshaya_white_label as the default theme.
  \Drupal::configFactory()->getEditable('system.theme')->set('default', 'alshaya_white_label')->save();

  // Remove redundant drupal core themes.
  $theme_handler = \Drupal::service('theme_handler');
  // We set a admin theme as part of alshaya_admin module.
  if ($theme_handler->themeExists('claro')) {
    \Drupal::service('theme_installer')->uninstall(['claro']);
  }
  // We set a site theme as part of brand module.
  if ($theme_handler->themeExists('bartik')) {
    \Drupal::service('theme_installer')->uninstall(['bartik']);
  }

  // Invoke the function in profile to inform sub profile is installed.
  alshaya_sub_profile_installed('alshaya_transac');

  // Set stock mode.
  \Drupal::configFactory()->getEditable('acq_sku.settings')
    ->set('stock_mode', Settings::get('stock_mode'))
    ->save();

  // Set trigger field value in back_to_top settings.
  \Drupal::configFactory()->getEditable('back_to_top.settings')
    ->set('back_to_top_button_trigger', 650)
    ->save();
}

/**
 * Implements hook_update_n().
 *
 * Hook update to enable module.
 */
function alshaya_transac_update_8101() {
  $configs = [
    'metatag.metatag_defaults.node__acq_product',
    'metatag.metatag_defaults.node__acq_promotion',
    'metatag.metatag_defaults.taxonomy_term__acq_product_category',
    'simple_sitemap.bundle_settings.node.acq_product',
    'simple_sitemap.bundle_settings.taxonomy_term.acq_product_category',
  ];
  foreach ($configs as $config) {
    \Drupal::configFactory()->getEditable($config)->delete();
  }

  $modules = [
    'alshaya_config',
    'alshaya_seo_transac',
  ];

  foreach ($modules as $module) {
    \Drupal::service('module_installer')->install([$module], TRUE);
  }
}

/**
 * Implements hook_update_dependencies().
 */
function alshaya_transac_update_dependencies() {
  $dependencies = [];
  $dependencies['alshaya_transac'][8108] = [
    'alshaya_advanced_page' => 8004,
  ];
  return $dependencies;
}
