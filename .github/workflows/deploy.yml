name: Deploy

on:
  push:
    branches:
      - qa
      - uat
      - master
      - alo-yoga-qa
      - CORE-49894-github-actions-develop-3
  create:

concurrency: deploy-${{ github.ref }}

defaults:
  run:
    shell: bash

jobs:
  changedfiles:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'marcelovani' }}

    # Map a step output to a job output
    outputs:
      themes: ${{ steps.changes.outputs.themes }}
      react: ${{ steps.changes.outputs.react }}
      deployable_changes: ${{ steps.deployable_changes.outputs.deployable_changes }}

    steps:
      # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo themes=$(git diff --name-only --diff-filter=ACMRTD ${{ github.event.before }} ${{ github.event.after }} | grep docroot/themes/custom | xargs) >> $GITHUB_OUTPUT
          echo react=$(git diff --name-only --diff-filter=ACMRTD ${{ github.event.before }} ${{ github.event.after }} | grep docroot/modules/react | xargs) >> $GITHUB_OUTPUT

      - name: Deploying tag
        id: deploy_tag
        run: |
          echo is_tag=true >> $GITHUB_OUTPUT
        if: ${{ contains(github.ref, 'refs/tags') }}

      - name: Check if changes are deployable
        id: deployable_changes
        run: |
          NAMES=$(git diff --name-only --diff-filter=ACMRTD ${{ github.event.before }} ${{ github.event.after }} | xargs)
          echo "Changed files ${NAMES}"
          # Check if we are deploying a tag or the file names match the list below.
          if [[ ${{ contains(github.ref, 'refs/tags') }} \
            || [[ "${NAMES}" =~ "composer." \
              || "${NAMES}" =~ "docroot/" \
              || "${NAMES}" =~ "blt/" \
              || "${NAMES}" =~ "factory-hooks/" \
              || "${NAMES}" =~ "hooks/" \
              || "${NAMES}" =~ "scripts/"
            ]]
          ]]
          then
            echo "Changes require deployment."
            echo deployable_changes=true >> $GITHUB_OUTPUT
          else
            echo "Changes not require deployment. Hence skipping the deployment."
            echo deployable_changes=false >> $GITHUB_OUTPUT
          fi

      - name: Debug Info
        run: |
          echo "Is tag: ${{ contains(github.ref, 'refs/tags') }}"
          echo "Deployable: ${{ needs.changedfiles.outputs.deployable_changes }}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: changedfiles
    if: ${{ github.repository_owner == 'marcelovani' && needs.changedfiles.outputs.deployable_changes == 'true' }}

    container:
      image: devwithlando/php:8.0-fpm-4

    env:
      CI: GITHUB_ACTIONS
      COMPOSER_MEMORY_LIMIT: -1
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      SSH_DEPLOYMENT_KEY: ${{ secrets.BLT_SSH_DEPLOYMENT_KEY }}

    steps:
      - name: Prepare environment variables
        run: |
          echo GITHUB_REF_NAME=$(echo ${GITHUB_REF##*/}) >> $GITHUB_ENV
          echo COMPOSER_BIN=$(echo ${GITHUB_WORKSPACE}/vendor/bin) >> $GITHUB_ENV
          echo BLT_DIR=$(echo ${GITHUB_WORKSPACE}/vendor/acquia/blt) >> $GITHUB_ENV
          echo SCRIPT_DIR=$(echo ${GITHUB_WORKSPACE}/blt/scripts/github_actions) >> $GITHUB_ENV
          echo CHANGED_THEME_FILES=${{ needs.changedfiles.outputs.themes }} >> $GITHUB_ENV
          echo CHANGED_REACT_FILES=${{ needs.changedfiles.outputs.react }} >> $GITHUB_ENV
          echo CHANGED_ALL_FILES=$(echo ${{ inputs.CHANGED_ALL_FILES }} | wc -l | xargs) >> $GITHUB_ENV

      - name: Debug Info
        run: |
          echo "Number of files changed: ${{ env.CHANGED_ALL_FILES }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Composer install
        run: |
          composer self-update
          composer self-update --2
          composer validate --no-check-all --ansi
          composer install --no-interaction || composer install --no-interaction || composer install --no-interaction

      - name: Prepare bin executables
        run: |
          ln -s ${GITHUB_WORKSPACE}/vendor/acquia/blt/bin/blt /usr/local/bin/blt
          ln -s ${GITHUB_WORKSPACE}/vendor/drush/drush/drush /usr/local/bin/drush

      - name: Build all middleware
        run: bash ${GITHUB_WORKSPACE}/blt/scripts/middleware-build.sh "${GITHUB_WORKSPACE}"

      - name: Cache dependencies installed with Composer
        id: composer-cache
        run: |
          echo dir=$(composer config cache-files-dir) >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        with:
          path: |
            "${{ steps.composer-cache.outputs.dir }}"
            ~/.drush/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Setup environment
        run: bash $SCRIPT_DIR/setup_env.sh

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "14.19.0"
          cache: "npm"
          cache-dependency-path: |
            docroot/package-lock.json
            docroot/modules/custom/package-lock.json
            docroot/modules/react/package-lock.json
            docroot/themes/custom/package-lock.json

      - name: Install Gulp
        run: npm install -g gulp-cli

      - name: Cache node modules
        id: npm-cache-dir
        run: |
          echo dir=$(npm config get cache) >> $GITHUB_OUTPUT

      # @todo check if this really works or we need one step per directory
      - uses: actions/cache@v3
        with:
          path: |
            "${{ steps.npm-cache-dir.outputs.dir }}"
            ~/.npm
            ~/.nvm
          key: ${{ runner.os }}-node

      - name: Prepare deployment key
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ env.SSH_DEPLOYMENT_KEY }}"
        if: ${{ env.SSH_DEPLOYMENT_KEY }}

      - name: Deploy branch
        run: bash $SCRIPT_DIR/deploy_branch.sh
        if: ${{ env.SSH_DEPLOYMENT_KEY && contains(github.ref, 'refs/heads') }}

      - name: Deploy tag
        run: bash $SCRIPT_DIR/deploy_tag.sh
        if: ${{ env.SSH_DEPLOYMENT_KEY && contains(github.ref, 'refs/tags') }}
