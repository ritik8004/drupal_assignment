diff --git a/facets.libraries.yml b/facets.libraries.yml
index 2ebbf32..cbe63c6 100644
--- a/facets.libraries.yml
+++ b/facets.libraries.yml
@@ -53,3 +53,12 @@ soft-limit:
     - core/jquery.once
     - core/drupal
     - core/drupalSettings
+drupal.facets.views-ajax:
+  js:
+    js/facets-views-ajax.js: {}
+  dependencies:
+    - core/jquery
+    - core/jquery.once
+    - core/drupal
+    - core/drupalSettings
+    - core/drupal.ajax
\ No newline at end of file
diff --git a/facets.routing.yml b/facets.routing.yml
index d55d01b..a819178 100644
--- a/facets.routing.yml
+++ b/facets.routing.yml
@@ -48,3 +48,9 @@ entity.facets_facet_source.edit_form:
     _title: 'Edit facet source configuration'
   requirements:
     _entity_create_access: 'facets_facet'
+facets.block.ajax:
+  path: '/facets-block/ajax'
+  defaults:
+    _controller: '\Drupal\facets\Controller\FacetBlockAjaxController::ajaxFacetBlockView'
+  requirements:
+    _access: 'TRUE'
\ No newline at end of file
diff --git a/js/checkbox-widget.js b/js/checkbox-widget.js
index 154c54b..7871c76 100644
--- a/js/checkbox-widget.js
+++ b/js/checkbox-widget.js
@@ -51,7 +51,7 @@
       label.find('.js-facet-deactivate').remove();
     }
 
-    $link.before(checkbox).before(label).remove();
+    $link.before(checkbox).before(label).hide();
 
   };
 
diff --git a/js/dropdown-widget.js b/js/dropdown-widget.js
index 5d599f1..47b5103 100644
--- a/js/dropdown-widget.js
+++ b/js/dropdown-widget.js
@@ -67,7 +67,7 @@
       }
 
       // Replace links with dropdown.
-      $ul.after($dropdown).remove();
+      $ul.after($dropdown).hide();
       Drupal.attachBehaviors($dropdown.parent()[0], Drupal.settings);
     });
   };
diff --git a/js/facets-views-ajax.js b/js/facets-views-ajax.js
new file mode 100644
index 0000000..60d1928
--- /dev/null
+++ b/js/facets-views-ajax.js
@@ -0,0 +1,122 @@
+/**
+ * @file
+ * Facets Views AJAX handling.
+ */
+
+/**
+ * @name FacetsViewsAjaxSettings
+ * @property {String} view_id
+ * @property {String} current_display_id
+ * @property {String} view_base_path
+ */
+
+/**
+ * @property {FacetsViewsAjaxSettings[]} drupalSettings.facets_views_ajax
+ */
+
+
+(function ($, Drupal) {
+  'use strict';
+
+  /**
+   * Trigger views AJAX refresh on click.
+   */
+  Drupal.behaviors.facetsViewsAjax = {
+    attach: function (context, settings) {
+      var update_summary = false;
+      if (settings.facets_views_ajax.facets_summary_ajax) {
+        update_summary = true;
+      }
+      $.each(settings.facets_views_ajax, function (facetId, facetSettings) {
+
+        // Get the View for the current facet.
+        var view = $('.view-id-' + facetSettings.view_id + '.view-display-id-' + facetSettings.current_display_id).first();
+        var dom_id_start = 'js-view-dom-id-';
+        var current_dom_id = $.map(view.attr('class').split(' '), function (v, i) {
+          if (v.indexOf(dom_id_start) > -1) {
+            return v.slice(dom_id_start.length, v.length);
+          }
+        });
+
+        if (typeof Drupal.views.instances['views_dom_id:' + current_dom_id] === 'undefined') {
+          return;
+        }
+
+        // Get all ajax facets block from the current page.
+        var facets_blocks = [];
+        $('.block-facets-ajax').each(function (index) {
+          var dom_id_start = 'js-facet-dom-id-';
+          var facet_block_id = $.map($(this).attr('class').split(' '), function (v, i) {
+            if (v.indexOf(dom_id_start) > -1) {
+              return v.slice(dom_id_start.length, v.length);
+            }
+          }).join();
+          facets_blocks.push(facet_block_id);
+        });
+
+        if (update_summary && (facetId === 'facets_summary_ajax')) {
+          $('[data-drupal-facets-summary-id=' + facetSettings.facets_summary_id +']').children('ul').children('li').once().click(function (e) {
+            e.preventDefault();
+            var facetLink = $(this).find('a');
+            updateFacetsView(facetLink, facets_blocks, current_dom_id, update_summary, settings);
+          });
+        }
+        else {
+          $('[data-drupal-facet-id=' + facetId + ']').find('.facet-item').once().click(function (e) {
+            e.preventDefault();
+            var facetLink = $(this).find('a');
+            updateFacetsView(facetLink, facets_blocks, current_dom_id, update_summary, settings);
+            e.stopPropagation();
+          });
+        }
+      });
+    }
+  };
+
+  // Helper function to update views output & Ajax facets.
+  var updateFacetsView = function (facetLink, facets_blocks, current_dom_id, update_summary_block, settings) {
+    var views_parameters = Drupal.Views.parseQueryString(facetLink.attr('href'));
+    var views_arguments = Drupal.Views.parseViewArgs(facetLink.attr('href'), 'search');
+    var views_settings = $.extend(
+      {},
+      Drupal.views.instances['views_dom_id:' + current_dom_id].settings,
+      views_arguments,
+      views_parameters
+    );
+
+    // Update View.
+    var views_ajax_settings = Drupal.views.instances['views_dom_id:' + current_dom_id].element_settings;
+    views_ajax_settings.submit = views_settings;
+    views_ajax_settings.url += '?q=' + facetLink.attr('href');
+
+
+    // Update facet blocks.
+    var facet_settings = {
+      url: Drupal.url('facets-block/ajax'),
+      submit: {
+        facet_link: facetLink.attr('href'),
+        facets_blocks: facets_blocks
+      }
+    };
+
+    Drupal.ajax(views_ajax_settings).execute();
+
+    if (update_summary_block) {
+      var facet_summary_wrapper_id = $('[data-drupal-facets-summary-id=' + settings.facets_views_ajax.facets_summary_ajax.facets_summary_id + ']').attr('id');
+      var facet_summary_block_id = '';
+      if (facet_summary_wrapper_id.indexOf('--') !== -1) {
+        facet_summary_block_id = facet_summary_wrapper_id.substring(0, facet_summary_wrapper_id.indexOf('--')).replace('block-', '');
+      }
+      else {
+        facet_summary_block_id = facet_summary_wrapper_id.replace('block-', '');
+      }
+      facet_settings.submit.update_summary_block =  update_summary_block;
+      facet_settings.submit.facet_summary_block_id = facet_summary_block_id;
+      facet_settings.submit.facet_summary_wrapper_id = settings.facets_views_ajax.facets_summary_ajax.facets_summary_id;
+    }
+    facet_settings.submit.active_facet = facetLink.closest('.block-facets-ajax').attr('data-block-plugin-id');
+
+    Drupal.ajax(facet_settings).execute();
+  };
+
+})(jQuery, Drupal);
diff --git a/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php b/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
index 93ccd99..f544f6d 100644
--- a/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
+++ b/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
@@ -96,6 +96,17 @@ class FacetsSummaryBlock extends BlockBase implements FacetsSummaryBlockInterfac
       ];
     }
 
+    /** @var \Drupal\views\Entity\View $view */
+    $view = $facets_summary->getFacetSource()->getView();
+
+    $build['#attached']['drupalSettings']['facets_views_ajax'] = [
+      'facets_summary_ajax' => [
+        'facets_summary_id' => $build['#attributes']['data-drupal-facets-summary-id'],
+        'view_id' => $view->id(),
+        'current_display_id' => $view->current_display
+      ]
+    ];
+
     return $build;
 
   }
diff --git a/src/Controller/FacetBlockAjaxController.php b/src/Controller/FacetBlockAjaxController.php
new file mode 100644
index 0000000..4ce915e
--- /dev/null
+++ b/src/Controller/FacetBlockAjaxController.php
@@ -0,0 +1,199 @@
+<?php
+
+namespace Drupal\facets\Controller;
+
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Ajax\ReplaceCommand;
+use Drupal\Core\Ajax\HtmlCommand;
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\Core\Entity\EntityManager;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Path\CurrentPathStack;
+use Drupal\Core\PathProcessor\PathProcessorManager;
+use Drupal\Core\Render\Markup;
+use Drupal\Core\Render\RendererInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
+use Symfony\Component\Routing\RouterInterface;
+
+/**
+ * Defines a controller to load a view via AJAX.
+ */
+class FacetBlockAjaxController implements ContainerInjectionInterface {
+
+  /**
+   * The container
+   *
+   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   */
+  protected $container;
+
+  /**
+   * The entity storage for block.
+   *
+   * @var \Drupal\Core\Entity\EntityStorageInterface
+   */
+  protected $storage;
+
+  /**
+   * The renderer.
+   *
+   * @var \Drupal\Core\Render\RendererInterface
+   */
+  protected $renderer;
+
+  /**
+   * The current path.
+   *
+   * @var \Drupal\Core\Path\CurrentPathStack
+   */
+  protected $currentPath;
+
+  /**
+   * The dynamic router service.
+   *
+   * @var \Symfony\Component\Routing\Matcher\RequestMatcherInterface
+   */
+  protected $router;
+
+  /**
+   * The path processor service.
+   *
+   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   */
+  protected $pathProcessor;
+
+  /**
+   * The logger service.
+   *
+   * @var
+   */
+  protected $logger;
+
+  /**
+   * @var \Drupal\Core\Entity\EntityManager
+   */
+  protected $entityManager;
+
+
+  /**
+   * Constructs a FacetBlockAjaxController object.
+   *
+   * @param \Drupal\Core\Entity\EntityManager $entityManager
+   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param \Drupal\Core\Path\CurrentPathStack $currentPath
+   * @param \Symfony\Component\Routing\RouterInterface $router
+   * @param \Drupal\Core\PathProcessor\PathProcessorManager $pathProcessor
+   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   */
+  public function __construct(EntityManager $entityManager, RendererInterface $renderer,
+                              CurrentPathStack $currentPath,
+                              RouterInterface $router,
+                              PathProcessorManager $pathProcessor,
+                              LoggerChannelFactoryInterface $logger) {
+    $this->entityManager = $entityManager;
+    $this->storage = $entityManager->getStorage('block');
+    $this->renderer = $renderer;
+    $this->currentPath = $currentPath;
+    $this->router = $router;
+    $this->pathProcessor = $pathProcessor;
+    $this->logger = $logger;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('entity.manager'),
+      $container->get('renderer'),
+      $container->get('path.current'),
+      $container->get('router'),
+      $container->get('path_processor_manager'),
+      $container->get('logger.factory')
+    );
+  }
+
+  /**
+   * Loads and renders the facet blocks via AJAX.
+   *
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The current request object.
+   *
+   * @return \Drupal\Core\Ajax\AjaxResponse
+   *   The ajax response.
+   *
+   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   *   Thrown when the view was not found.
+   */
+  public function ajaxFacetBlockView(Request $request) {
+    $response = new AjaxResponse();
+
+    // Rebuild the request and the current path, needed for facets.
+    $path = $request->request->get('facet_link');
+    $facets_blocks = $request->request->get('facets_blocks');
+
+    // We get duplicates in parameters.
+    $facets_blocks = array_unique($facets_blocks);
+
+    if (empty($path) || empty($facets_blocks)) {
+      throw new NotFoundHttpException();
+    }
+    $new_request = Request::create($path);
+    $requestStack = new RequestStack();
+    $processed = $this->pathProcessor->processInbound($path, $new_request);
+    if (empty($processed)) {
+      throw new NotFoundHttpException();
+    }
+    $this->currentPath->setPath($processed, $new_request);
+    $request->attributes->add($this->router->matchRequest($new_request));
+    $requestStack->push($new_request);
+    $container = \Drupal::getContainer();
+    $container->set('request_stack', $requestStack);
+    $activeFacet = $request->request->get('active_facet');
+
+    // Build the facets blocks found for the current request and update.
+    foreach ($facets_blocks as $facets_block) {
+      $facets_block_id = str_replace('_', '', $facets_block);
+      $block_entity = $this->storage->load($facets_block_id);
+      if ($block_entity) {
+        $block_view = $this->entityManager->getViewBuilder('block')
+          ->view($block_entity);
+        /** @var \Drupal\Core\Render\Markup $block_view */
+        $block_view = (string) $this->renderer->renderPlain($block_view);
+
+        // Make sure we retain the empty wrapper in case of empty facets to fill
+        // them up in next request if they have data.
+        if ($block_view) {
+          $response->addCommand(new ReplaceCommand('.js-facet-dom-id-' . $facets_block, $block_view));
+        }
+        else {
+          $response->addCommand(new HtmlCommand('.js-facet-dom-id-' . $facets_block, $block_view));
+        }
+      }
+    }
+
+    $update_summary_block = $request->request->get('update_summary_block');
+
+    if ($update_summary_block) {
+      $facet_summary_block_id = $request->request->get('facet_summary_block_id');
+      $facet_summary_wrapper_id = $request->request->get('facet_summary_wrapper_id');
+      $facet_summary_block_id = str_replace('-', '_', $facet_summary_block_id);
+      // Update filter summary block.
+      if ($facet_summary_block_id) {
+        $block_entity = $this->storage->load($facet_summary_block_id);
+        $block_view = $this->entityManager->getViewBuilder('block')
+          ->view($block_entity);
+        /** @var \Drupal\Core\Render\Markup $block_view */
+        $block_view = (string) $this->renderer->renderPlain($block_view);
+
+        $response->addCommand(new ReplaceCommand('[data-drupal-facets-summary-id=' . $facet_summary_wrapper_id . ']', $block_view));
+      }
+    }
+
+    return $response;
+  }
+
+}
diff --git a/src/FacetSource/FacetSourcePluginBase.php b/src/FacetSource/FacetSourcePluginBase.php
index 14317fb..9a470f8 100644
--- a/src/FacetSource/FacetSourcePluginBase.php
+++ b/src/FacetSource/FacetSourcePluginBase.php
@@ -116,6 +116,13 @@ abstract class FacetSourcePluginBase extends PluginBase implements FacetSourcePl
     return $this->keys;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function buildFacet() {
+    return [];
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/FacetSource/FacetSourcePluginInterface.php b/src/FacetSource/FacetSourcePluginInterface.php
index 13248e3..8db0fda 100644
--- a/src/FacetSource/FacetSourcePluginInterface.php
+++ b/src/FacetSource/FacetSourcePluginInterface.php
@@ -97,4 +97,13 @@ interface FacetSourcePluginInterface extends PluginFormInterface, DependentPlugi
    */
   public function getSearchKeys();
 
+  /**
+   * Builds and returns an extra renderable array for this facet block plugin.
+   *
+   * @return array
+   *   A renderable array representing the content of the block.
+   *
+   * @see Drupal\facets\Plugin\facets\facet_source\SearchApiDisplay
+   */
+  public function buildFacet();
 }
diff --git a/src/Plugin/Block/FacetBlock.php b/src/Plugin/Block/FacetBlock.php
index 9d3870d..cdc62b2 100644
--- a/src/Plugin/Block/FacetBlock.php
+++ b/src/Plugin/Block/FacetBlock.php
@@ -81,11 +81,24 @@ class FacetBlock extends BlockBase implements ContainerFactoryPluginInterface {
     // Let the facet_manager build the facets.
     $build = $this->facetManager->build($facet);
 
-    // Add contextual links only when we have results.
     if (!empty($build)) {
+      // Add extra elements from facet source.
+      // For example, ajax scripts.
+      // @see Drupal\facets\Plugin\facets\facet_source\SearchApiDisplay
+      /** @var \Drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source */
+      $facet_source = $facet->getFacetSource();
+      $build += $facet_source->buildFacet();
+
+      // Add contextual links only when we have results.
       $build['#contextual_links']['facets_facet'] = [
         'route_parameters' => ['facets_facet' => $facet->id()],
       ];
+
+      // Add ajax class.
+      if (!empty($build['#use_ajax'])) {
+        $build['#attributes']['class'][] = 'block-facets-ajax';
+        $build['#attributes']['class'][] = 'js-facet-dom-id-' . $facet_id;
+      }
     }
 
     return $build;
diff --git a/src/Plugin/facets/facet_source/SearchApiDisplay.php b/src/Plugin/facets/facet_source/SearchApiDisplay.php
index 7e99553..ba030aa 100644
--- a/src/Plugin/facets/facet_source/SearchApiDisplay.php
+++ b/src/Plugin/facets/facet_source/SearchApiDisplay.php
@@ -326,4 +326,44 @@ class SearchApiDisplay extends FacetSourcePluginBase implements SearchApiFacetSo
       ->createInstance($this->pluginDefinition['display_id']);
   }
 
+  /**
+   * Return the Search API display source view, if any.
+   *
+   * @return \Drupal\views\Views
+   *   Current view or FALSE.
+   */
+  public function getView() {
+    $display_definition = $this->getDisplay()->getPluginDefinition();
+    if (isset($display_definition['view_id'])) {
+      $view = Views::getView($display_definition['view_id']);
+      $view->setDisplay($display_definition['view_display']);
+      return $view;
+    }
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildFacet() {
+    $build = parent::buildFacet();
+    /** @var \Drupal\views\ViewExecutable $view */
+    if ($view = $this->getView()) {
+      // Add JS for Views with Ajax Enabled.
+      if ($view->display_handler->ajaxEnabled()) {
+        $js_settings = [
+          'view_id' => $view->id(),
+          'current_display_id' => $view->current_display,
+          'view_base_path' => ltrim($view->getPath(), '/'),
+        ];
+        $build['#attached']['library'][] = 'facets/drupal.facets.views-ajax';
+        $build['#attached']['drupalSettings']['facets_views_ajax'] = [
+          $this->facet->id() => $js_settings,
+        ];
+        $build['#use_ajax'] = TRUE;
+      }
+    }
+    return $build;
+  }
+
 }
diff --git a/src/Widget/WidgetPluginBase.php b/src/Widget/WidgetPluginBase.php
index 8959ce2..ee0ac1a 100644
--- a/src/Widget/WidgetPluginBase.php
+++ b/src/Widget/WidgetPluginBase.php
@@ -6,6 +6,7 @@ use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Plugin\PluginBase;
+use Drupal\Core\Url;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Result\Result;
 use Drupal\facets\Result\ResultInterface;
@@ -54,6 +55,18 @@ abstract class WidgetPluginBase extends PluginBase implements WidgetPluginInterf
         return $this->buildResultItem($result);
       }
       else {
+        $url = $result->getUrl();
+        $options = $url->getOptions();
+        $request = \Drupal::request();
+        $pathinfo = $request->getPathInfo();
+        $url_object = \Drupal::service('path.validator')
+          ->getUrlIfValid($pathinfo);
+        $route_params = $url_object->getRouteParameters();
+        $route_name = $url_object->getRouteName();
+        // Additional check needed if facets are tied up with a block on the page.
+        if ($result->getUrl()->getRouteName() === 'facets.block.ajax') {
+          $result->setUrl(new Url($route_name, $route_params, $options));
+        }
         return $this->buildListItems($facet, $result);
       }
     }, $facet->getResults());
