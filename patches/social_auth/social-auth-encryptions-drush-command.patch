diff --git a/drush.services.yml b/drush.services.yml
new file mode 100644
index 0000000..67e842e
--- /dev/null
+++ b/drush.services.yml
@@ -0,0 +1,5 @@
+services:
+  social_auth.commands:
+    class: Drupal\social_auth\Commands\SocialAuthCommands
+    tags:
+      - { name: drush.command }
diff --git a/social_auth.post_update.php b/social_auth.post_update.php
index 1da7e4b..f317a7a 100644
--- a/social_auth.post_update.php
+++ b/social_auth.post_update.php
@@ -9,6 +9,7 @@
  * Encrypts all tokens currently stored by Social Auth.
  */
 function social_auth_post_update_encrypt_tokens(&$sandbox = NULL) {
+  return t('skipping Social Auth users Update.');
   $storage = \Drupal::entityTypeManager()->getStorage('social_auth');
   // Initializes some variables during the first pass through.
   if (!isset($sandbox['total'])) {
diff --git a/src/Commands/SocialAuthCommands.php b/src/Commands/SocialAuthCommands.php
new file mode 100644
index 0000000..471588b
--- /dev/null
+++ b/src/Commands/SocialAuthCommands.php
@@ -0,0 +1,88 @@
+<?php
+
+namespace Drupal\social_auth\Commands;
+
+use Drush\Commands\DrushCommands;
+
+/**
+ * Class SocialAuthCommands.
+ *
+ * @package Drupal\alshaya_feed\Commands
+ */
+class SocialAuthCommands extends DrushCommands {
+
+  /**
+   * Encrypt social auth tokens.
+   *
+   * @command social_auth:encrypt_tokens
+   *
+   * @aliases social-auth-encrypt-tokens
+   */
+  public function updateTokens() {
+    $batch = [
+      'title' => dt('Encrypting social auth token'),
+      'init_message' => dt('Starting encryption...'),
+      'progress_message' => dt('Completed @current step of @total.'),
+      'error_message' => dt('encountered error while running batch process.'),
+      'operations' => [
+        [[__CLASS__, 'batchProcess'], []]
+      ]
+    ];
+    batch_set($batch);
+    drush_backend_batch_process();
+  }
+
+  /**
+   * Executes social_auth_post_update_encrypt_tokens.
+   *
+   * @param array $context
+   *   The batch context array.
+   *
+   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws \Drupal\Core\Entity\EntityStorageException
+   */
+  public function batchProcess(&$context) {
+    $storage = \Drupal::entityTypeManager()->getStorage('social_auth');
+
+    if (empty($context['sandbox'])) {
+      $results = array_values($storage->getQuery()->sort('id', 'DESC')->range(0, 1)->execute());
+      $context['sandbox']['max'] = reset($results);
+      $context['sandbox']['total'] = $storage->getQuery()->count()->execute();
+      $context['sandbox']['current'] = 0;
+      $context['sandbox']['start_time'] = microtime(TRUE);
+    }
+
+    if ($context['sandbox']['total'] === 0
+        || $context['sandbox']['current'] === $context['sandbox']['total']
+        || $context['sandbox']['current'] > $context['sandbox']['total']
+    ) {
+      $context['finished'] = 1;
+      return;
+    }
+
+    $ids = $storage->getQuery()->sort('id')->range($context['sandbox']['current'], 50)->execute();
+    /** @var \Drupal\social_auth\Entity\SocialAuth[] $social_auth_users */
+    $social_auth_users = $storage->loadMultiple($ids);
+    $finished = FALSE;
+    foreach ($social_auth_users as $user) {
+      if ($user->id() > $context['sandbox']['max']) {
+        $finished = TRUE;
+        break;
+      }
+      $token = $user->get('token')->value;
+      // Sets token take care of the encryption.
+      $user->setToken($token)->save();
+      $context['sandbox']['current']++;
+    }
+
+    $context['finished'] = ($finished) ? 1 : $context['sandbox']['current'] / $context['sandbox']['total'];
+
+    $context['message'] = t('Updated %n out of %t Social Auth users in time: %time', [
+      '%n' => $context['sandbox']['current'],
+      '%t' => $context['sandbox']['total'],
+      '%time' => ((microtime(TRUE) - $context['sandbox']['start_time']) / 60),
+    ]);
+  }
+
+}
