diff --git a/core/lib/Drupal/Core/File/FileSystem.php b/core/lib/Drupal/Core/File/FileSystem.php
index ebb113c380..8b9e3c9158 100644
--- a/core/lib/Drupal/Core/File/FileSystem.php
+++ b/core/lib/Drupal/Core/File/FileSystem.php
@@ -49,6 +49,13 @@ class FileSystem implements FileSystemInterface {
    */
   protected $streamWrapperManager;
 
+  /**
+   * For keeping the logs for debug purpose.
+   *
+   * @var array
+   */
+  public static $debugLogs = [];
+
   /**
    * Constructs a new FileSystem.
    *
@@ -182,7 +189,9 @@ public function mkdir($uri, $mode = NULL, $recursive = FALSE, $context = NULL) {
     // If the URI has a scheme, don't override the umask - schemes can handle
     // this issue in their own implementation.
     if ($this->uriScheme($uri)) {
-      return $this->mkdirCall($uri, $mode, $recursive, $context);
+      $result = $this->mkdirCall($uri, $mode, $recursive, $context);
+      self::$debugLogs[] = sprintf('Recursively creating directory for uri:%s with result:%b', $uri, $result);
+      return $result;
     }
 
     // If recursive, create each missing component of the parent directory
@@ -212,10 +221,12 @@ public function mkdir($uri, $mode = NULL, $recursive = FALSE, $context = NULL) {
 
         if (!file_exists($recursive_path)) {
           if (!$this->mkdirCall($recursive_path, $mode, FALSE, $context)) {
+            self::$debugLogs[] = sprintf('Unable to create recursive_path: %s', $recursive_path);
             return FALSE;
           }
           // Not necessary to use self::chmod() as there is no scheme.
           if (!chmod($recursive_path, $mode)) {
+            self::$debugLogs[] = sprintf('Unable to change the mode for path: %s', $recursive_path);
             return FALSE;
           }
         }
@@ -227,6 +238,7 @@ public function mkdir($uri, $mode = NULL, $recursive = FALSE, $context = NULL) {
     // Do not check if the top-level directory already exists, as this condition
     // must cause this function to fail.
     if (!$this->mkdirCall($uri, $mode, FALSE, $context)) {
+      self::$debugLogs[] = sprintf('Seems top level directory: %s already exists', $uri);
       return FALSE;
     }
     // Not necessary to use self::chmod() as there is no scheme.
@@ -551,6 +563,7 @@ public function prepareDirectory(&$directory, $options = self::MODIFY_PERMISSION
       if ($options & static::CREATE_DIRECTORY) {
         return @$this->mkdir($directory, NULL, TRUE);
       }
+      FileSystem::$debugLogs[] = sprintf('Directory %s does not exists or not a directory.', $directory);
       return FALSE;
     }
     // The directory exists, so check to see if it is writable.
@@ -559,6 +572,8 @@ public function prepareDirectory(&$directory, $options = self::MODIFY_PERMISSION
       return $this->chmod($directory);
     }
 
+    FileSystem::$debugLogs[] = sprintf('Directory %s is writable or not-writable: %b.', $directory, $writable);
+
     return $writable;
   }
 
diff --git a/core/modules/image/src/Entity/ImageStyle.php b/core/modules/image/src/Entity/ImageStyle.php
index 3baded7cee..3cef7849d1 100644
--- a/core/modules/image/src/Entity/ImageStyle.php
+++ b/core/modules/image/src/Entity/ImageStyle.php
@@ -8,6 +8,7 @@
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\Core\File\Exception\FileException;
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Routing\RequestHelper;
 use Drupal\Core\Site\Settings;
@@ -308,6 +309,11 @@ public function createDerivative($original_uri, $derivative_uri) {
 
     // Build the destination folder tree if it doesn't already exist.
     if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
+      // Log the message for debug purpose.
+      foreach (FileSystem::$debugLogs ?? [] as $log) {
+        \Drupal::logger('image')->error($log);
+      }
+
       \Drupal::logger('image')->error('Failed to create style directory: %directory', ['%directory' => $directory]);
       return FALSE;
     }
