diff --git a/core/modules/media_library/tests/src/FunctionalJavascript/MediaOverviewTest.php b/core/modules/media_library/tests/src/FunctionalJavascript/MediaOverviewTest.php
index e3eaab22e1..14cc29d455 100644
--- a/core/modules/media_library/tests/src/FunctionalJavascript/MediaOverviewTest.php
+++ b/core/modules/media_library/tests/src/FunctionalJavascript/MediaOverviewTest.php
@@ -90,7 +90,7 @@ public function testAdministrationPage() {
     $this->waitForNoText('Turtle');
     $assert_session->pageTextContains('Dog');
     $page->selectFieldOption('Media type', 'Type Two');
-    $page->pressButton('Apply filters');
+    $assert_session->elementExists('css', '#views-exposed-form-media-library-page')->submit();
     $this->waitForText('Turtle');
     $assert_session->pageTextNotContains('Dog');
 
diff --git a/core/modules/views/config/schema/views.data_types.schema.yml b/core/modules/views/config/schema/views.data_types.schema.yml
index 4c88562ce7..69757662d5 100644
--- a/core/modules/views/config/schema/views.data_types.schema.yml
+++ b/core/modules/views/config/schema/views.data_types.schema.yml
@@ -602,6 +602,9 @@ views_pager_sql:
     id:
       type: integer
       label: 'Pager ID'
+    query_type:
+      type: string
+      label: 'Query type'
     tags:
       type: mapping
       label: 'Pager link labels'
diff --git a/core/modules/views/js/ajax_view.es6.js b/core/modules/views/js/ajax_view.es6.js
index 9423bb1d64..90922a1ee2 100644
--- a/core/modules/views/js/ajax_view.es6.js
+++ b/core/modules/views/js/ajax_view.es6.js
@@ -140,18 +140,27 @@
     this.exposedFormAjax = [];
     // Exclude the reset buttons so no AJAX behaviors are bound. Many things
     // break during the form reset phase if using AJAX.
-    $(
+    const type =
+      typeof this.settings.pager_query_method !== 'undefined'
+        ? this.settings.pager_query_method
+        : 'POST';
+    const $exposedFormInput = $(
       'input[type=submit], button[type=submit], input[type=image]',
       this.$exposed_form,
-    )
-      .not('[data-drupal-selector=edit-reset]')
-      .each(function (index) {
-        const selfSettings = $.extend({}, that.element_settings, {
-          base: $(this).attr('id'),
-          element: this,
-        });
-        that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
+    ).not('[data-drupal-selector=edit-reset]');
+
+    once('exposed-form-input', $exposedFormInput).forEach((input, index) => {
+      const selfSettings = $.extend({}, that.element_settings, {
+        base: $(input).attr('id'),
+        element: input,
+        type,
       });
+      // Not sending pager_query_method variable.
+      if (typeof that.settings.pager_query_method !== 'undefined') {
+        delete selfSettings.submit.pager_query_method;
+      }
+      that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
+    });
   };
 
   /**
@@ -197,11 +206,20 @@
       Drupal.Views.parseViewArgs(href, this.settings.view_base_path),
     );
 
+    const type =
+      typeof this.settings.pager_query_method !== 'undefined'
+        ? this.settings.pager_query_method
+        : 'POST';
     const selfSettings = $.extend({}, this.element_settings, {
       submit: viewData,
       base: false,
       element: link,
+      type,
     });
+    // Not send pager_query_method variable.
+    if (typeof this.settings.pager_query_method !== 'undefined') {
+      delete selfSettings.submit.pager_query_method;
+    }
     this.pagerAjax = Drupal.ajax(selfSettings);
   };
 
diff --git a/core/modules/views/js/ajax_view.js b/core/modules/views/js/ajax_view.js
index 225836f4f8..a6ae7048fb 100644
--- a/core/modules/views/js/ajax_view.js
+++ b/core/modules/views/js/ajax_view.js
@@ -80,11 +80,19 @@
   Drupal.views.ajaxView.prototype.attachExposedFormAjax = function () {
     var that = this;
     this.exposedFormAjax = [];
-    $('input[type=submit], button[type=submit], input[type=image]', this.$exposed_form).not('[data-drupal-selector=edit-reset]').each(function (index) {
+    var type = typeof this.settings.pager_query_method !== 'undefined' ? this.settings.pager_query_method : 'POST';
+    var $exposedFormInput = $('input[type=submit], button[type=submit], input[type=image]', this.$exposed_form).not('[data-drupal-selector=edit-reset]');
+    once('exposed-form-input', $exposedFormInput).forEach(function (input, index) {
       var selfSettings = $.extend({}, that.element_settings, {
-        base: $(this).attr('id'),
-        element: this
+        base: $(input).attr('id'),
+        element: input,
+        type: type
       });
+
+      if (typeof that.settings.pager_query_method !== 'undefined') {
+        delete selfSettings.submit.pager_query_method;
+      }
+
       that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
     });
   };
@@ -102,11 +110,18 @@
     var viewData = {};
     var href = $link.attr('href');
     $.extend(viewData, this.settings, Drupal.Views.parseQueryString(href), Drupal.Views.parseViewArgs(href, this.settings.view_base_path));
+    var type = typeof this.settings.pager_query_method !== 'undefined' ? this.settings.pager_query_method : 'POST';
     var selfSettings = $.extend({}, this.element_settings, {
       submit: viewData,
       base: false,
-      element: link
+      element: link,
+      type: type
     });
+
+    if (typeof this.settings.pager_query_method !== 'undefined') {
+      delete selfSettings.submit.pager_query_method;
+    }
+
     this.pagerAjax = Drupal.ajax(selfSettings);
   };
 
diff --git a/core/modules/views/src/Ajax/ViewAjaxResponse.php b/core/modules/views/src/Ajax/ViewAjaxResponse.php
index d19180044f..8b3e069a2a 100644
--- a/core/modules/views/src/Ajax/ViewAjaxResponse.php
+++ b/core/modules/views/src/Ajax/ViewAjaxResponse.php
@@ -3,6 +3,7 @@
 namespace Drupal\views\Ajax;
 
 use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Cache\CacheableResponseTrait;
 use Drupal\views\ViewExecutable;
 
 /**
@@ -12,6 +13,8 @@
  */
 class ViewAjaxResponse extends AjaxResponse {
 
+  use CacheableResponseTrait;
+
   /**
    * The view executed on this ajax request.
    *
diff --git a/core/modules/views/src/Controller/ViewAjaxController.php b/core/modules/views/src/Controller/ViewAjaxController.php
index d765629d86..8d70db2713 100644
--- a/core/modules/views/src/Controller/ViewAjaxController.php
+++ b/core/modules/views/src/Controller/ViewAjaxController.php
@@ -12,7 +12,6 @@
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Render\BubbleableMetadata;
-use Drupal\Core\Render\RenderContext;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Routing\RedirectDestinationInterface;
 use Drupal\views\Ajax\ScrollTopCommand;
@@ -111,10 +110,10 @@ public static function create(ContainerInterface $container) {
    *   Thrown when the view was not found.
    */
   public function ajaxView(Request $request) {
-    $name = $request->request->get('view_name');
-    $display_id = $request->request->get('view_display_id');
+    $name = $request->get('view_name');
+    $display_id = $request->get('view_display_id');
     if (isset($name) && isset($display_id)) {
-      $args = $request->request->get('view_args', '');
+      $args = $request->get('view_args', '');
       $args = $args !== '' ? explode('/', Html::decodeEntities($args)) : [];
 
       // Arguments can be empty, make sure they are passed on as NULL so that
@@ -123,10 +122,10 @@ public function ajaxView(Request $request) {
         return ($arg == '' ? NULL : $arg);
       }, $args);
 
-      $path = $request->request->get('view_path');
-      $dom_id = $request->request->get('view_dom_id');
+      $path = $request->get('view_path');
+      $dom_id = $request->get('view_dom_id');
       $dom_id = isset($dom_id) ? preg_replace('/[^a-zA-Z0-9_-]+/', '-', $dom_id) : NULL;
-      $pager_element = $request->request->get('pager_element');
+      $pager_element = $request->get('pager_element');
       $pager_element = isset($pager_element) ? intval($pager_element) : NULL;
 
       $response = new ViewAjaxResponse();
@@ -163,8 +162,8 @@ public function ajaxView(Request $request) {
           $this->currentPath->setPath('/' . ltrim($path, '/'), $request);
         }
 
-        // Add all POST data, because AJAX is always a post and many things,
-        // such as tablesorts, exposed filters and paging assume GET.
+        // Add all POST data, because many things, such as tablesorts, exposed
+        // filters and paging assume GET.
         $request_all = $request->request->all();
         unset($request_all['ajax_page_state']);
         $query_all = $request->query->all();
@@ -189,16 +188,10 @@ public function ajaxView(Request $request) {
         // Reuse the same DOM id so it matches that in drupalSettings.
         $view->dom_id = $dom_id;
 
-        $context = new RenderContext();
-        $preview = $this->renderer->executeInRenderContext($context, function () use ($view, $display_id, $args) {
-          return $view->preview($display_id, $args);
-        });
-        if (!$context->isEmpty()) {
-          $bubbleable_metadata = $context->pop();
-          BubbleableMetadata::createFromRenderArray($preview)
-            ->merge($bubbleable_metadata)
-            ->applyTo($preview);
-        }
+        // Build the view and add metadata to the response.
+        $preview = $view->buildRenderable($display_id, $args);
+        $cache_metadata = BubbleableMetadata::createFromRenderArray($preview);
+        $response->addCacheableDependency($cache_metadata);
         $response->addCommand(new ReplaceCommand(".js-view-dom-id-$dom_id", $preview));
 
         return $response;
diff --git a/core/modules/views/src/Plugin/views/pager/SqlBase.php b/core/modules/views/src/Plugin/views/pager/SqlBase.php
index a3f8a0a4c6..0514018b5f 100644
--- a/core/modules/views/src/Plugin/views/pager/SqlBase.php
+++ b/core/modules/views/src/Plugin/views/pager/SqlBase.php
@@ -67,6 +67,7 @@ protected function defineOptions() {
     $options['items_per_page'] = ['default' => 10];
     $options['offset'] = ['default' => 0];
     $options['id'] = ['default' => 0];
+    $options['query_type'] = ['default' => 'POST'];
     $options['total_pages'] = ['default' => ''];
     $options['expose'] = [
       'contains' => [
@@ -127,6 +128,18 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
       '#default_value' => $this->options['total_pages'],
     ];
 
+    if ($this->displayHandler->getOption('use_ajax')) {
+      $form['query_type'] = [
+        '#type' => 'select',
+        '#title' => $this->t('Pager query type'),
+        '#options' => [
+          'GET' => $this->t('GET'),
+          'POST' => $this->t('POST'),
+        ],
+        '#default_value' => $this->options['query_type'],
+      ];
+    }
+
     $form['tags'] = [
       '#type' => 'details',
       '#open' => TRUE,
diff --git a/core/modules/views/tests/modules/request_test/request_test.info.yml b/core/modules/views/tests/modules/request_test/request_test.info.yml
new file mode 100644
index 0000000000..5611119bc4
--- /dev/null
+++ b/core/modules/views/tests/modules/request_test/request_test.info.yml
@@ -0,0 +1,5 @@
+name: 'Request test'
+type: module
+description: 'Support module for testing events involving requests.'
+package: Testing
+version: VERSION
diff --git a/core/modules/views/tests/modules/request_test/request_test.services.yml b/core/modules/views/tests/modules/request_test/request_test.services.yml
new file mode 100644
index 0000000000..d71c33c339
--- /dev/null
+++ b/core/modules/views/tests/modules/request_test/request_test.services.yml
@@ -0,0 +1,6 @@
+services:
+  request_test.ajax_request_counter:
+    class: Drupal\request_test\EventSubscriber\AjaxRequestSubscriber
+    arguments: ['@state']
+    tags:
+      - { name: event_subscriber }
diff --git a/core/modules/views/tests/modules/request_test/src/EventSubscriber/AjaxRequestSubscriber.php b/core/modules/views/tests/modules/request_test/src/EventSubscriber/AjaxRequestSubscriber.php
new file mode 100644
index 0000000000..86aff6243d
--- /dev/null
+++ b/core/modules/views/tests/modules/request_test/src/EventSubscriber/AjaxRequestSubscriber.php
@@ -0,0 +1,70 @@
+<?php
+
+namespace Drupal\request_test\EventSubscriber;
+
+use Drupal\Core\EventSubscriber\AjaxResponseSubscriber;
+use Drupal\Core\State\StateInterface;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\KernelEvents;
+
+/**
+ * Counts ajax requests.
+ */
+class AjaxRequestSubscriber implements EventSubscriberInterface {
+
+  public const STORAGE_KEY = 'request_count';
+
+  /**
+   * @var \Drupal\Core\State\StateInterface
+   */
+  private StateInterface $state;
+
+  /**
+   * RequestSubscriber constructor.
+   *
+   * @param \Drupal\Core\State\StateInterface $state
+   *   Storage that persists between multiple requests.
+   */
+  public function __construct(StateInterface $state) {
+    $this->state = $state;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    $events = [];
+    $events[KernelEvents::REQUEST][] = ['countAjaxRequest'];
+    return $events;
+  }
+
+  /**
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   *   Event callback.
+   */
+  public function countAjaxRequest(RequestEvent $event): void {
+    if (!$event->isMasterRequest()) {
+      return;
+    }
+
+    $request = $event->getRequest();
+
+    if (!$request->get(AjaxResponseSubscriber::AJAX_REQUEST_PARAMETER)) {
+      return;
+    }
+
+    $requestCount = $this->state->get(self::STORAGE_KEY, 0);
+    $requestCount++;
+
+    $this->state->set(self::STORAGE_KEY, $requestCount);
+  }
+
+  /**
+   * @return int
+   */
+  public function getCount(): int {
+    return $this->state->get(self::STORAGE_KEY, 0);
+  }
+
+}
diff --git a/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_block_ajax.yml b/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_block_ajax.yml
new file mode 100644
index 0000000000..083f464467
--- /dev/null
+++ b/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_block_ajax.yml
@@ -0,0 +1,79 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - node
+id: test_exposed_block_ajax
+label: ''
+module: views
+description: ''
+tag: ''
+base_table: node_field_data
+base_field: nid
+display:
+  default:
+    display_options:
+      title: 'Test Exposed Block Ajax'
+      access:
+        type: none
+      cache:
+        type: tag
+      exposed_form:
+        options:
+          submit_button: Apply
+          reset_button: true
+        type: basic
+      filters:
+        type:
+          expose:
+            identifier: type
+            label: 'Content: Type'
+            operator_id: type_op
+            reduce: false
+          exposed: true
+          field: type
+          id: type
+          table: node_field_data
+          plugin_id: in_operator
+          entity_type: node
+          entity_field: type
+      pager:
+        type: full
+      query:
+        options:
+          query_comment: ''
+        type: views_query
+      style:
+        type: default
+      row:
+        type: 'entity:node'
+      use_ajax: true
+    display_plugin: default
+    display_title: Default
+    id: default
+    position: 0
+  page_1:
+    display_options:
+      path: test_exposed_block_ajax
+      exposed_block: true
+    display_plugin: page
+    display_title: Page
+    id: page_1
+    position: 0
+  block_1:
+    display_plugin: block
+    id: block_1
+    display_title: Block
+    position: 2
+    display_options:
+      display_extenders: {  }
+      exposed_block: true
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
diff --git a/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php b/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php
index 8a8e864106..16a6295b47 100644
--- a/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php
+++ b/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php
@@ -20,9 +20,9 @@ class BlockExposedFilterAJAXTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected static $modules = ['node', 'views', 'block', 'views_test_config'];
+  protected static $modules = ['node', 'views', 'block', 'views_test_config', 'request_test'];
 
-  public static $testViews = ['test_block_exposed_ajax', 'test_block_exposed_ajax_with_page'];
+  public static $testViews = ['test_block_exposed_ajax', 'test_block_exposed_ajax_with_page', 'test_exposed_block_ajax'];
 
   /**
    * {@inheritdoc}
@@ -93,4 +93,20 @@ public function testExposedFilteringAndReset() {
     $this->assertSession()->addressEquals('some-path');
   }
 
+  public function testMultipleExposedBlocks() {
+    // Place a view with exposed filters put in multiple exposed blocks on a single page.
+    $this->drupalPlaceBlock('views_block:test_exposed_block_ajax-block_1');
+    $this->drupalPlaceBlock('views_exposed_filter_block:test_exposed_block_ajax-block_1');
+    $this->drupalPlaceBlock('views_exposed_filter_block:test_exposed_block_ajax-block_1');
+    $this->getSession()->reload();
+
+    // Filter by page type.
+    $this->submitForm(['type' => 'page'], 'Apply');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    // Make sure that only single request has been generated.
+    $ajaxRequestCounter = $this->container->get('request_test.ajax_request_counter');
+    $this->assertEquals(1, $ajaxRequestCounter->getCount());
+  }
+
 }
diff --git a/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php b/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php
index 429e71e3e6..f323c5a910 100644
--- a/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php
+++ b/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php
@@ -128,8 +128,8 @@ public function testMissingViewName() {
    */
   public function testMissingView() {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
+    $request->query->set('view_name', 'test_view');
+    $request->query->set('view_display_id', 'page_1');
 
     $this->viewStorage->expects($this->once())
       ->method('load')
@@ -254,13 +254,13 @@ public function testAjaxViewWithoutAjax() {
    */
   public function testAjaxViewWithArguments() {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
-    $request->request->set('view_args', 'arg1/arg2');
+    $request->query->set('view_name', 'test_view');
+    $request->query->set('view_display_id', 'page_1');
+    $request->query->set('view_args', 'arg1/arg2');
 
     [$view, $executable] = $this->setupValidMocks();
     $executable->expects($this->once())
-      ->method('preview')
+      ->method('buildRenderable')
       ->with('page_1', ['arg1', 'arg2']);
 
     $response = $this->viewAjaxController->ajaxView($request);
@@ -274,14 +274,14 @@ public function testAjaxViewWithArguments() {
    */
   public function testAjaxViewWithEmptyArguments() {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
+    $request->query->set('view_name', 'test_view');
+    $request->query->set('view_display_id', 'page_1');
     // Simulate a request that has a second, empty argument.
-    $request->request->set('view_args', 'arg1/');
+    $request->query->set('view_args', 'arg1/');
 
     [$view, $executable] = $this->setupValidMocks();
     $executable->expects($this->once())
-      ->method('preview')
+      ->method('buildRenderable')
       ->with('page_1', $this->identicalTo(['arg1', NULL]));
 
     $response = $this->viewAjaxController->ajaxView($request);
@@ -295,13 +295,13 @@ public function testAjaxViewWithEmptyArguments() {
    */
   public function testAjaxViewWithHtmlEntityArguments() {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
-    $request->request->set('view_args', 'arg1 &amp; arg2/arg3');
+    $request->query->set('view_name', 'test_view');
+    $request->query->set('view_display_id', 'page_1');
+    $request->query->set('view_args', 'arg1 &amp; arg2/arg3');
 
     [$view, $executable] = $this->setupValidMocks();
     $executable->expects($this->once())
-      ->method('preview')
+      ->method('buildRenderable')
       ->with('page_1', ['arg1 & arg2', 'arg3']);
 
     $response = $this->viewAjaxController->ajaxView($request);
@@ -314,12 +314,27 @@ public function testAjaxViewWithHtmlEntityArguments() {
    * Tests a valid view with a pager.
    */
   public function testAjaxViewWithPager() {
+    $this->ajaxViewWithPagerTest();
+  }
+
+  /**
+   * Generate a request for a paged view.
+   *
+   * @param bool $post
+   *   Whether to structure the request as a POST.
+   */
+  protected function ajaxViewWithPagerTest($post = FALSE) {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
+    $param_property = 'query';
+    if ($post) {
+      $request->setMethod('POST');
+      $param_property = 'request';
+    }
+    $request->{$param_property}->set('view_name', 'test_view');
+    $request->{$param_property}->set('view_display_id', 'page_1');
     $dom_id = $this->randomMachineName(20);
-    $request->request->set('view_dom_id', $dom_id);
-    $request->request->set('pager_element', '0');
+    $request->{$param_property}->set('view_dom_id', $dom_id);
+    $request->{$param_property}->set('pager_element', '0');
 
     [$view, $executable] = $this->setupValidMocks();
 
@@ -379,7 +394,7 @@ protected function setupValidMocks($use_ajax = self::USE_AJAX) {
       ->method('setDisplay')
       ->willReturn(TRUE);
     $executable->expects($this->atMost(1))
-      ->method('preview')
+      ->method('buildRenderable')
       ->will($this->returnValue(['#markup' => 'View result']));
 
     $this->executableFactory->expects($this->once())
diff --git a/core/modules/views/views.module b/core/modules/views/views.module
index 9e03548ee2..2ec79989f6 100644
--- a/core/modules/views/views.module
+++ b/core/modules/views/views.module
@@ -65,6 +65,7 @@ function views_views_pre_render($view) {
           // To fit multiple views on a page, the programmer may have
           // overridden the display's pager_element.
           'pager_element' => isset($view->pager) ? $view->pager->getPagerId() : 0,
+          'pager_query_method' => !empty($view->pager->options['query_type']) ? $view->pager->options['query_type'] : 'POST',
         ],
       ],
     ];
