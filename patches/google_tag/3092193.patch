diff --git a/google_tag.services.yml b/google_tag.services.yml
index b5b5251..41c2ccd 100644
--- a/google_tag.services.yml
+++ b/google_tag.services.yml
@@ -2,3 +2,9 @@ services:
   google_tag.container_manager:
     class: Drupal\google_tag\Entity\ContainerManager
     arguments: ['@entity_type.manager', '@config.factory', '@file_system', '@cache.data', '@messenger', '@logger.factory']
+  cache.google_tag:
+    class: Drupal\Core\Cache\CacheBackendInterface
+    tags:
+      - { name: cache.bin }
+    factory: cache_factory:get
+    arguments: [google_tag]
diff --git a/src/Entity/Container.php b/src/Entity/Container.php
index e2d5d60..1f74513 100644
--- a/src/Entity/Container.php
+++ b/src/Entity/Container.php
@@ -8,6 +8,7 @@ use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Core\Cache\Cache;
 
 /**
  * Defines the container configuration entity.
@@ -581,7 +582,19 @@ EOS;
    *   The tag array.
    */
   public function inlineTag($type, $weight) {
-    $contents = $this->getSnippetContents($type);
+    // Use google_tag cache bin to get the contents.
+    // Note: File operations are generally heavier than cache operations and
+    // additionally we always have an option of memcache on top of this.
+    $cid = 'google_tag_inline_contents';
+
+    if ($cache = $this->getCacheBackend()->get($cid)) {
+      $contents = $cache->data;
+    }
+    else {
+      $contents = $this->getSnippetContents($type);
+
+      $this->getCacheBackend()->set($cid, $contents, CACHE::PERMANENT, $this->getCacheTags());
+    }
     $attachment = [
       $contents ? [
         '#type' => 'html_tag',
@@ -610,14 +623,27 @@ EOS;
     // Note: depending on the theme, this may not place the snippet immediately
     // after the body tag but should be close and it can be altered.
 
-    // @see https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/group/theme_render/8.2.x
-    // The markup is passed through \Drupal\Component\Utility\Xss::filterAdmin()
-    // which strips known vectors while allowing a permissive list of HTML tags
-    // that are not XSS vectors. (e.g., <script> and <style> are not allowed.)
-    // As markup, core removes the 'style' attribute from the noscript snippet.
-    // With the inline template type, core does not alter the noscript snippet.
+    // Use google_tag cache bin to get the contents.
+    // Note: File operations are generally heavier than cache operations and
+    // additionally we always have an option of memcache on top of this.
+    $cid = 'google_tag_noscript_contents';
+
+    if ($cache = $this->getCacheBackend()->get($cid)) {
+      $contents = $cache->data;
+    }
+    else {
+      // @see https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/group/theme_render/8.2.x
+      // The markup is passed through \Drupal\Component\Utility\Xss::filterAdmin()
+      // which strips known vectors while allowing a permissive list of HTML tags
+      // that are not XSS vectors. (e.g., <script> and <style> are not allowed.)
+      // As markup, core removes the 'style' attribute from the noscript snippet.
+      // With the inline template type, core does not alter the noscript snippet.
+
+      $contents = $this->getSnippetContents($type);
+
+      $this->getCacheBackend()->set($cid, $contents, CACHE::PERMANENT, $this->getCacheTags());
+    }
 
-    $contents = $this->getSnippetContents($type);
     $attachment = $contents ? [
       "google_tag_{$type}_tag__{$this->id()}" => [
         '#type' => 'inline_template',
@@ -724,4 +750,14 @@ EOS;
     return $this->conditionPluginManager;
   }
 
+  /**
+   * Get cache backend for Google Tag data.
+   *
+   * @return \Drupal\Core\Cache\CacheBackendInterface
+   *   Cache Backend.
+   */
+  protected function getCacheBackend() {
+    return \Drupal::cache('google_tag');
+  }
+
 }
 