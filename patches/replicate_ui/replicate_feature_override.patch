diff --git a/config/install/replicate_ui.settings.yml b/config/install/replicate_ui.settings.yml
index aaaeeb5..0f0881b 100644
--- a/config/install/replicate_ui.settings.yml
+++ b/config/install/replicate_ui.settings.yml
@@ -1 +1,2 @@
 entity_types: []
+content_types: []
diff --git a/config/schema/replicate_ui.schema.yml b/config/schema/replicate_ui.schema.yml
index dc155db..efea996 100644
--- a/config/schema/replicate_ui.schema.yml
+++ b/config/schema/replicate_ui.schema.yml
@@ -6,3 +6,7 @@ replicate_ui.settings:
       type: sequence
       sequence:
         type: string
+    content_types:
+      type: sequence
+      sequence:
+        type: string
diff --git a/replicate_ui.services.yml b/replicate_ui.services.yml
index 9a2bdff..5379516 100644
--- a/replicate_ui.services.yml
+++ b/replicate_ui.services.yml
@@ -7,6 +7,6 @@ services:
 
   replicate_ui.access_check:
     class: \Drupal\replicate_ui\ReplicateAccessChecker
-    arguments: ['@access_check.permission', '@access_check.entity']
+    arguments: ['@access_check.permission', '@access_check.entity', '@config.factory']
     tags:
       - { name: access_check, applies_to: _replicate_access }
diff --git a/src/Form/ReplicateUISettingsForm.php b/src/Form/ReplicateUISettingsForm.php
index fa8d532..5bd795a 100644
--- a/src/Form/ReplicateUISettingsForm.php
+++ b/src/Form/ReplicateUISettingsForm.php
@@ -11,6 +11,7 @@ use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 
 class ReplicateUISettingsForm extends ConfigFormBase {
 
@@ -27,6 +28,13 @@ class ReplicateUISettingsForm extends ConfigFormBase {
   protected $routerBuilder;
 
   /**
+   * The Entity Bundle Type Info.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   */
+  protected $entityTypeBundleInfo;
+
+  /**
    * Creates a new ReplicateUISettingsForm instance.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
@@ -35,11 +43,14 @@ class ReplicateUISettingsForm extends ConfigFormBase {
    *   The config factory.
    * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
    *   The router builder.
+   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   *   The entity type bundle.
    */
-  public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
+  public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder, EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
     parent::__construct($config_factory);
     $this->entityTypeManager = $entityTypeManager;
     $this->routerBuilder = $router_builder;
+    $this->entityTypeBundleInfo = $entityTypeBundleInfo;
   }
 
   /**
@@ -49,7 +60,8 @@ class ReplicateUISettingsForm extends ConfigFormBase {
     return new static(
       $container->get('entity_type.manager'),
       $container->get('config.factory'),
-      $container->get('router.builder')
+      $container->get('router.builder'),
+      $container->get('entity_type.bundle.info')
     );
   }
 
@@ -84,8 +96,39 @@ class ReplicateUISettingsForm extends ConfigFormBase {
         return $entity_type->getLabel();
       }, $content_entity_types),
       '#default_value' => $this->config('replicate_ui.settings')->get('entity_types'),
+      '#ajax' => [
+        'callback' => [$this, 'getContentTypesCallback'],
+        'wrapper' => 'content-types-list',
+        'method' => 'replace',
+        'event' => 'change',
+      ],
+    ];
+
+    $form['content_types'] = [
+      '#type' => 'container',
+      '#attributes' => ['id' => 'content-types-list'],
     ];
 
+    $entity_types = $this->config('replicate_ui.settings')->get('entity_types');
+    $form_values = $form_state->getValues();
+
+    if (!empty($form_values['entity_types']['node']) || (in_array('node', $entity_types))) {
+      $entity_bundles = $this->getEntityBundles();
+      foreach ($entity_bundles as $key => $bundle) {
+        $options[$key] = $bundle['label'];
+      }
+      $form['content_types']['list'] = [
+        '#type' => 'checkboxes',
+        '#open' => TRUE,
+        '#title' => $this->t('Content Types'),
+        '#type' => 'checkboxes',
+        '#title' => $this->t('Choose content types that you want to replicate'),
+        '#options' => $options,
+        '#default_value' => $this->config('replicate_ui.settings')->get('content_types'),
+      ];
+    }
+
+    return $form;
     return $form;
   }
 
@@ -100,8 +143,42 @@ class ReplicateUISettingsForm extends ConfigFormBase {
       ->save();
     // @todo This should be done through a config save subscriber and it should
     // also invalidate the render/local tasks cache.
+
+    $form_state->cleanValues();
+    $form_values = $form_state->getValues();
+
+    $bundle_names = [];
+    if (!empty($form_values['entity_types']['node'])) {
+      foreach (array_filter($form_values['list']) as $key => $type) {
+        $bundle_names[$key] = $type;
+      }
+    }
+
+    $this->config('replicate_ui.settings')->set('content_types', $bundle_names)->save();
+
     $this->routerBuilder->setRebuildNeeded();
     Cache::invalidateTags(['entity_types', 'views_data']);
   }
 
+  /**
+   * Ajax callback to return content types list.
+   */
+  public static function getContentTypesCallback(array $form, FormStateInterface $form_state) {
+    $form_values = $form_state->getValues();
+    if (!empty($form_values['entity_types']['node'])) {
+      return $form['content_types'];
+    }
+  }
+
+  /**
+   * Get list of bundles.
+   */
+  public function getEntityBundles() {
+    static $bundles;
+    if (!isset($bundles)) {
+      $bundles = $this->entityTypeBundleInfo->getBundleInfo('node');
+    }
+    return $bundles;
+  }
+
 }
diff --git a/src/ReplicateAccessChecker.php b/src/ReplicateAccessChecker.php
index 81903c2..ffa08bb 100644
--- a/src/ReplicateAccessChecker.php
+++ b/src/ReplicateAccessChecker.php
@@ -8,6 +8,8 @@ use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\Access\PermissionAccessCheck;
 use Symfony\Component\Routing\Route;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Access\AccessResult;
 
 /**
  * Access checker which checks entity create/view access as well a permission.
@@ -25,17 +27,36 @@ class ReplicateAccessChecker implements AccessInterface {
   protected $entityAccessChecker;
 
   /**
+   * Config Factory Interface.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
    * Creates a new ReplicateAccessChecker instance.
    *
    * @param \Drupal\user\Access\PermissionAccessCheck $permAccessChecker
+   *   Permission Access Check.
    * @param \Drupal\Core\Entity\EntityAccessCheck $entityAccessChecker
+   *   Entity Access Check.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   Config factory.
    */
-  public function __construct(PermissionAccessCheck $permAccessChecker, EntityAccessCheck $entityAccessChecker) {
+  public function __construct(PermissionAccessCheck $permAccessChecker, EntityAccessCheck $entityAccessChecker, ConfigFactoryInterface $config_factory) {
     $this->permAccessChecker = $permAccessChecker;
     $this->entityAccessChecker = $entityAccessChecker;
+    $this->configFactory = $config_factory;
   }
 
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
+    $config_content_types = $this->configFactory->get('replicate_ui.settings')->get('content_types');
+    $node_type = $route_match->getParameter('node')->bundle();
+    // Return if node types does not matches with replicate config.
+    if (!(in_array($node_type, $config_content_types))) {
+      return AccessResult::neutral();
+    }
+
     $create_fake_route = clone $route;
     $create_fake_route->setRequirement('_entity_access', $route->getDefault('entity_type_id') . '.create');
     $view_fake_route = clone $route;
-- 
2.7.4

