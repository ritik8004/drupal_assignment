diff --git a/modules/acq_sku/acq_sku.module b/modules/acq_sku/acq_sku.module
index d9263b9..c0c96aa 100755
--- a/modules/acq_sku/acq_sku.module
+++ b/modules/acq_sku/acq_sku.module
@@ -37,3 +37,50 @@ function acq_sku_preprocess_acq_sku(&$variables) {
   }
 
 }
+
+/**
+ * Function to allow custom modules to add base fields for acq_sku entity type.
+ *
+ * @param array $fields
+ *   An associative array containing field_machine_name as key and following
+ *   data in value:
+ *   - parent: (Required) Parent key in the array where to look for data.
+ *   - label: (Required) Label to be used for admin forms and display.
+ *   - description: Description of the field to be used in admin forms.
+ *   - cardinality: Number of values allowed to be stored.
+ *   - type: Type of the field.
+ *   - weight: Default weight of the field in form and display.
+ *   - configurable: Whether the field is part of configurable options.
+ *   - visible_view: Whether the field should be visible while viewing content.
+ *   - visible_form: Whether the field should be visible in form.
+ *   - serialize: (Optional) Should the data be stored as serialized.
+ */
+function acq_sku_add_base_fields(array $fields) {
+  // Get the fields from config.
+  $configFactory = \Drupal::configFactory()->getEditable('acq_sku.base_field_additions');
+  $additionalFields = $configFactory->getRawData();
+
+  // Initialise with array if required.
+  $additionalFields = empty($additionalFields) || !is_array($additionalFields) ? [] : $additionalFields;
+
+  foreach ($fields as $machine_name => $field) {
+    // Confirm we have minimum required data available to create the fields.
+    if (empty($field['label'])) {
+      throw new \Exception('Field Label cannot be empty.');
+    }
+
+    // Check if the field is already available in config.
+    if (isset($additionalFields[$machine_name])) {
+      throw new \Exception('Field machine name used already.');
+    }
+
+    // Add the field to storedFields so we store them to config.
+    $additionalFields[$machine_name] = $field;
+  }
+
+  // Store the fields in config.
+  $configFactory->setData($additionalFields)->save();
+
+  // Apply entity updates.
+  \Drupal::service("entity.definition_update_manager")->applyUpdates();
+}
diff --git a/modules/acq_sku/src/Entity/SKU.php b/modules/acq_sku/src/Entity/SKU.php
index 0de4ab1..383f67d 100755
--- a/modules/acq_sku/src/Entity/SKU.php
+++ b/modules/acq_sku/src/Entity/SKU.php
@@ -7,6 +7,7 @@ use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\acq_commerce\SKUInterface;
+use Drupal\file\Entity\File;
 use Drupal\user\UserInterface;
 
 /**
@@ -50,6 +51,13 @@ use Drupal\user\UserInterface;
 class SKU extends ContentEntityBase implements SKUInterface {
 
   /**
+   * Processed media array.
+   *
+   * @var array
+   */
+  protected $media_data = [];
+
+  /**
    * {@inheritdoc}
    *
    * When a new entity instance is added, set the user_id entity reference to
@@ -77,6 +85,138 @@ class SKU extends ContentEntityBase implements SKUInterface {
   }
 
   /**
+   * Function to return media files for a SKU.
+   *
+   * @param bool $reset
+   *   Flag to reset cache and generate array again from serialized string.
+   *
+   * @return array
+   *   Array of media files.
+   */
+  public function getMedia($reset = FALSE) {
+    if (!$reset && !empty($this->media_data)) {
+      return $this->media_data;
+    }
+
+    if ($media_data = $this->get('media')->getString()) {
+      $update_sku = FALSE;
+
+      $media_data_full = unserialize($media_data);
+
+      if (empty($media_data_full)) {
+        return [];
+      }
+
+      // @TODO: Remove this hard coded fix after getting answer why we have empty
+      // second array index and why all media come in first array index.
+      $media_data = reset($media_data_full);
+
+      foreach ($media_data as &$data) {
+        if ($data['media_type'] == 'image') {
+          if (empty($data['fid'])) {
+            try {
+              // Prepare the File object when we access it the first time.
+              $data['fid'] = $this->downloadMediaImage($data);
+              $update_sku = TRUE;
+            }
+            catch (\Exception $e) {
+              \Drupal::logger('acq_sku')->error($e->getMessage());
+              continue;
+            }
+          }
+
+          $data['file'] = File::load($data['fid']);
+
+          if (empty($data['label'])) {
+            $data['label'] = $this->label();
+          }
+        }
+
+        $this->media_data[$data['position']] = $data;
+      }
+
+      if ($update_sku) {
+        // @TODO: Remove this hard coded fix after getting answer why we have
+        // empty second array index and why all media come in first array index.
+        $media_data_full[0] = $media_data;
+        $this->get('media')->setValue(serialize($media_data_full));
+        $this->save();
+      }
+    }
+
+    // Sort them by position again to ensure it works everytime.
+    ksort($this->media_data);
+
+    return $this->media_data;
+  }
+
+  /**
+   * Function to save image file into public dir.
+   *
+   * @param array $data
+   *   File data.
+   *
+   * @return int
+   *   File id.
+   */
+  protected function downloadMediaImage(array $data) {
+    // Preparing args for all info/error messages.
+    $args = ['@file' => $data['file'], '@sku_id' => $this->id()];
+
+    // Download the file contents.
+    $file_data = file_get_contents($data['file']);
+
+    // Check to ensure errors like 404, 403, etc. are catched and empty file
+    // not saved in SKU.
+    if (empty($file_data)) {
+      throw new \Exception(new FormattableMarkup('Failed to download file "@file" for SKU id @sku_id.', $args));
+    }
+
+    // Get the path part in the url, remove hostname.
+    $path = parse_url($data['file'], PHP_URL_PATH);
+
+    // Remove slashes from start and end.
+    $path = trim($path, '/');
+
+    // Get the file name.
+    $file_name = basename($path);
+
+    // Prepare the directory path.
+    $directory = 'public://media/' . str_replace('/' . $file_name, '', $path);
+
+    // Prepare the directory.
+    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
+
+    // Save the file as file entity.
+    /** @var \Drupal\file\Entity\File $file */
+    if ($file = file_save_data($file_data, $directory . '/' . $file_name, FILE_EXISTS_REPLACE)) {
+      return $file->id();
+    }
+    else {
+      throw new \Exception(new FormattableMarkup('Failed to save file "@file" for SKU id @sku_id.', $args));
+    }
+  }
+
+  /**
+   * Function to return first image from media files for a SKU.
+   *
+   * @return array
+   *   Array of media files.
+   */
+  public function getThumbnail() {
+    $media = $this->getMedia();
+
+    // We loop through all the media items and return the first image.
+    foreach ($media as $media_item) {
+      if ($media_item['media_type'] == 'image') {
+        return $media_item;
+      }
+    }
+
+    return [];
+  }
+
+  /**
    * Get plugin instance for current object.
    *
    * @return null|object
@@ -296,6 +436,16 @@ class SKU extends ContentEntityBase implements SKUInterface {
       ->setDisplayConfigurable('form', TRUE)
       ->setDisplayConfigurable('view', TRUE);
 
+    $fields['media'] = BaseFieldDefinition::create('text_long')
+      ->setLabel(t('Media'))
+      ->setDescription(t('Store all the media files info.'))
+      ->setDisplayOptions('form', [
+        'type' => 'text_textfield',
+        'weight' => 8,
+      ])
+      ->setDisplayConfigurable('form', TRUE)
+      ->setDisplayConfigurable('view', TRUE);
+
     $fields['attributes'] = BaseFieldDefinition::create('key_value')
       ->setLabel(t('Attributes'))
       ->setDescription(t('Non-Drupal native product data.'))
@@ -315,6 +465,84 @@ class SKU extends ContentEntityBase implements SKUInterface {
       ->setLabel(t('Changed'))
       ->setDescription(t('The time that the entity was last edited.'));
 
+    // Get all the fields added by other modules and add them as base fields.
+    $additionalFields = \Drupal::config('acq_sku.base_field_additions')->getRawData();
+
+    // Get the default weight increment value from variables.
+    $defaultWeightIncrement = \Drupal::state()->get('acq_sku.base_field_weight_increment', 20);
+
+    // Check if we have additional fields to be added as base fields.
+    if (!empty($additionalFields) && is_array($additionalFields)) {
+      foreach ($additionalFields as $machine_name => $field_info) {
+        // Initialise the field variable.
+        $field = NULL;
+
+        // Showing the fields at the bottom.
+        $weight = $defaultWeightIncrement + count($fields);
+
+        switch ($field_info['type']) {
+          case 'string':
+            $field = BaseFieldDefinition::create('string');
+
+            if ($field_info['visible_view']) {
+              $field->setDisplayOptions('view', [
+                'label' => 'above',
+                'type' => 'string',
+                'weight' => $weight,
+              ]);
+            }
+
+            if ($field_info['visible_form']) {
+              $field->setDisplayOptions('form', [
+                'type' => 'string_textfield',
+                'weight' => $weight,
+              ]);
+            }
+            break;
+
+          case 'text_long':
+            $field = BaseFieldDefinition::create('text_long');
+
+            if ($field_info['visible_view']) {
+              $field->setDisplayOptions('view', [
+                'label' => 'hidden',
+                'type' => 'text_default',
+                'weight' => $weight,
+              ]);
+            }
+
+            if ($field_info['visible_form']) {
+              $field->setDisplayOptions('form', [
+                'type' => 'text_textfield',
+                'weight' => $weight,
+              ]);
+            }
+            break;
+        }
+
+        // Check if we don't have the field type defined yet.
+        if (empty($field)) {
+          throw new \RuntimeException('Field type not defined yet, please contact TA.');
+        }
+
+        $field->setLabel($field_info['label']);
+
+        // Update cardinality with default value if empty.
+        $field_info['description'] = empty($field_info['description']) ? 1 : $field_info['description'];
+        $field->setDescription($field_info['description']);
+
+        // Update cardinality with default value if empty.
+        $field_info['cardinality'] = empty($field_info['cardinality']) ? 1 : $field_info['cardinality'];
+        $field->setCardinality($field_info['cardinality']);
+
+        $field->setDisplayConfigurable('form', 1);
+        $field->setDisplayConfigurable('view', 1);
+
+        // We will use attr prefix to avoid conflicts with default base fields.
+        $fields['attr_' . $machine_name] = $field;
+      }
+    }
+
     return $fields;
   }
 
diff --git a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index 1ce1d0c..32da378 100755
--- a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -3,6 +3,7 @@
 namespace Drupal\acq_sku\Plugin\rest\resource;
 
 use Drupal\acq_sku\CategoryRepositoryInterface;
+use Drupal\acq_sku\Entity\SKU;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryFactory;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -203,6 +204,8 @@ class ProductSyncResource extends ResourceBase {
 
         $sku->attributes = $this->formatProductAttributes($product['attributes']);
 
+        $sku->media = serialize($product['extension']['media']);
+
         $this->logger->info(
           'Updating product SKU @sku.',
           ['@sku' => $product['sku']]
@@ -219,6 +222,7 @@ class ProductSyncResource extends ResourceBase {
           'special_price' => $product['special_price'],
           'final_price' => $product['final_price'],
           'attributes' => $this->formatProductAttributes($product['attributes']),
+          'media' => serialize($product['extension']['media']),
         ]);
 
         $display = $this->createDisplayNode($product);
@@ -231,6 +235,12 @@ class ProductSyncResource extends ResourceBase {
         $created++;
       }
 
+      // Update the fields based on the values from attributes.
+      $this->updateAttributeFields($sku, $product['attributes']);
+
+      // Update the fields based on the values from extension.
+      $this->updateExtensionFields($sku, $product['extension']);
+
       $plugin_manager = \Drupal::service('plugin.manager.sku');
       $plugin_definition = $plugin_manager->pluginFromSKU($sku);
 
@@ -366,4 +376,84 @@ class ProductSyncResource extends ResourceBase {
     }
   }
 
+  /**
+   * Update attribute fields.
+   *
+   * Update the fields based on the values from attributes.
+   *
+   * @param Drupal\acq_sku\Entity\SKU $sku
+   *   The root SKU.
+   * @param array $attributes
+   *   The attributes to set.
+   */
+  private function updateAttributeFields(SKU $sku, array $attributes) {
+    $additionalFields = \Drupal::config('acq_sku.base_field_additions')->getRawData();
+
+    // Loop through all the attributes available for this particular SKU.
+    foreach ($attributes as $key => $value) {
+      // Check if attribute is required by us.
+      if (isset($additionalFields[$key])) {
+        $field = $additionalFields[$key];
+
+        if ($field['parent'] != 'attributes') {
+          continue;
+        }
+
+        $value = $field['cardinality'] != 1 ? explode(',', $value) : $value;
+        $field_key = 'attr_' . $key;
+
+        switch ($field['type']) {
+          case 'string':
+            $sku->{$field_key}->setValue($value);
+            break;
+
+          case 'text_long':
+            $value = isset($field['serialize']) ? serialize($value) : $value;
+            $sku->{$field_key}->setValue($value);
+            break;
+        }
+      }
+    }
+  }
+
+  /**
+   * Update extension fields.
+   *
+   * Update the fields based on the values from extension.
+   *
+   * @param \Drupal\acq_sku\Entity\SKU $sku
+   *   The root SKU.
+   * @param array $attributes
+   *   The attributes to set.
+   */
+  private function updateExtensionFields(SKU $sku, array $attributes) {
+    $additionalFields = \Drupal::config('acq_sku.base_field_additions')->getRawData();
+
+    // Loop through all the attributes available for this particular SKU.
+    foreach ($attributes as $key => $value) {
+      // Check if attribute is required by us.
+      if (isset($additionalFields[$key])) {
+        $field = $additionalFields[$key];
+
+        if ($field['parent'] != 'extension') {
+          continue;
+        }
+
+        $field_key = 'attr_' . $key;
+
+        switch ($field['type']) {
+          case 'string':
+            $value = $field['cardinality'] != 1 ? explode(',', $value) : $value;
+            $sku->{$field_key}->setValue($value);
+            break;
+
+          case 'text_long':
+            $value = isset($field['serialize']) ? serialize($value) : $value;
+            $sku->{$field_key}->setValue($value);
+            break;
+        }
+      }
+    }
+  }
+
 }
diff --git a/modules/acq_sku/src/Entity/SKU.php b/modules/acq_sku/src/Entity/SKU.php
index ced6bb4..9d010ba 100644
--- a/modules/acq_sku/src/Entity/SKU.php
+++ b/modules/acq_sku/src/Entity/SKU.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acq_sku\Entity;
 
+use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
