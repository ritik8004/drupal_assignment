diff --git a/modules/acq_sku/acq_sku.drush.inc b/modules/acq_sku/acq_sku.drush.inc
index 8a2ee8532..1522cf1ba 100644
--- a/modules/acq_sku/acq_sku.drush.inc
+++ b/modules/acq_sku/acq_sku.drush.inc
@@ -57,6 +57,14 @@ function acq_sku_drush_command() {
     ],
   ];
 
+  $commands['commerce-products-remove-duplicates'] = [
+    'description' => 'Remove all duplicate products available in system.',
+    'aliases'     => ['accprd'],
+    'examples'    => [
+      'drush accprd' => 'Remove all duplicate products available in system.',
+    ],
+  ];
+
   $commands['clean-synced-data'] = [
     'description' => 'Flush all commerce data from the site (Products, SKUs, Product Categories and Product Options).',
     'aliases'     => ['accd'],
@@ -378,3 +386,121 @@ function drush_acq_sku_clean_stock_cache() {
 
   drush_print(dt('Deleted all cache for stock.'));
 }
+
+/**
+ * Implements drush commerce-products-remove-duplicates command.
+ */
+function drush_acq_sku_commerce_products_remove_duplicates() {
+  drush_print(dt('Removing duplicates in commerce products, please wait...'));
+
+  $skus_to_sync = [];
+
+  $db = \Drupal::database();
+
+  /** @var \Drupal\node\NodeStorageInterface $nodeStorage */
+  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
+
+  $query = $db->select('acq_sku_field_data', 't1');
+  $query->addField('t1', 'id', 'id');
+  $query->addField('t1', 'sku', 'sku');
+  $query->leftJoin('acq_sku_field_data', 't2', 't1.sku = t2.sku');
+  $query->where('t1.id != t2.id');
+  $result = $query->execute()->fetchAllKeyed(0, 1);
+
+  if (empty($result)) {
+    drush_print(dt('No duplicate skus found.'));
+  }
+  else {
+    $skus = [];
+
+    foreach ($result as $id => $sku) {
+      $skus[$sku][$id] = $id;
+      $skus_to_sync[$sku] = $sku;
+    }
+
+    foreach ($skus as $sku => $ids) {
+      drush_print(dt('Duplicate skus found for sku: @sku with ids: @ids.', [
+        '@sku' => $sku,
+        '@ids' => implode(', ', $ids),
+      ]));
+
+      // Always delete the one with higher id, first one will have more
+      // translations.
+      sort($ids);
+
+      // Remove the first id which we don't want to delete.
+      array_shift($ids);
+
+      foreach ($ids as $id) {
+        drush_print(dt('Deleting sku with id @id for sku @sku.', [
+          '@sku' => $sku,
+          '@id' => $id,
+        ]));
+
+        $sku_entity = SKU::load($id);
+        $sku_entity->delete();
+      }
+    }
+  }
+
+  $query = $db->select('node__field_skus', 't1');
+  $query->addField('t1', 'entity_id', 'id');
+  $query->addField('t1', 'field_skus_value', 'sku');
+  $query->leftJoin('node__field_skus', 't2', 't1.field_skus_value = t2.field_skus_value');
+  $query->where('t1.entity_id != t2.entity_id');
+  $result = $query->execute()->fetchAllKeyed(0, 1);
+
+  if (empty($result)) {
+    drush_print(dt('No duplicate product nodes found.'));
+  }
+  else {
+    $nids_to_delete = [];
+    $skus = [];
+
+    foreach ($result as $id => $sku) {
+      $skus[$sku][$id] = $id;
+      $skus_to_sync[$sku] = $sku;
+    }
+
+    foreach ($skus as $sku => $ids) {
+      drush_print(dt('Duplicate nodes found for sku: @sku with ids: @ids.', [
+        '@sku' => $sku,
+        '@ids' => implode(', ', $ids),
+      ]));
+
+      // Always delete the one with higher nid, first one will have proper
+      // url alias.
+      sort($ids);
+
+      // Remove the first id which we don't want to delete.
+      array_shift($ids);
+
+      foreach ($ids as $id) {
+        drush_print(dt('Deleting node with id @id for sku @sku.', [
+          '@sku' => $sku,
+          '@id' => $id,
+        ]));
+
+        $nids_to_delete[$id] = $id;
+      }
+    }
+
+    if ($nids_to_delete) {
+      $nodeStorage->delete($nodeStorage->loadMultiple($nids_to_delete));
+    }
+  }
+
+  if ($skus_to_sync) {
+    $sku_texts = implode(',', $skus_to_sync);
+
+    drush_print(dt('Requesting resync for skus @skus.', [
+      '@skus' => $sku_texts,
+    ]));
+
+    foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
+      \Drupal::service('acq_commerce.ingest_api')->productFullSync($store_id, $langcode, $sku_texts);
+    }
+  }
+
+  drush_print(dt('Done.'));
+}
diff --git a/modules/acq_sku/acq_sku.drush.inc b/modules/acq_sku/acq_sku.drush.inc
index 1522cf1ba..54e312e39 100644
--- a/modules/acq_sku/acq_sku.drush.inc
+++ b/modules/acq_sku/acq_sku.drush.inc
@@ -498,7 +498,9 @@ function drush_acq_sku_commerce_products_remove_duplicates() {
     ]));
 
     foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
-      \Drupal::service('acq_commerce.ingest_api')->productFullSync($store_id, $langcode, $sku_texts);
+      // Using very small page size to avoid any issues for skus which already
+      // had corrupt data.
+      \Drupal::service('acq_commerce.ingest_api')->productFullSync($store_id, $langcode, $sku_texts, 5);
     }
   }
 
