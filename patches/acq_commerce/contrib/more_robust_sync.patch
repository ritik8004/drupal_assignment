diff --git a/modules/acq_sku/src/ConductorCategoryManager.php b/modules/acq_sku/src/ConductorCategoryManager.php
index 7ea6dae1d..24b8ca53a 100644
--- a/modules/acq_sku/src/ConductorCategoryManager.php
+++ b/modules/acq_sku/src/ConductorCategoryManager.php
@@ -278,6 +278,11 @@ private function syncCategory(array $categories, $parent = NULL) {
       // Acquire lock to ensure parallel processes are executed one by one.
       do {
         $lock_acquired = $lock->acquire($lock_key);
+
+        // Sleep for half a second before trying again.
+        if (!$lock_acquired) {
+          usleep(500000);
+        }
       } while (!$lock_acquired);
 
 
diff --git a/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php b/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php
index 2e7e20fa5..7d318e662 100644
--- a/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php
+++ b/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php
@@ -128,6 +128,11 @@ public function post(array $stock = []) {
     // Acquire lock to ensure parallel processes are executed one by one.
     do {
       $lock_acquired = $lock->acquire($lock_key);
+
+      // Sleep for half a second before trying again.
+      if (!$lock_acquired) {
+        usleep(500000);
+      }
     } while (!$lock_acquired);
 
     /** @var \Drupal\acq_sku\Entity\SKU $sku */
diff --git a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index 293e04465..23d9f2508 100644
--- a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -143,194 +143,218 @@ public function post(array $products = []) {
     $debug_dir = $config->get('debug_dir');
 
     foreach ($products as $product) {
-      $langcode = acq_commerce_get_langcode_from_store_id($product['store_id']);
+      try {
+        $langcode = acq_commerce_get_langcode_from_store_id($product['store_id']);
 
-      // Magento might have stores that what we don't support.
-      if (empty($langcode)) {
-        continue;
-      }
+        // Magento might have stores that what we don't support.
+        if (empty($langcode)) {
+          continue;
+        }
 
-      if ($debug && !empty($debug_dir)) {
-        // Export product data into file.
-        if (!isset($fps) || !isset($fps[$langcode])) {
-          $filename = $debug_dir . '/products_' . $langcode . '.data';
-          $fps[$langcode] = fopen($filename, 'a');
+        if ($debug && !empty($debug_dir)) {
+          // Export product data into file.
+          if (!isset($fps) || !isset($fps[$langcode])) {
+            $filename = $debug_dir . '/products_' . $langcode . '.data';
+            $fps[$langcode] = fopen($filename, 'a');
+          }
+          fwrite($fps[$langcode], var_export($product, 1));
+          fwrite($fps[$langcode], '\n');
         }
-        fwrite($fps[$langcode], var_export($product, 1));
-        fwrite($fps[$langcode], '\n');
-      }
 
-      if (!isset($product['type'])) {
-        continue;
-      }
+        if (!isset($product['type'])) {
+          continue;
+        }
 
-      $query = $this->queryFactory->get('acq_sku_type');
-      $query->condition('id', $product['type']);
-      $query->count();
+        $query = $this->queryFactory->get('acq_sku_type');
+        $query->condition('id', $product['type']);
+        $query->count();
 
-      $has_bundle = $query->execute();
+        $has_bundle = $query->execute();
 
-      if (!$has_bundle) {
-        continue;
-      }
+        if (!$has_bundle) {
+          continue;
+        }
 
-      if (!isset($product['sku']) || !strlen($product['sku'])) {
-        $this->logger->error('Invalid or empty product SKU.');
-        $ignored++;
-        continue;
-      }
+        if (!isset($product['sku']) || !strlen($product['sku'])) {
+          $this->logger->warning('Invalid or empty product SKU.');
+          $ignored++;
+          continue;
+        }
 
-      // Don't import configurable SKU if it has no configurable options.
-      if ($product['type'] == 'configurable' && empty($product['extension']['configurable_product_options'])) {
-        $this->logger->error('Empty configurable options for SKU: @sku', ['@sku' => $product['sku']]);
-        $ignored++;
-        continue;
-      }
+        // Don't import configurable SKU if it has no configurable options.
+        if ($product['type'] == 'configurable' && empty($product['extension']['configurable_product_options'])) {
+          $this->logger->warning('Empty configurable options for SKU: @sku', ['@sku' => $product['sku']]);
+          $ignored++;
+          continue;
+        }
 
-      $lock_key = 'synchronizeProduct' . $product['sku'];
+        $lock_key = 'synchronizeProduct' . $product['sku'];
 
-      // Acquire lock to ensure parallel processes are executed one by one.
-      do {
-        $lock_acquired = $lock->acquire($lock_key);
-      } while (!$lock_acquired);
+        // Acquire lock to ensure parallel processes are executed one by one.
+        do {
+          $lock_acquired = $lock->acquire($lock_key);
 
-      if ($sku = SKU::loadFromSku($product['sku'], $langcode, FALSE, TRUE)) {
-        if ($product['status'] != 1) {
-          $this->logger->info('Removing disabled SKU from system: @sku.', ['@sku' => $product['sku']]);
+          // Sleep for half a second before trying again.
+          if (!$lock_acquired) {
+            usleep(500000);
+          }
+        } while (!$lock_acquired);
 
-          try {
-            /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
-            $plugin = $sku->getPluginInstance();
+        if ($sku = SKU::loadFromSku($product['sku'], $langcode, FALSE, TRUE)) {
+          if ($product['status'] != 1) {
+            $this->logger->info('Removing disabled SKU from system: @sku.', ['@sku' => $product['sku']]);
 
-            if ($node = $plugin->getDisplayNode($sku, FALSE, FALSE)) {
-              // Delete the node if it is linked to this SKU only.
-              $node->delete();
+            try {
+              /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
+              $plugin = $sku->getPluginInstance();
+
+              if ($node = $plugin->getDisplayNode($sku, FALSE, FALSE)) {
+                // Delete the node if it is linked to this SKU only.
+                $node->delete();
+              }
+            }
+            catch (\Exception $e) {
+              // Not doing anything, we might not have node for the sku.
             }
-          }
-          catch (\Exception $e) {
-            // Not doing anything, we might not have node for the sku.
-          }
 
-          // Delete the SKU.
-          $sku->delete();
+            // Delete the SKU.
+            $sku->delete();
 
-          $deleted++;
-          continue;
-        }
+            $deleted++;
+            continue;
+          }
 
-        $this->logger->info('Updating product SKU @sku.', ['@sku' => $product['sku']]);
-        $updated++;
-      }
-      else {
-        if ($product['status'] != 1) {
-          $this->logger->info('Not creating disabled SKU in system: @sku.', ['@sku' => $product['sku']]);
-          $ignored++;
-          continue;
+          $this->logger->info('Updating product SKU @sku.', ['@sku' => $product['sku']]);
+          $updated++;
         }
+        else {
+          if ($product['status'] != 1) {
+            $this->logger->info('Not creating disabled SKU in system: @sku.', ['@sku' => $product['sku']]);
+            $ignored++;
+            continue;
+          }
 
-        /** @var \Drupal\acq_sku\Entity\SKU $sku */
-        $sku = $em->create([
-          'type' => $product['type'],
-          'sku' => $product['sku'],
-          'langcode' => $langcode,
-        ]);
+          /** @var \Drupal\acq_sku\Entity\SKU $sku */
+          $sku = $em->create([
+            'type' => $product['type'],
+            'sku' => $product['sku'],
+            'langcode' => $langcode,
+          ]);
 
-        $this->logger->info('Creating product SKU @sku.', ['@sku' => $product['sku']]);
+          $this->logger->info('Creating product SKU @sku.', ['@sku' => $product['sku']]);
 
-        $created++;
-      }
+          $created++;
+        }
 
-      $sku->name->value = html_entity_decode($product['name']);
-      $sku->price->value = $product['price'];
-      $sku->special_price->value = $product['special_price'];
-      $sku->final_price->value = $product['final_price'];
-      $sku->attributes = $this->formatProductAttributes($product['attributes']);
+        $sku->name->value = html_entity_decode($product['name']);
+        $sku->price->value = $product['price'];
+        $sku->special_price->value = $product['special_price'];
+        $sku->final_price->value = $product['final_price'];
+        $sku->attributes = $this->formatProductAttributes($product['attributes']);
 
-      // Set default value of stock to 0.
-      $stock = 0;
+        // Set default value of stock to 0.
+        $stock = 0;
 
-      if (isset($product['extension']['stock_item'],
-          $product['extension']['stock_item']['is_in_stock'],
-          $product['extension']['stock_item']['qty'])
-        && $product['extension']['stock_item']['is_in_stock']) {
+        if (isset($product['extension']['stock_item'],
+            $product['extension']['stock_item']['is_in_stock'],
+            $product['extension']['stock_item']['qty'])
+          && $product['extension']['stock_item']['is_in_stock']) {
 
-        // Store stock value in sku.
-        $stock = $product['extension']['stock_item']['qty'];
-      }
+          // Store stock value in sku.
+          $stock = $product['extension']['stock_item']['qty'];
+        }
 
-      $sku->get('stock')->setValue($stock);
+        $sku->get('stock')->setValue($stock);
 
-      // Update product media to set proper position.
-      $sku->media = $this->getProcessedMedia($product, $sku->media->value);
+        // Update product media to set proper position.
+        $sku->media = $this->getProcessedMedia($product, $sku->media->value);
 
-      $sku->attribute_set = $product['attribute_set_label'];
-      $sku->product_id = $product['product_id'];
+        $sku->attribute_set = $product['attribute_set_label'];
+        $sku->product_id = $product['product_id'];
 
-      // Update the fields based on the values from attributes.
-      $this->updateFields('attributes', $sku, $product['attributes']);
+        // Update the fields based on the values from attributes.
+        $this->updateFields('attributes', $sku, $product['attributes']);
 
-      // Update the fields based on the values from extension.
-      $this->updateFields('extension', $sku, $product['extension']);
+        // Update the fields based on the values from extension.
+        $this->updateFields('extension', $sku, $product['extension']);
 
-      // Update upsell linked SKUs.
-      $this->updateLinkedSkus('upsell', $sku, $product['linked']);
+        // Update upsell linked SKUs.
+        $this->updateLinkedSkus('upsell', $sku, $product['linked']);
 
-      // Update crosssell linked SKUs.
-      $this->updateLinkedSkus('crosssell', $sku, $product['linked']);
+        // Update crosssell linked SKUs.
+        $this->updateLinkedSkus('crosssell', $sku, $product['linked']);
 
-      // Update related linked SKUs.
-      $this->updateLinkedSkus('related', $sku, $product['linked']);
+        // Update related linked SKUs.
+        $this->updateLinkedSkus('related', $sku, $product['linked']);
 
-      /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
-      $plugin = $sku->getPluginInstance();
-      $plugin->processImport($sku, $product);
+        /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
+        $plugin = $sku->getPluginInstance();
+        $plugin->processImport($sku, $product);
 
-      // Invoke the alter hook to allow all modules to update the node.
-      \Drupal::moduleHandler()->alter('acq_sku_product_sku', $sku, $product);
+        // Invoke the alter hook to allow all modules to update the node.
+        \Drupal::moduleHandler()->alter('acq_sku_product_sku', $sku, $product);
 
-      $sku->save();
+        $sku->save();
 
-      if ($product['status'] == 1 && $product['visibility'] == 1) {
-        $node = $plugin->getDisplayNode($sku, FALSE, TRUE);
+        if ($product['status'] == 1 && $product['visibility'] == 1) {
+          $node = $plugin->getDisplayNode($sku, FALSE, TRUE);
 
-        if (empty($node)) {
-          $node = $this->createDisplayNode($product, $langcode);
-        }
+          if (empty($node)) {
+            $node = $this->createDisplayNode($product, $langcode);
+          }
 
-        $node->get('title')->setValue(html_entity_decode($product['name']));
+          $node->get('title')->setValue(html_entity_decode($product['name']));
 
-        $description = (isset($product['attributes']['description'])) ? $product['attributes']['description'] : '';
-        $node->get('body')->setValue([
-          'value' => $description,
-          'format' => 'rich_text',
-        ]);
+          $description = (isset($product['attributes']['description'])) ? $product['attributes']['description'] : '';
+          $node->get('body')->setValue([
+            'value' => $description,
+            'format' => 'rich_text',
+          ]);
 
-        $categories = (isset($product['categories'])) ? $product['categories'] : [];
-        $categories = $this->formatCategories($categories);
-        $node->field_category = $categories;
+          $categories = (isset($product['categories'])) ? $product['categories'] : [];
+          $categories = $this->formatCategories($categories);
+          $node->field_category = $categories;
 
-        $node->setPublished(TRUE);
+          $node->setPublished(TRUE);
 
-        // Invoke the alter hook to allow all modules to update the node.
-        \Drupal::moduleHandler()->alter('acq_sku_product_node', $node, $product);
+          // Invoke the alter hook to allow all modules to update the node.
+          \Drupal::moduleHandler()->alter('acq_sku_product_node', $node, $product);
 
-        $node->save();
-      }
-      else {
-        try {
-          // Un-publish if node available.
-          if ($node = $plugin->getDisplayNode($sku, FALSE, FALSE)) {
-            $node->setPublished(FALSE);
-            $node->save();
-          }
+          $node->save();
         }
-        catch (\Exception $e) {
-          // Do nothing, we may not have the node available in system.
+        else {
+          try {
+            // Un-publish if node available.
+            if ($node = $plugin->getDisplayNode($sku, FALSE, FALSE)) {
+              $node->setPublished(FALSE);
+              $node->save();
+            }
+          }
+          catch (\Exception $e) {
+            // Do nothing, we may not have the node available in system.
+          }
         }
+
+        // Release the lock.
+        $lock->release($lock_key);
       }
+      catch (\Exception $e) {
+        // We consider this as failure as it failed for an unknown reason.
+        // (not taken care of above).
+        $failed++;
+
+        // Add the unknown reason to logs.
+        $this->logger->info('Not able to save product SKU @sku. Exception: @message', [
+          '@sku' => $product['sku'],
+          '@message' => $e->getMessage(),
+        ]);
 
-      // Release the lock.
-      $lock->release($lock_key);
+        // Release the lock if acquired.
+        if (!empty($lock_acquired) && !empty($lock_key)) {
+          // Release the lock.
+          $lock->release($lock_key);
+        }
+      }
     }
 
     if (isset($fps)) {
diff --git a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index 23d9f2508..0ebda59ca 100644
--- a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -221,7 +221,10 @@ public function post(array $products = []) {
             $sku->delete();
 
             $deleted++;
-            continue;
+
+            // Throw exception with INTERNAL in message to ensure finally
+            // is executed where we release the lock.
+            throw new \Exception('INTERNAL');
           }
 
           $this->logger->info('Updating product SKU @sku.', ['@sku' => $product['sku']]);
@@ -231,7 +234,10 @@ public function post(array $products = []) {
           if ($product['status'] != 1) {
             $this->logger->info('Not creating disabled SKU in system: @sku.', ['@sku' => $product['sku']]);
             $ignored++;
-            continue;
+
+            // Throw exception with INTERNAL in message to ensure finally
+            // is executed where we release the lock.
+            throw new \Exception('INTERNAL');
           }
 
           /** @var \Drupal\acq_sku\Entity\SKU $sku */
@@ -334,25 +340,30 @@ public function post(array $products = []) {
             // Do nothing, we may not have the node available in system.
           }
         }
-
-        // Release the lock.
-        $lock->release($lock_key);
       }
       catch (\Exception $e) {
-        // We consider this as failure as it failed for an unknown reason.
-        // (not taken care of above).
-        $failed++;
-
-        // Add the unknown reason to logs.
-        $this->logger->info('Not able to save product SKU @sku. Exception: @message', [
-          '@sku' => $product['sku'],
-          '@message' => $e->getMessage(),
-        ]);
-
+        if ($e->getMessage() !== 'INTERNAL') {
+          // We consider this as failure as it failed for an unknown reason.
+          // (not taken care of above).
+          $failed++;
+
+          // Add the unknown reason to logs.
+          $this->logger->warning('Not able to save product SKU @sku. Exception: @message', [
+            '@sku' => $product['sku'],
+            '@message' => $e->getMessage(),
+          ]);
+        }
+      }
+      finally {
         // Release the lock if acquired.
-        if (!empty($lock_acquired) && !empty($lock_key)) {
-          // Release the lock.
+        if (!empty($lock_key) && !empty($lock_acquired)) {
           $lock->release($lock_key);
+
+          // We will come here again for next loop item and we might face
+          // exception before we reach the code that sets $lock_key.
+          // To ensure we don't keep releasing the lock again and again
+          // we set it to NULL here.
+          $lock_key = NULL;
         }
       }
     }
