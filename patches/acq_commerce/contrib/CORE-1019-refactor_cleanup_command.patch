diff --git a/modules/acq_promotion/acq_promotion.module b/modules/acq_promotion/acq_promotion.module
index 5c8a5fc7c5..bffa5260e1 100644
--- a/modules/acq_promotion/acq_promotion.module
+++ b/modules/acq_promotion/acq_promotion.module
@@ -16,7 +16,10 @@ function acq_promotion_acq_sku_clean_synced_data_alter(&$context) {
   $query->addTag('node');
   $query->condition('type', 'acq_promotion');
   $entities = $query->execute();
-  foreach ($entities as $entity) {
-    $context['sandbox']['results'][] = [$entity, 'node'];
+  foreach ($entities as $entity_id) {
+    $context['sandbox']['results'][] = [
+      'type' => 'node',
+      'entity_id' => $entity_id,
+    ];
   }
 }
diff --git a/modules/acq_sku/acq_sku.drush.inc b/modules/acq_sku/acq_sku.drush.inc
index efba763b82..f0e9855c8b 100644
--- a/modules/acq_sku/acq_sku.drush.inc
+++ b/modules/acq_sku/acq_sku.drush.inc
@@ -248,10 +248,10 @@ function drush_acq_sku_commerce_cats_remove_duplicates() {
  * Implements drush clean synced data command.
  */
 function drush_acq_sku_clean_synced_data() {
-  if (!drush_confirm(dt("Are you sure you want to clean commerce data (Products, SKUs, Product Categories and Product Options)?"))) {
+  if (!drush_confirm(dt("Are you sure you want to clean commerce data?"))) {
     return drush_user_abort();
   }
-  drush_print(dt('Cleaning synced commerce data (Products, SKUs and Product Categories), please wait...'));
+  drush_print(dt('Cleaning synced commerce data, please wait...'));
 
   // Set batch operation.
   $batch = [
@@ -285,34 +285,35 @@ function _acq_sku_clean_process(&$context) {
 
     // Get all acq_product entities.
     $query = \Drupal::entityQuery('node');
-    $query->addTag('node');
     $query->condition('type', 'acq_product');
     $product_entities = $query->execute();
-    foreach ($product_entities as $product_entity) {
-      $context['sandbox']['results'][] = [$product_entity, 'node'];
+    foreach ($product_entities as $entity_id) {
+      $context['sandbox']['results'][] = [
+        'type' => 'node',
+        'entity_id' => $entity_id,
+      ];
     }
 
     // Get all acq_sku entities.
     $query = \Drupal::entityQuery('acq_sku');
     $sku_entities = $query->execute();
-    foreach ($sku_entities as $sku_entity) {
-      $context['sandbox']['results'][] = [$sku_entity, 'acq_sku'];
+    foreach ($sku_entities as $entity_id) {
+      $context['sandbox']['results'][] = [
+        'type' => 'acq_sku',
+        'entity_id' => $entity_id,
+      ];
     }
 
-    // Get all acq_product_category entities.
+    // Get all taxonomy_term entities.
+    $categories = ['acq_product_category', 'sku_product_option'];
     $query = \Drupal::entityQuery('taxonomy_term');
-    $query->condition('vid', 'acq_product_category');
+    $query->condition('vid', $categories, 'IN');
     $cat_entities = $query->execute();
-    foreach ($cat_entities as $cat_entity) {
-      $context['sandbox']['results'][] = [$cat_entity, 'taxonomy_term'];
-    }
-
-    // Get all sku_product_option entities.
-    $query = \Drupal::entityQuery('taxonomy_term');
-    $query->condition('vid', 'sku_product_option');
-    $sku_product_option_entities = $query->execute();
-    foreach ($sku_product_option_entities as $sku_product_option_entity) {
-      $context['sandbox']['results'][] = [$sku_product_option_entity, 'taxonomy_term'];
+    foreach ($cat_entities as $entity_id) {
+      $context['sandbox']['results'][] = [
+        'type' => 'taxonomy_term',
+        'entity_id' => $entity_id,
+      ];
     }
 
     // Allow other modules to add data to be deleted when cleaning up.
@@ -330,26 +331,32 @@ function _acq_sku_clean_process(&$context) {
 
   $results = array_slice($results, isset($context['sandbox']['current']) ? $context['sandbox']['current'] : 0, DELETE_BATCH_COUNT);
 
+  $delete = [];
+
   foreach ($results as $key => $result) {
-    $context['results'][] = $results[0] . ' : ' . $result[1];
+    $context['results'][] = $results['type'] . ' : ' . $result['entity_id'];
     $context['sandbox']['progress']++;
-    $context['sandbox']['current_id'] = $result[0];
-
-    // Load the entity.
-    $entity = \Drupal::entityTypeManager()->getStorage($result[1])->load($result[0]);
-    if ($entity) {
-      try {
-        // Delete entity.
-        $entity->delete();
-      }
-      catch (\Exception $e) {
-        \Drupal::logger('acq_sku')->error($e->getMessage());
-      }
-    }
+    $context['sandbox']['current_id'] = $result['entity_id'];
+
+    $delete[$result['type']][] = $result['entity_id'];
+
     // Update our progress information.
     $context['sandbox']['current']++;
   }
+
+  foreach ($delete as $type => $entity_ids) {
+    try {
+      $storage = \Drupal::entityTypeManager()->getStorage($type);
+      $entities = $storage->loadMultiple($entity_ids);
+      $storage->delete($entities);
+    }
+    catch (\Exception $e) {
+      \Drupal::logger('acq_sku')->error($e->getMessage());
+    }
+  }
+
   $context['message'] = 'Processed ' . $context['sandbox']['progress'] . ' out of ' . $context['sandbox']['max'] . '.';
+
   if ($context['sandbox']['progress'] !== $context['sandbox']['max']) {
     $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
   }