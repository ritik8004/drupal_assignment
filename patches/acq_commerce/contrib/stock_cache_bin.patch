diff --git a/modules/acq_sku/acq_sku.drush.inc b/modules/acq_sku/acq_sku.drush.inc
index 572ce24e..b7e06fa3 100644
--- a/modules/acq_sku/acq_sku.drush.inc
+++ b/modules/acq_sku/acq_sku.drush.inc
@@ -5,6 +5,9 @@
  * Provides drush commands for the products of Acquia Commerce connector.
  */
 
+use Drupal\Core\Cache\Cache;
+use Drupal\acq_sku\Entity\SKU;
+
 const DELETE_BATCH_COUNT = 200;
 
 /**
@@ -38,10 +41,22 @@ function acq_sku_drush_command() {
   ];
 
   $commands['clean-synced-data'] = [
-    'description' => 'Flush all commerce data from the site (Products, SKUs and Product Categories).',
+    'description' => 'Flush all commerce data from the site (Products, SKUs, Product Categories and Product Options).',
     'aliases'     => ['accd'],
     'examples'    => [
-      'drush acsc' => 'Flush all commerce data from the site (Products, SKUs and Product Categories).',
+      'drush acsc' => 'Flush all commerce data from the site (Products, SKUs, Product Categories and Product Options).',
+    ],
+  ];
+
+  $commands['clean-stock-cache'] = [
+    'description' => 'Flush the stock cache.',
+    'aliases'     => ['accsc'],
+    'options'     => [
+      'sku' => 'SKU to clean stock of.',
+    ],
+    'examples'    => [
+      'drush accsc' => 'Flush stock cache for all SKUs in all languages.',
+      'drush accsc --sku=SKU' => 'Flush stock cache for particular SKU in all languages',
     ],
   ];
 
@@ -186,3 +201,38 @@ function _acq_sku_clean_process(&$context) {
     $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
   }
 }
+
+/**
+ * Implements drush clean stock cache command.
+ */
+function drush_acq_sku_clean_stock_cache() {
+  // Check if we are asked to clear cache of specific SKU.
+  if ($sku = drush_get_option('sku', '')) {
+    if ($sku_entity = SKU::loadFromSku($sku)) {
+      // Clear stock cache for particular sku in all languages.
+      foreach ($sku_entity->getTranslationLanguages() as $langcode => $language) {
+        $sku_entity_to_clear_stock = $sku_entity->getTranslation($langcode);
+
+        // Get the stock cache id.
+        $stock_cid = acq_sku_get_stock_cache_id($sku_entity_to_clear_stock);
+
+        // Invalidate particular cache.
+        \Drupal::cache('stock')->invalidate($stock_cid);
+
+        drush_print(dt('Invalidated stock cache for @stock_cid.', [
+          '@stock_cid' => $stock_cid,
+        ]));
+      }
+    }
+
+    return;
+  }
+
+  if (!drush_confirm(dt('Are you sure you want to clean stock cache?'))) {
+    return drush_user_abort();
+  }
+
+  \Drupal::service('cache.stock')->deleteAllPermanent();
+
+  drush_print(dt('Deleted all cache for stock.'));
+}
diff --git a/modules/acq_sku/acq_sku.module b/modules/acq_sku/acq_sku.module
index 36ea08eb..7d58a55d 100644
--- a/modules/acq_sku/acq_sku.module
+++ b/modules/acq_sku/acq_sku.module
@@ -130,7 +130,7 @@ function acq_sku_get_sku_stock(SKU $sku_entity, $reset = FALSE) {
     // Cache id.
     $cid = acq_sku_get_stock_cache_id($sku_entity);
 
-    $cache = \Drupal::cache('data')->get($cid);
+    $cache = \Drupal::cache('stock')->get($cid, 1);
 
     // If information is cached.
     if (!$reset && !empty($cache)) {
@@ -154,7 +154,7 @@ function acq_sku_get_sku_stock(SKU $sku_entity, $reset = FALSE) {
         $expire = \Drupal::time()->getRequestTime() + $time;
 
         // Set the stock in cache.
-        \Drupal::cache('data')->set($cid, $stock, $expire);
+        \Drupal::cache('stock')->set($cid, $stock, $expire);
       }
     }
   }
diff --git a/modules/acq_sku/acq_sku.services.yml b/modules/acq_sku/acq_sku.services.yml
index d7c79f53..fefa83c7 100644
--- a/modules/acq_sku/acq_sku.services.yml
+++ b/modules/acq_sku/acq_sku.services.yml
@@ -38,3 +38,14 @@ services:
       - '@element_info'
       - '@theme.manager'
       - '@csrf_token'
+
+  cache.stock:
+    class: Drupal\Core\Cache\CacheInterface
+    tags:
+      - { name: cache.bin }
+    factory: cache_factory:get
+    arguments: [stock]
+
+  cache.backend.permanent_database:
+    class: Drupal\acq_sku\Cache\PermanentDatabaseBackendFactory
+    arguments: ['@database', '@cache_tags.invalidator.checksum']
diff --git a/modules/acq_sku/src/Cache/PermanentDatabaseBackend.php b/modules/acq_sku/src/Cache/PermanentDatabaseBackend.php
new file mode 100644
index 00000000..ee73c791
--- /dev/null
+++ b/modules/acq_sku/src/Cache/PermanentDatabaseBackend.php
@@ -0,0 +1,35 @@
+<?php
+
+namespace Drupal\acq_sku\Cache;
+
+use Drupal\Core\Cache\DatabaseBackend;
+
+/**
+ * Defines a permanent database cache implementation.
+ *
+ * This cache implementation can be used for data like stock which don't really
+ * need to be cleared during normal cache rebuilds and need to be cleared . It uses the database to store
+ * cached data. Each cache bin corresponds to a database table by the same name.
+ *
+ * @ingroup cache
+ */
+class PermanentDatabaseBackend extends DatabaseBackend {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function deleteAll() {
+    // This cache doesn't need to be deleted when doing cache rebuild.
+    // We do nothing here.
+  }
+
+  /**
+   * Deletes all cache items in a bin when explicitly called.
+   *
+   * @see \Drupal\Core\Cache\DatabaseBackend::deleteAll()
+   */
+  public function deleteAllPermanent() {
+    parent::deleteAll();
+  }
+
+}
diff --git a/modules/acq_sku/src/Cache/PermanentDatabaseBackendFactory.php b/modules/acq_sku/src/Cache/PermanentDatabaseBackendFactory.php
new file mode 100644
index 00000000..aa72cdcb
--- /dev/null
+++ b/modules/acq_sku/src/Cache/PermanentDatabaseBackendFactory.php
@@ -0,0 +1,22 @@
+<?php
+
+namespace Drupal\acq_sku\Cache;
+
+use Drupal\Core\Cache\DatabaseBackendFactory;
+
+class PermanentDatabaseBackendFactory extends DatabaseBackendFactory {
+
+  /**
+   * Gets DatabaseBackend for the specified cache bin.
+   *
+   * @param $bin
+   *   The cache bin for which the object is created.
+   *
+   * @return \Drupal\Core\Cache\DatabaseBackend
+   *   The cache backend object for the specified cache bin.
+   */
+  public function get($bin) {
+    return new PermanentDatabaseBackend($this->connection, $this->checksumProvider, $bin);
+  }
+
+}
diff --git a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
index 94f68014..bc36a640 100644
--- a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
+++ b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
@@ -217,7 +217,7 @@ public function addToCartSubmit(array &$form, FormStateInterface $form_state) {
       catch (\Exception $e) {
         // Clear stock cache.
         $stock_cid = acq_sku_get_stock_cache_id($tree_pointer);
-        \Drupal::cache('data')->invalidate($stock_cid);
+        \Drupal::cache('stock')->invalidate($stock_cid);
 
         // Clear product and forms related to sku.
         Cache::invalidateTags(['acq_sku:' . $tree_pointer->id()]);
diff --git a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Simple.php b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Simple.php
index 0c6b48c4..7bbb7bb6 100644
--- a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Simple.php
+++ b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Simple.php
@@ -73,7 +73,7 @@ public function addToCartSubmit(array &$form, FormStateInterface $form_state) {
     catch (\Exception $e) {
       // Clear stock cache.
       $stock_cid = acq_sku_get_stock_cache_id($sku_entity);
-      \Drupal::cache('data')->invalidate($stock_cid);
+      \Drupal::cache('stock')->invalidate($stock_cid);
 
       // Clear product and forms related to sku.
       Cache::invalidateTags(['acq_sku:' . $sku_entity->id()]);
