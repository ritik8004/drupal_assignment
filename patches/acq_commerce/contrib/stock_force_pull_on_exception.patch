diff --git a/modules/acq_sku/acq_sku.drush.inc b/modules/acq_sku/acq_sku.drush.inc
index bc9dd7834..008307016 100644
--- a/modules/acq_sku/acq_sku.drush.inc
+++ b/modules/acq_sku/acq_sku.drush.inc
@@ -393,7 +393,7 @@ function drush_acq_sku_sync_stock() {
 
       /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginInterface $plugin */
       $plugin = $sku_entity->getPluginInstance();
-      $plugin->getProcessedStock($sku_entity, FALSE, TRUE);
+      $plugin->getProcessedStock($sku_entity, TRUE);
 
       // Reset static caches to release memory.
       drupal_static_reset();
diff --git a/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php b/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php
index 9fc801fdc..a4cdf5345 100644
--- a/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php
+++ b/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php
@@ -200,15 +200,16 @@ public function getDisplayNode(SKU $sku, $check_parent = TRUE, $create_translati
   /**
    * {@inheritdoc}
    */
-  public function getProcessedStock(SKU $sku, $recheck = FALSE, $reset = FALSE) {
-    $stock = (int) $this->getStock($sku, $reset);
+  public function getProcessedStock(SKU $sku, $reset = FALSE) {
+    $stock = &drupal_static('stock_static_cache', []);
 
-    // We reset and check again once if reset is false and recheck is true.
-    if (empty($stock) && $recheck && !$reset) {
-      $stock = (int) $this->getStock($sku, TRUE);
+    if (!$reset && isset($stock[$sku->getSku()])) {
+      return $stock[$sku->getSku()];
     }
 
-    return $stock;
+    $stock[$sku->getSku()] = (int) $this->getStock($sku, $reset);
+
+    return $stock[$sku->getSku()];
   }
 
   /**
@@ -225,70 +226,75 @@ public function getProcessedStock(SKU $sku, $recheck = FALSE, $reset = FALSE) {
   protected function getStock(SKU $sku, $reset = FALSE) {
     $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');
 
-    if ($stock_mode == 'push') {
-      $stock = $sku->get('stock')->getString();
+    if (!$reset) {
+      // Return from Entity field in push mode.
+      if ($stock_mode == 'push') {
+        $stock = $sku->get('stock')->getString();
 
-      // Fallback to pull mode if no value available for the SKU.
-      if (!($stock === '' || $stock === NULL)) {
-        return (int) $stock;
+        // Fallback to pull mode if no value available for the SKU.
+        if (!($stock === '' || $stock === NULL)) {
+          return (int) $stock;
+        }
       }
-    }
-
-    $stock = NULL;
-
-    // Cache id.
-    $cid = 'stock:' . $sku->getSku();
+      // Return from Cache in Pull mode.
+      else {
+        // Cache id.
+        $cid = 'stock:' . $sku->getSku();
 
-    $cache = \Drupal::cache('stock')->get($cid);
+        $cache = \Drupal::cache('stock')->get($cid);
 
-    // If information is cached.
-    if (!$reset && !empty($cache)) {
-      $stock = $cache->data;
+        if (!empty($cache)) {
+          return (int) $cache->data;
+        }
+      }
     }
-    else {
-      /** @var \Drupal\acq_commerce\Conductor\APIWrapper $api_wrapper */
-      $api_wrapper = \Drupal::service('acq_commerce.api');
 
-      try {
-        // Get the stock.
-        $stock_info = $api_wrapper->skuStockCheck($sku->getSku());
-      }
-      catch (\Exception $e) {
-        // Log the stock error, do not throw error if stock info is missing.
-        \Drupal::logger('acq_sku')->warning('Unable to get the stock for @sku : @message', [
-          '@sku' => $sku->getSku(),
-          '@message' => $e->getMessage(),
-        ]);
-
-        // We will cache this also for sometime to reduce load.
-        $stock_info['is_in_stock'] = FALSE;
-      }
+    // Either reset is requested or we dont have value in attribute or we dont
+    // have value in cache, we will use the API to get fresh value now.
+    $stock = NULL;
 
-      // Magento uses additional flag as well for out of stock.
-      if (isset($stock_info['is_in_stock']) && empty($stock_info['is_in_stock'])) {
-        $stock_info['quantity'] = 0;
-      }
+    /** @var \Drupal\acq_commerce\Conductor\APIWrapper $api_wrapper */
+    $api_wrapper = \Drupal::service('acq_commerce.api');
 
-      $stock = (int) $stock_info['quantity'];
+    try {
+      // Get the stock.
+      $stock_info = $api_wrapper->skuStockCheck($sku->getSku());
+    }
+    catch (\Exception $e) {
+      // Log the stock error, do not throw error if stock info is missing.
+      \Drupal::logger('acq_sku')->warning('Unable to get the stock for @sku : @message', [
+        '@sku' => $sku->getSku(),
+        '@message' => $e->getMessage(),
+      ]);
 
-      // If cache multiplier is zero we don't cache the stock.
-      if ($cache_multiplier = \Drupal::config('acq_sku.settings')->get('stock_cache_multiplier')) {
-        $default_cache_lifetime = $stock ? $stock * $cache_multiplier : $cache_multiplier;
-        $max_cache_lifetime = \Drupal::config('acq_sku.settings')->get('stock_cache_max_lifetime');
+      // We will cache this also for sometime to reduce load.
+      $stock_info['is_in_stock'] = FALSE;
+    }
 
-        // Calculate the timestamp when we want the cache to expire.
-        $stock_cache_lifetime = min($default_cache_lifetime, $max_cache_lifetime);
-        $expire = $stock_cache_lifetime + \Drupal::time()->getRequestTime();
+    // Magento uses additional flag as well for out of stock.
+    if (isset($stock_info['is_in_stock']) && empty($stock_info['is_in_stock'])) {
+      $stock_info['quantity'] = 0;
+    }
 
-        // Set the stock in cache.
-        \Drupal::cache('stock')->set($cid, $stock, $expire);
+    $stock = (int) $stock_info['quantity'];
 
-        // Save the value in SKU if we came here as fallback of push mode.
-        if ($stock_mode == 'push') {
-          $sku->get('stock')->setValue($stock);
-          $sku->save();
-        }
-      }
+    // Save the value in SKU if we came here as fallback of push mode.
+    if ($stock_mode == 'push') {
+      $sku->get('stock')->setValue($stock);
+      $sku->save();
+    }
+    // Save the value in cache if we are in pull mode.
+    // If cache multiplier is zero we don't cache the stock.
+    elseif ($cache_multiplier = \Drupal::config('acq_sku.settings')->get('stock_cache_multiplier')) {
+      $default_cache_lifetime = $stock ? $stock * $cache_multiplier : $cache_multiplier;
+      $max_cache_lifetime = \Drupal::config('acq_sku.settings')->get('stock_cache_max_lifetime');
+
+      // Calculate the timestamp when we want the cache to expire.
+      $stock_cache_lifetime = min($default_cache_lifetime, $max_cache_lifetime);
+      $expire = $stock_cache_lifetime + \Drupal::time()->getRequestTime();
+
+      // Set the stock in cache.
+      \Drupal::cache('stock')->set($cid, $stock, $expire);
     }
 
     return $stock;
diff --git a/modules/acq_sku/src/AcquiaCommerce/SKUPluginInterface.php b/modules/acq_sku/src/AcquiaCommerce/SKUPluginInterface.php
index 3651880fc..aadd11363 100644
--- a/modules/acq_sku/src/AcquiaCommerce/SKUPluginInterface.php
+++ b/modules/acq_sku/src/AcquiaCommerce/SKUPluginInterface.php
@@ -106,14 +106,12 @@ public function getDisplayNode(SKU $sku, $check_parent = TRUE, $create_translati
    *
    * @param \Drupal\acq_sku\Entity\SKU $sku
    *   SKU Entity.
-   * @param bool $recheck
-   *   Flag to specify if we should recheck.
    * @param bool $reset
    *   Flag to mention if we should always try to get fresh value.
    *
    * @return mixed
    *   Stock quantity.
    */
-  public function getProcessedStock(SKU $sku, $recheck = FALSE, $reset = FALSE);
+  public function getProcessedStock(SKU $sku, $reset = FALSE);
 
 }
diff --git a/modules/acq_sku/src/Entity/SKU.php b/modules/acq_sku/src/Entity/SKU.php
index 0ae3ba1bc..095d6e0c5 100644
--- a/modules/acq_sku/src/Entity/SKU.php
+++ b/modules/acq_sku/src/Entity/SKU.php
@@ -653,17 +653,22 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
   public function clearStockCache() {
     $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');
 
-    if ($stock_mode == 'push') {
-      return;
-    }
+    // Clear product and forms related to sku.
+    Cache::invalidateTags(['acq_sku:' . $this->id()]);
 
-    $stock_cid = 'stock:' . $this->getSku();
+    if ($stock_mode == 'push') {
+      /** @var \Drupal\acq_sku\AcquiaCommerce\SKUPluginBase $plugin */
+      $plugin = $this->getPluginInstance();
 
-    // Clear stock cache.
-    \Drupal::cache('stock')->invalidate($stock_cid);
+      // Reset the stock value.
+      $plugin->getProcessedStock($this, TRUE);
+    }
+    else {
+      $stock_cid = 'stock:' . $this->getSku();
 
-    // Clear product and forms related to sku.
-    Cache::invalidateTags(['acq_sku:' . $this->id()]);
+      // Clear stock cache.
+      \Drupal::cache('stock')->invalidate($stock_cid);
+    }
   }
 
 }
diff --git a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
index 69fe77eb8..d894da438 100644
--- a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
+++ b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
@@ -524,10 +524,10 @@ public function cartName($sku, array $cart) {
   /**
    * {@inheritdoc}
    */
-  public function getProcessedStock(SKU $sku, $recheck = FALSE, $reset = FALSE) {
-    static $stock = [];
+  public function getProcessedStock(SKU $sku, $reset = FALSE) {
+    $stock = &drupal_static('stock_static_cache', []);
 
-    if (!$recheck && !$reset && isset($stock[$sku->getSku()])) {
+    if (!$reset && isset($stock[$sku->getSku()])) {
       return $stock[$sku->getSku()];
     }
 
@@ -540,11 +540,6 @@ public function getProcessedStock(SKU $sku, $recheck = FALSE, $reset = FALSE) {
         if ($child_sku_entity instanceof SKU) {
           $child_stock = (int) $this->getStock($child_sku_entity, $reset);
 
-          // We reset & check again once if reset is false and recheck is true.
-          if (empty($child_stock) && $recheck && !$reset) {
-            $child_stock = (int) $this->getStock($child_sku_entity, TRUE);
-          }
-
           $quantities[$child_sku_entity->getSku()] = $child_stock;
         }
       }
