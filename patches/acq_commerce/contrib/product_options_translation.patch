diff --git a/modules/acq_sku/src/ProductOptionsManager.php b/modules/acq_sku/src/ProductOptionsManager.php
index 0aec035..ff38113 100644
--- a/modules/acq_sku/src/ProductOptionsManager.php
+++ b/modules/acq_sku/src/ProductOptionsManager.php
@@ -102,6 +102,8 @@ public function loadProductOptionByOptionId($attribute_code, $option_id, $log_er
   /**
    * Create product option if not available or update the name.
    *
+   * @param string $langcode
+   *   Lang code.
    * @param int $option_id
    *   Option id.
    * @param string $option_value
@@ -111,17 +113,34 @@ public function loadProductOptionByOptionId($attribute_code, $option_id, $log_er
    * @param string $attribute_code
    *   Attribute code.
    */
-  protected function createProductOption($option_id, $option_value, $attribute_id, $attribute_code) {
+  protected function createProductOption($langcode, $option_id, $option_value, $attribute_id, $attribute_code) {
     // Update the term if already available.
     if ($term = $this->loadProductOptionByOptionId($attribute_code, $option_id, FALSE)) {
+      $save_term = FALSE;
+
+      if ($term->hasTranslation($langcode)) {
+        $term = $term->getTranslation($langcode);
+      }
+      else {
+        $term->addTranslation($langcode, []);
+        $save_term = TRUE;
+      }
+
+      // We won't allow editing name here, if required it must be done from
+      // Magento.
       if ($term->getName() != $option_value) {
         $term->setName($option_value);
+        $save_term = TRUE;
+      }
+
+      if ($save_term) {
         $term->save();
       }
     }
     else {
       $term = $this->termStorage->create([
         'vid' => self::PRODUCT_OPTIONS_VOCABULARY,
+        'langcode' => $langcode,
         'name' => $option_value,
         'field_sku_option_id' => $option_id,
         'field_sku_attribute_id' => $attribute_id,
@@ -136,11 +155,14 @@ protected function createProductOption($option_id, $option_value, $attribute_id,
    * Synchronize all product options.
    */
   public function synchronizeProductOptions() {
-    $option_sets = $this->apiWrapper->getProductOptions();
-
-    foreach ($option_sets as $options) {
-      foreach ($options['options'] as $key => $value) {
-        $this->createProductOption($key, $value, $options['attribute_id'], $options['attribute_code']);
+    foreach (acq_commerce_get_store_language_mapping() as $langcocde => $store_id) {
+      $this->apiWrapper->updateStoreContext($store_id);
+      $option_sets = $this->apiWrapper->getProductOptions();
+
+      foreach ($option_sets as $options) {
+        foreach ($options['options'] as $key => $value) {
+          $this->createProductOption('ar', $key, $value, $options['attribute_id'], $options['attribute_code']);
+        }
       }
     }
   }
