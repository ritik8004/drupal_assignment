diff --git a/modules/acq_sku/src/ProductOptionsManager.php b/modules/acq_sku/src/ProductOptionsManager.php
index 0aec035..ff38113 100644
--- a/modules/acq_sku/src/ProductOptionsManager.php
+++ b/modules/acq_sku/src/ProductOptionsManager.php
@@ -102,6 +102,8 @@ public function loadProductOptionByOptionId($attribute_code, $option_id, $log_er
   /**
    * Create product option if not available or update the name.
    *
+   * @param string $langcode
+   *   Lang code.
    * @param int $option_id
    *   Option id.
    * @param string $option_value
@@ -111,17 +113,34 @@ public function loadProductOptionByOptionId($attribute_code, $option_id, $log_er
    * @param string $attribute_code
    *   Attribute code.
    */
-  protected function createProductOption($option_id, $option_value, $attribute_id, $attribute_code) {
+  protected function createProductOption($langcode, $option_id, $option_value, $attribute_id, $attribute_code) {
     // Update the term if already available.
     if ($term = $this->loadProductOptionByOptionId($attribute_code, $option_id, FALSE)) {
+      $save_term = FALSE;
+
+      if ($term->hasTranslation($langcode)) {
+        $term = $term->getTranslation($langcode);
+      }
+      else {
+        $term->addTranslation($langcode, []);
+        $save_term = TRUE;
+      }
+
+      // We won't allow editing name here, if required it must be done from
+      // Magento.
       if ($term->getName() != $option_value) {
         $term->setName($option_value);
+        $save_term = TRUE;
+      }
+
+      if ($save_term) {
         $term->save();
       }
     }
     else {
       $term = $this->termStorage->create([
         'vid' => self::PRODUCT_OPTIONS_VOCABULARY,
+        'langcode' => $langcode,
         'name' => $option_value,
         'field_sku_option_id' => $option_id,
         'field_sku_attribute_id' => $attribute_id,
@@ -136,11 +155,14 @@ protected function createProductOption($option_id, $option_value, $attribute_id,
    * Synchronize all product options.
    */
   public function synchronizeProductOptions() {
-    $option_sets = $this->apiWrapper->getProductOptions();
-
-    foreach ($option_sets as $options) {
-      foreach ($options['options'] as $key => $value) {
-        $this->createProductOption($key, $value, $options['attribute_id'], $options['attribute_code']);
+    foreach (acq_commerce_get_store_language_mapping() as $langcocde => $store_id) {
+      $this->apiWrapper->updateStoreContext($store_id);
+      $option_sets = $this->apiWrapper->getProductOptions();
+
+      foreach ($option_sets as $options) {
+        foreach ($options['options'] as $key => $value) {
+          $this->createProductOption('ar', $key, $value, $options['attribute_id'], $options['attribute_code']);
+        }
       }
     }
   }
diff --git a/modules/acq_sku/acq_sku.drush.inc b/modules/acq_sku/acq_sku.drush.inc
index c6f1dde..a96094a 100644
--- a/modules/acq_sku/acq_sku.drush.inc
+++ b/modules/acq_sku/acq_sku.drush.inc
@@ -82,7 +82,7 @@ function drush_acq_sku_sync_commerce_product_options() {
  * Implements drush clean synced data command.
  */
 function drush_acq_sku_clean_synced_data() {
-  if (!drush_confirm(dt("Are you sure you want to clean commerce data (Products, SKUs and Product Categories)?"))) {
+  if (!drush_confirm(dt("Are you sure you want to clean commerce data (Products, SKUs, Product Categories and Product Options)?"))) {
     return drush_user_abort();
   }
   drush_print(dt('Cleaning synced commerce data (Products, SKUs and Product Categories), please wait...'));
@@ -141,6 +141,14 @@ function _acq_sku_clean_process(&$context) {
       $context['sandbox']['results'][] = [$cat_entity, 'taxonomy_term'];
     }
 
+    // Get all sku_product_option entities.
+    $query = \Drupal::entityQuery('taxonomy_term');
+    $query->condition('vid', 'sku_product_option');
+    $sku_product_option_entities = $query->execute();
+    foreach ($sku_product_option_entities as $sku_product_option_entity) {
+      $context['sandbox']['results'][] = [$sku_product_option_entity, 'taxonomy_term'];
+    }
+
     $context['sandbox']['progress'] = 0;
     $context['sandbox']['current_id'] = 0;
     $context['sandbox']['max'] = count($context['sandbox']['results']);
diff --git a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index 9a95af3..0065230 100644
--- a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -408,7 +408,7 @@ private function updateFields($parent, SKU $sku, array $values) {
           case 'attribute':
             $value = $field['cardinality'] != 1 ? explode(',', $value) : [$value];
             foreach ($value as $index => $val) {
-              if ($term = $this->productOptionsManager->loadProductOptionByOptionId($key, $val)) {
+              if ($term = $this->productOptionsManager->loadProductOptionByOptionId($key, $val, $sku->language()->getId())) {
                 $sku->{$field_key}->set($index, $term->getName());
               }
               else {
diff --git a/modules/acq_sku/src/ProductOptionsManager.php b/modules/acq_sku/src/ProductOptionsManager.php
index ff38113..d4ddb04 100644
--- a/modules/acq_sku/src/ProductOptionsManager.php
+++ b/modules/acq_sku/src/ProductOptionsManager.php
@@ -35,13 +35,6 @@ class ProductOptionsManager {
   private $apiWrapper;
 
   /**
-   * Result (create / update / failed) counts.
-   *
-   * @var array
-   */
-  private $results;
-
-  /**
    * Constructor.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
@@ -70,7 +63,7 @@ public function __construct(EntityTypeManagerInterface $entity_type_manager, API
    * @return \Drupal\taxonomy\Entity\Term|null
    *   Loaded taxonomy term object if found.
    */
-  public function loadProductOptionByOptionId($attribute_code, $option_id, $log_error = TRUE) {
+  public function loadProductOptionByOptionId($attribute_code, $option_id, $langcode, $log_error = TRUE) {
     $query = $this->termStorage->getQuery();
     $query->condition('field_sku_option_id', $option_id);
     $query->condition('field_sku_attribute_code', $attribute_code);
@@ -96,7 +89,15 @@ public function loadProductOptionByOptionId($attribute_code, $option_id, $log_er
 
     // We use the first term and continue even if we have multiple terms.
     $tid = array_shift($tids);
-    return $this->termStorage->load($tid);
+
+    /** @var \Drupal\taxonomy\Entity\Term $term */
+    $term = $this->termStorage->load($tid);
+
+    if ($langcode && $term->hasTranslation($langcode)) {
+      $term = $term->getTranslation($langcode);
+    }
+
+    return $term;
   }
 
   /**
@@ -115,20 +116,21 @@ public function loadProductOptionByOptionId($attribute_code, $option_id, $log_er
    */
   protected function createProductOption($langcode, $option_id, $option_value, $attribute_id, $attribute_code) {
     // Update the term if already available.
-    if ($term = $this->loadProductOptionByOptionId($attribute_code, $option_id, FALSE)) {
+    if ($term = $this->loadProductOptionByOptionId($attribute_code, $option_id, NULL, FALSE)) {
       $save_term = FALSE;
 
       if ($term->hasTranslation($langcode)) {
         $term = $term->getTranslation($langcode);
+
+        // We won't allow editing name here, if required it must be done from
+        // Magento.
+        if ($term->getName() != $option_value) {
+          $term->setName($option_value);
+          $save_term = TRUE;
+        }
       }
       else {
-        $term->addTranslation($langcode, []);
-        $save_term = TRUE;
-      }
-
-      // We won't allow editing name here, if required it must be done from
-      // Magento.
-      if ($term->getName() != $option_value) {
+        $term = $term->addTranslation($langcode, []);
         $term->setName($option_value);
         $save_term = TRUE;
       }
@@ -155,13 +157,13 @@ protected function createProductOption($langcode, $option_id, $option_value, $at
    * Synchronize all product options.
    */
   public function synchronizeProductOptions() {
-    foreach (acq_commerce_get_store_language_mapping() as $langcocde => $store_id) {
+    foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
       $this->apiWrapper->updateStoreContext($store_id);
       $option_sets = $this->apiWrapper->getProductOptions();
 
       foreach ($option_sets as $options) {
         foreach ($options['options'] as $key => $value) {
-          $this->createProductOption('ar', $key, $value, $options['attribute_id'], $options['attribute_code']);
+          $this->createProductOption($langcode, $key, $value, $options['attribute_id'], $options['attribute_code']);
         }
       }
     }
