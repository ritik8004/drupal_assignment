diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php
index e5ae07291..dc1a76175 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/AcquiaCommerce/SKUPluginBase.php
@@ -222,21 +222,32 @@ public function getProcessedStock(SKU $sku, $reset = FALSE) {
   /**
    * Returns the stock for the given sku.
    *
-   * @param \Drupal\acq_sku\Entity\SKU $sku
-   *   SKU Entity object.
+   * @param string $sku
+   *   SKU code of the product.
    * @param bool $reset
    *   Flag to mention if we should always try to get fresh value.
    *
    * @return array|mixed
    *   Available stock quantity.
    */
-  protected function getStock(SKU $sku, $reset = FALSE) {
+  protected function getStock($sku, $reset = FALSE) {
     $stock_mode = \Drupal::config('acq_sku.settings')->get('stock_mode');
+    $sku_string = ($sku instanceof SKU) ? $sku->getSku() : $sku;

     if (!$reset) {
       // Return from Entity field in push mode.
       if ($stock_mode == 'push') {
-        $stock = $sku->get('stock')->getString();
+        if ($sku instanceof SKU) {
+          $stock = $sku->get('stock')->getString();
+        }
+        else {
+          $stock = \Drupal::database()->select('acq_sku_field_data', 'asfd')
+            ->fields('asfd', ['stock'])
+            ->condition('asfd.sku', $sku_string)
+            ->condition('asfd.langcode', \Drupal::languageManager()->getCurrentLanguage()->getId())
+            ->execute()
+            ->fetchField();
+        }

         // Fallback to pull mode if no value available for the SKU.
         if (!($stock === '' || $stock === NULL)) {
@@ -246,7 +257,7 @@ protected function getStock(SKU $sku, $reset = FALSE) {
       // Return from Cache in Pull mode.
       else {
         // Cache id.
-        $cid = 'stock:' . $sku->getSku();
+        $cid = 'stock:' . $sku_string;

         $cache = \Drupal::cache('stock')->get($cid);

@@ -265,12 +276,12 @@ protected function getStock(SKU $sku, $reset = FALSE) {

     try {
       // Get the stock.
-      $stock_info = $api_wrapper->skuStockCheck($sku->getSku());
+      $stock_info = $api_wrapper->skuStockCheck($sku_string);
     }
     catch (\Exception $e) {
       // Log the stock error, do not throw error if stock info is missing.
       \Drupal::logger('acq_sku')->warning('Unable to get the stock for @sku : @message', [
-        '@sku' => $sku->getSku(),
+        '@sku' => $sku_string,
         '@message' => $e->getMessage(),
       ]);

@@ -287,6 +298,7 @@ protected function getStock(SKU $sku, $reset = FALSE) {

     // Save the value in SKU if we came here as fallback of push mode.
     if ($stock_mode == 'push') {
+      $sku = SKU::loadFromSku($sku_string);
       $sku->get('stock')->setValue($stock);
       $sku->save();
     }
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
index c3fd3d668..e3fcff4d9 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
@@ -541,13 +541,9 @@ public function getProcessedStock(SKU $sku, $reset = FALSE) {

     foreach ($sku->get('field_configured_skus') as $child_sku) {
       try {
-        $child_sku_entity = SKU::loadFromSku($child_sku->getString());
-
-        if ($child_sku_entity instanceof SKU) {
-          $child_stock = (int) $this->getStock($child_sku_entity, $reset);
-
-          $quantities[$child_sku_entity->getSku()] = $child_stock;
-        }
+        $child_sku = $child_sku->getString();
+        $child_stock = (int) $this->getStock($child_sku, $reset);
+        $quantities[$child_sku] = $child_stock;
       }
       catch (\Exception $e) {
         // Child SKU might be deleted or translation not available.
