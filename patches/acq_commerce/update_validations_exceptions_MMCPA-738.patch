diff --git a/modules/acq_cart/src/Cart.php b/modules/acq_cart/src/Cart.php
index 0daa3e2..8d1f80c 100644
--- a/modules/acq_cart/src/Cart.php
+++ b/modules/acq_cart/src/Cart.php
@@ -278,9 +278,12 @@ public function setShippingMethod($carrier, $method) {
    * {@inheritdoc}
    */
   public function getShippingMethod() {
+    $shipping = NULL;
+
     if (isset($this->cart, $this->cart->carrier)) {
       $shipping = $this->cart->carrier;
     }
+
     return $shipping;
   }

diff --git a/modules/acq_cart/src/Form/CustomerCartForm.php b/modules/acq_cart/src/Form/CustomerCartForm.php
index a6a8659..1de15f1 100644
--- a/modules/acq_cart/src/Form/CustomerCartForm.php
+++ b/modules/acq_cart/src/Form/CustomerCartForm.php
@@ -22,6 +22,13 @@ class CustomerCartForm extends FormBase {
   /**
    * Drupal\acq_cart\CartStorageInterface definition.
    *
+   * @var \Drupal\acq_cart\Cart
+   */
+  protected $cart;
+
+  /**
+   * Drupal\acq_cart\CartStorageInterface definition.
+   *
    * @var \Drupal\acq_cart\CartStorageInterface
    */
   protected $cartStorage;
@@ -152,35 +159,35 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
-  }

-  /**
-   * {@inheritdoc}
-   */
-  public function submitForm(array &$form, FormStateInterface $form_state) {
-    $cart = $form_state->getValue('cart');
+    if (!($form_state->getErrors())) {
+      $cartFormItems = $form_state->getValue('cart');

-    if (empty($cart)) {
-      return;
-    }
+      if (!empty($cartFormItems)) {
+        $update_cart = [];

-    $update_cart = [];
+        foreach ($cartFormItems as $sku => $item) {
+          $update_cart[] = ['sku' => $sku, 'qty' => $item['quantity']];
+        }

-    foreach ($cart as $sku => $item) {
-      $update_cart[] = ['sku' => $sku, 'qty' => $item['quantity']];
-    }
+        $this->cart = $this->cartStorage->getCart();
+        $this->cart->setItemsInCart($update_cart);

-    $cart = $this->cartStorage->getCart();
-    $cart->setItemsInCart($update_cart);
+        $coupon = $form_state->getValue('coupon');

-    $coupon = $form_state->getValue('coupon');
+        if (!empty($coupon)) {
+          $this->cart->setCoupon($coupon);
+        }

-    if (!empty($coupon)) {
-      $cart->setCoupon($coupon);
+        $this->updateCart($form_state);
+      }
     }
+  }

-    $this->cartStorage->updateCart();
-
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($form_state->getTriggeringElement()['#parents'][0] == 'checkout') {
       $form_state->setRedirect('acq_checkout.form');
     } else {
@@ -188,4 +195,28 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
     }
   }

+
+  /**
+   * @param $form_state
+   *   FormStateInterface object.
+   */
+  private function updateCart(FormStateInterface $form_state) {
+    try {
+      $this->cartStorage->updateCart();
+    }
+    catch (\Exception $e) {
+      if ($e->getMessage() == 'Coupon code is not valid') {
+        // Set the error and require rebuild.
+        $form_state->setErrorByName('coupon', $this->t('This coupon code seems invalid or expired, please try new one.'));
+        $form_state->setRebuild(TRUE);
+
+        // Reset the cart.
+        $this->cart->setCoupon('');
+        $this->updateCart($form_state);
+      }
+      else {
+        // @TODO: handle more exceptions.
+      }
+    }
+  }
 }
diff --git a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
index fec5fb4..678c8b3 100644
--- a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
+++ b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Configurable.php
@@ -449,7 +449,7 @@ public function cartName($sku, $cart) {

     $display_node = $this->getDisplayNode($parent_sku);
     $url = $display_node->toUrl();
-    $link = Link::fromTextAndUrl($label, $url);
-    return render($link->toRenderable());
+    $link = Link::fromTextAndUrl($label, $url)->toRenderable();
+    return render($link);
   }
 }
diff --git a/src/Conductor/ConductorResultException.php b/src/Conductor/ConductorResultException.php
index 8ef1706..f7d33ea 100644
--- a/src/Conductor/ConductorResultException.php
+++ b/src/Conductor/ConductorResultException.php
@@ -41,13 +41,32 @@ public function __construct(array $result)
         continue;
       }

+      $prefix = 'response:';
+
+      if ($position = strpos($mesg, $prefix)) {
+        $responseString = substr($mesg, strpos($mesg, $prefix) + strlen($prefix));
+        $response = json_decode($responseString, TRUE);
+        if (is_array($response) && isset($response['message'])) {
+          $mesg = $response['message'];
+        }
+      }
+
       $this->failures[$key] = $mesg;
     }

     if ($this->success) {
       $mesg = 'Conductor request successful but did not contain requested data.';
-    } else {
+    }
+    else {
+      // Generic exception message.
       $mesg = 'Conductor request unsuccessful.';
+
+      // Check if we have a better exception message in failures.
+      if ($this->failures) {
+        // We return the first failure message in getMessage(), rest can be
+        // accessed via getFailureMessage().
+        $mesg = array_shift($this->failures);
+      }
     }

     return parent::__construct($mesg);
