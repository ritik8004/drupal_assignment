diff --git a/modules/acq_sku_position/acq_sku_position.drush.inc b/modules/acq_sku_position/acq_sku_position.drush.inc
new file mode 100644
index 000000000..306072787
--- /dev/null
+++ b/modules/acq_sku_position/acq_sku_position.drush.inc
@@ -0,0 +1,123 @@
+<?php
+
+/**
+ * @file
+ * Provides drush commands related to Product position.
+ */
+
+use Drupal\taxonomy\Entity\Term;
+
+/**
+ * Implements hook_drush_command().
+ */
+function acq_sku_position_drush_command() {
+  $commands = [];
+
+  $commands['position-sync'] = [
+    'description' => 'Drush command to sync sku product position based on category.',
+    'aliases' => ['aapps'],
+    'arguments'   => [
+      'position_type' => 'Name of the position type.',
+    ],
+    'examples' => [
+      'drush aapps' => 'Sync product position based on category, by default "position".',
+      'drush aapps myargument' => 'Sync product position based on category, by "myargument".',
+    ],
+  ];
+
+  return $commands;
+}
+
+/**
+ * Sync product position based on category.
+ */
+function drush_acq_sku_position_position_sync($position_type = 'position') {
+  drush_print(dt('Product position sync in progress...'));
+  // Get root category configuration.
+  $filter_root_category = \Drupal::config('acq_commerce.conductor')->get('filter_root_category');
+
+  $database = \Drupal::database();
+
+  // Get all product category terms.
+  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('acq_product_category');
+  foreach ($terms as $term) {
+    // Skip root category if configured in settings.
+    if ($filter_root_category && isset($term->parents[0]) && $term->parents[0] == '0') {
+      continue;
+    }
+
+    // Find the magento commerce id from the term. Skip if not found.
+    $commerce_id = Term::load($term->tid)->get('field_commerce_id')->value;
+    if (!$commerce_id) {
+      continue;
+    }
+
+    // Get product position for this category from Magento.
+    $response = \Drupal::service('acq_commerce.api')->getProductPosition($commerce_id);
+    if (!is_array($response)) {
+      continue;
+    }
+
+    // Skip sync if error is found in the response for a particular category.
+    if (is_array($response) && isset($response['message'])) {
+      drush_print(dt("Error in position sync for @name (tid: @tid). Response: @message", [
+        '@name' => $term->name,
+        '@tid' => $term->tid,
+        '@message' => $response['message'],
+      ]));
+      continue;
+    }
+
+    // Start product position sync for this category.
+    drush_print(dt("Product position sync for @name (tid: @tid) in progress...", [
+      '@name' => $term->name,
+      '@tid' => $term->tid,
+    ]));
+
+    // Delete existing records of position for this category.
+    $database->delete('acq_sku_position')
+      ->condition('tid', $term->tid)
+      ->condition('position_type', $position_type)
+      ->execute();
+
+    // Get all skus from the response.
+    $skus = array_column($response, 'sku');
+    if (empty($skus)) {
+      continue;
+    }
+
+    // Get all product nids from skus.
+    $query = $database->select('node__field_skus', 'n');
+    $query->fields('n', ['field_skus_value', 'entity_id']);
+    $query->condition('n.bundle', 'acq_product');
+    $query->condition('n.field_skus_value', $skus, 'IN');
+    $nids = $query->execute()->fetchAllKeyed();
+    // Skip if not product found for any sku.
+    if (empty($nids)) {
+      continue;
+    }
+
+    $is_data_available = FALSE;
+    $query = $database->insert('acq_sku_position')
+      ->fields(['nid', 'tid', 'position', 'position_type']);
+    foreach ($response as $product_position) {
+      if (isset($nids[$product_position['sku']])) {
+        // Insert new position data for the product.
+        $record = [
+          'nid' => $nids[$product_position['sku']],
+          'tid' => $term->tid,
+          'position' => $product_position['position'],
+          'position_type' => $position_type,
+        ];
+        $is_data_available = TRUE;
+        $query->values($record);
+      }
+    }
+
+    if ($is_data_available) {
+      $query->execute();
+    }
+  }
+
+  drush_print(dt('Product position sync completed!'));
+}
diff --git a/modules/acq_sku_position/acq_sku_position.info.yml b/modules/acq_sku_position/acq_sku_position.info.yml
new file mode 100644
index 000000000..86eded7df
--- /dev/null
+++ b/modules/acq_sku_position/acq_sku_position.info.yml
@@ -0,0 +1,10 @@
+name: Acquia Commerce SKU Product Position
+type: module
+description: This module provides functionality to store the sku product position.
+core: 8.x
+package: Commerce
+dependencies:
+  - acq_commerce
+  - acq_sku
+  - node
+  - taxonomy
diff --git a/modules/acq_sku_position/acq_sku_position.install b/modules/acq_sku_position/acq_sku_position.install
new file mode 100644
index 000000000..4ae1a6e53
--- /dev/null
+++ b/modules/acq_sku_position/acq_sku_position.install
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * @file
+ * Installation and update functions for SKU Position.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function acq_sku_position_schema() {
+  $schema['acq_sku_position'] = [
+    'description' => 'Stores sku product position.',
+    'fields' => [
+      'nid' => [
+        'type' => 'int',
+        'not null' => TRUE,
+        'description' => 'Product nid.',
+      ],
+      'tid' => [
+        'type' => 'int',
+        'not null' => TRUE,
+        'description' => 'Product category tid.',
+      ],
+      'position' => [
+        'type' => 'int',
+        'not null' => TRUE,
+        'description' => 'Product position.',
+      ],
+      'position_type' => [
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+        'description' => 'Type of position',
+      ],
+    ],
+    'indexes' => [
+      'indexing' => ['nid', 'tid', 'position_type'],
+    ],
+    'primary key' => ['nid', 'tid', 'position_type'],
+  ];
+  return $schema;
+}
diff --git a/src/Conductor/APIWrapper.php b/src/Conductor/APIWrapper.php
index 815c96504..d5181e580 100644
--- a/src/Conductor/APIWrapper.php
+++ b/src/Conductor/APIWrapper.php
@@ -805,4 +805,34 @@ public function getLinkedskus($sku, $type = LINKED_SKU_TYPE_ALL) {
     return $result;
   }
 
+    /**
+     * Get position of the products in a category.
+     *
+     * @param int $category_id
+     *   The category id.
+     *
+     * @return array
+     *   All products with the positions in the given category.
+     *
+     * @throws \Exception
+     */
+    public function getProductPosition($category_id) {
+        $endpoint = $this->apiVersion . "/agent/category/$category_id/position";
+
+        $doReq = function ($client, $opt) use ($endpoint) {
+            return ($client->get($endpoint, $opt));
+        };
+
+        $result = [];
+
+        try {
+            $result = $this->tryAgentRequest($doReq, 'productPosition', 'position');
+        }
+        catch (ConductorException $e) {
+            throw new \Exception($e->getMessage(), $e->getCode());
+        }
+
+        return $result;
+    }
+
 }
