diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/MiniCartManager.php b/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/MiniCartManager.php
index 7a53a0e6e..e330701f4 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/MiniCartManager.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/MiniCartManager.php
@@ -49,6 +49,7 @@ public function getMiniCart() {
       // Use the template to render the HTML.
       $output['#quantity'] = $cart->getCartItemsCount();
       $output['#total'] = render($total);
+      $output['cart_id'] = $cart->id();
     }
 
     $output['#prefix'] = '<div id="mini-cart-wrapper">';
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php b/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php
index 871612058..43089fdf0 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php
@@ -2,8 +2,10 @@
 
 namespace Drupal\acq_cart\Plugin\Block;
 
+use Drupal\acq_cart\MiniCartManager;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Session\AccountProxyInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -15,6 +17,28 @@
  * )
  */
 class CartMiniBlock extends BlockBase implements ContainerFactoryPluginInterface {
+  /**
+   * Current user service.
+   *
+   * @var AccountProxyInterface
+   */
+  protected $currentUser;
+
+  /**
+   * Mini cart manager service.
+   *
+   * @var MiniCartManager
+   */
+  protected $miniCartManager;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $current_user, MiniCartManager $mini_cart_manager) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->currentUser = $current_user;
+    $this->miniCartManager = $mini_cart_manager;
+  }
 
   /**
    * {@inheritdoc}
@@ -23,7 +47,9 @@ public static function create(ContainerInterface $container, array $configuratio
     return new static(
       $configuration,
       $plugin_id,
-      $plugin_definition
+      $plugin_definition,
+      $container->get('current_user'),
+      $container->get('acq_cart.mini_cart')
     );
   }
 
@@ -31,13 +57,18 @@ public static function create(ContainerInterface $container, array $configuratio
    * {@inheritdoc}
    */
   public function build() {
-    // Something to show till we get the AJAX response back.
-    $output = [
-      '#lazy_builder' => ['acq_cart.mini_cart:getMiniCart', array()],
-      '#create_placeholder' => TRUE
-    ];
+    // Fetch mini cart block content.
+    $mini_cart = $this->miniCartManager->getMiniCart();
+    $mini_cart['#cache']['contexts'][] = 'cookies:Drupal_visitor_acq_cart_id';
+
+    // Set cache metadata if cart_id is set.
+    if (isset($mini_cart['cart_id'])) {
+      $cart_id = $mini_cart['cart_id'];
+      $mini_cart['#cache']['tags'][] = 'mini_cart_' . $cart_id;
+      unset($mini_cart['cart_id']);
+    }
 
-    return $output;
+    return $mini_cart;
   }
 
 }
diff --git a/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php b/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php
index f98243a74..815c96504 100644
--- a/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php
+++ b/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acq_commerce\Conductor;
 
+use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactory;
@@ -174,6 +175,7 @@ public function updateCart($cart_id, $cart) {
 
     try {
       $cart = $this->tryAgentRequest($doReq, 'updateCart', 'cart');
+      Cache::invalidateTags(['mini_cart_' . $cart_id]);
     }
     catch (ConductorException $e) {
       throw new \Exception($e->getMessage(), $e->getCode());
