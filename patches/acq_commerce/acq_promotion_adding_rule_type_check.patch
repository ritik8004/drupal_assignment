diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php
index 447f9496f..186d04f78 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php
@@ -188,14 +188,17 @@ protected function unpublishPromotions(array $validIDs = []) {
    *
    * @param int $rule_id
    *   Rule id of the promotion to load.
+   * @param string $rule_type
+   *   Rule type of the promotion to load.
    *
    * @return \Drupal\node\Entity\Node|null
    *   Return node if a promotion found associated with the rule id else Null.
    */
-  public function getPromotionByRuleId($rule_id) {
+  public function getPromotionByRuleId($rule_id, $rule_type) {
     $query = $this->nodeStorage->getQuery();
     $query->condition('type', 'acq_promotion');
     $query->condition('field_acq_promotion_rule_id', $rule_id);
+    $query->condition('field_acq_promotion_type', $rule_type);
     $nids = $query->execute();
 
     if (empty($nids)) {
@@ -380,12 +383,12 @@ public function processPromotions(array $promotions = []) {
       }
 
       // Check if this promotion exists in Drupal.
-      $promotion_node = $this->getPromotionByRuleId($promotion['rule_id']);
+      // Assuming rule_id is unique across a promotion type.
+      $promotion_node = $this->getPromotionByRuleId($promotion['rule_id'], $promotion['promotion_type']);
 
       // If promotion exists, we update the related skus & final price.
       if ($promotion_node) {
         $promotion_nid = $promotion_node->id();
-
         // Update promotion metadata.
         $this->syncPromotionWithMiddlewareResponse($promotion, $promotion_node);
         $attached_promotion_skus = $this->getSkusForPromotion($promotion_node);
