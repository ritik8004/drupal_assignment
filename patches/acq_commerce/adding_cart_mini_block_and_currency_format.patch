diff --git a/docroot/modules/commerce/acq_commerce/acq_commerce.links.menu.yml b/docroot/modules/commerce/acq_commerce/acq_commerce.links.menu.yml
index aecd78f..df5546d 100644
--- a/docroot/modules/commerce/acq_commerce/acq_commerce.links.menu.yml
+++ b/docroot/modules/commerce/acq_commerce/acq_commerce.links.menu.yml
@@ -18,3 +18,10 @@ acq_commerce.configuration.conductor:
   parent: 'acq_commerce.configuration'
   description: 'Configure your Acquia Commerce Conductor settings.'
   weight: 20
+
+acq_commerce.configuration.currency:
+  title: 'Currency Settings'
+  route_name: 'acq_commerce.configuration.currency'
+  parent: 'acq_commerce.configuration'
+  description: 'Configure your Acquia Commerce Currency settings.'
+  weight: 21
diff --git a/docroot/modules/commerce/acq_commerce/acq_commerce.routing.yml b/docroot/modules/commerce/acq_commerce/acq_commerce.routing.yml
index 9ee273e..3d4af8f 100644
--- a/docroot/modules/commerce/acq_commerce/acq_commerce.routing.yml
+++ b/docroot/modules/commerce/acq_commerce/acq_commerce.routing.yml
@@ -21,3 +21,11 @@ acq_commerce.configuration.conductor:
     _title: 'Conductor Settings'
   requirements:
     _permission: 'access commerce administration pages'
+
+acq_commerce.configuration.currency:
+  path: '/admin/commerce/config/currency-settings'
+  defaults:
+    _form: '\Drupal\acq_commerce\Form\CurrencySettingsForm'
+    _title: 'Currency Settings'
+  requirements:
+    _permission: 'access commerce administration pages'
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_cart/acq_cart.module b/docroot/modules/commerce/acq_commerce/modules/acq_cart/acq_cart.module
index a081fec..dcc024e 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_cart/acq_cart.module
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_cart/acq_cart.module
@@ -18,3 +18,19 @@ function acq_cart_preprocess_acq_sku(&$variables) {
   // we provide a hook that's only called if this module is enabled on display.
   \Drupal::moduleHandler()->alter('add_to_cart_display', $variables);
 }
+
+/**
+ * Implements hook_theme().
+ */
+function acq_cart_theme($existing, $type, $theme, $path) {
+  return array(
+    'acq_cart_mini_cart' => array(
+      'variables' => array(
+        'quantity' => 0,
+        'total' => NULL,
+        'currency_format' => NULL
+      ),
+      'template' => 'block--acqminicart',
+    ),
+  );
+}
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php b/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php
new file mode 100644
index 0000000..a36001d
--- /dev/null
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_cart/src/Plugin/Block/CartMiniBlock.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace Drupal\acq_cart\Plugin\Block;
+
+use Drupal\acq_cart\CartStorageInterface;
+use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides a 'CartMiniBlock' block.
+ *
+ * @Block(
+ *   id = "cart_mini_block",
+ *   admin_label = @Translation("Cart Mini Block"),
+ * )
+ */
+class CartMiniBlock extends BlockBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * Drupal\acq_cart\CartStorageInterface definition.
+   *
+   * @var \Drupal\acq_cart\CartStorageInterface
+   */
+  protected $cartStorage;
+
+  /**
+   * Constructor.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param string $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\acq_cart\CartStorageInterface $cart_storage
+   *   The cart session.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, CartStorageInterface $cart_storage) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->cartStorage = $cart_storage;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('acq_cart.cart_storage')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function build() {
+    $cart = $this->cartStorage->getCart();
+    $totals = $cart->totals();
+
+    // Fetch the currency format from the config factor.
+    $currency_format = \Drupal::configFactory()
+      ->getEditable('acq_commerce.currency')
+      ->get('currency_code');
+
+    // The grand total including discounts and taxes.
+    $grand_total = $totals['grand'] >= 0 ? $totals['grand'] : 0;
+
+    // The number of items in cart.
+    $items = $this->cartStorage->getCart()->items();
+    $quantity = 0;
+    foreach ($items as $item) {
+      $quantity += $item['qty'];
+    }
+
+    return([
+      '#theme' => 'acq_cart_mini_cart',
+      '#quantity' => $quantity,
+      '#total' => $grand_total,
+      '#currency_format' => $currency_format,
+    ]);
+  }
+}
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_cart/templates/block--acqminicart.html.twig b/docroot/modules/commerce/acq_commerce/modules/acq_cart/templates/block--acqminicart.html.twig
new file mode 100644
index 0000000..8d8c6fc
--- /dev/null
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_cart/templates/block--acqminicart.html.twig
@@ -0,0 +1,4 @@
+<div class="acq-mini-cart">
+    <span class="total"><span class="prefix">{{ currency_format }}</span>{{ total }}</span>
+    <span class="quantity">{{ quantity }}</span>
+</div>
diff --git a/docroot/modules/commerce/acq_commerce/src/Form/CurrencySettingsForm.php b/docroot/modules/commerce/acq_commerce/src/Form/CurrencySettingsForm.php
new file mode 100644
index 0000000..93bb724
--- /dev/null
+++ b/docroot/modules/commerce/acq_commerce/src/Form/CurrencySettingsForm.php
@@ -0,0 +1,57 @@
+<?php
+
+namespace Drupal\acq_commerce\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Class CurrencySettingsForm
+ * @package Drupal\acq_commerce\Form
+ * @ingroup acq_commerce
+ */
+class CurrencySettingsForm extends ConfigFormBase {
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getFormId() {
+    return 'acq_commerce_currency_settings';
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getEditableConfigNames()
+  {
+    return ['acq_commerce.currency'];
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+
+    $this->config('acq_commerce.currency')
+      ->set('currency_code', $form_state->getValue('currency_code'))
+      ->save();
+
+    return parent::submitForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $config = $this->config('acq_commerce.currency');
+    $form['currency_code'] = array(
+      '#type' => 'textfield',
+      '#description' => $this->t('ISO 4217 standard currency code.'),
+      '#title' => $this->t('ISO currency code'),
+      '#required' => TRUE,
+      '#default_value' => $config->get('currency_code'),
+    );
+
+    return parent::buildForm($form, $form_state);
+  }
+}
diff --git a/docroot/modules/custom/alshaya_acm/alshaya_acm.install b/docroot/modules/custom/alshaya_acm/alshaya_acm.install
new file mode 100644
index 0000000..7aafcf5
--- /dev/null
+++ b/docroot/modules/custom/alshaya_acm/alshaya_acm.install
@@ -0,0 +1,17 @@
+<?php
+
+/**
+ * @file
+ * Custom installation for Alshaya sites.
+ */
+
+/**
+ * Implements hook_install().
+ */
+function alshaya_acm_install() {
+  // Initialize the currency format variable during install.
+  \Drupal::configFactory()
+    ->getEditable('acq_commerce.currency')
+    ->set('currency_code', 'KWD')
+    ->save();
+}
