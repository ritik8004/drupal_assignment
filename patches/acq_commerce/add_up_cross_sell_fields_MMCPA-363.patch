diff --git a/modules/commerce/acq_commerce/modules/acq_sku/src/Entity/SKU.php b/modules/commerce/acq_commerce/modules/acq_sku/src/Entity/SKU.php
index b87ff69..ddbf25f 100644
--- a/modules/commerce/acq_commerce/modules/acq_sku/src/Entity/SKU.php
+++ b/modules/commerce/acq_commerce/modules/acq_sku/src/Entity/SKU.php
@@ -145,10 +145,11 @@ public function setChangedTime($timestamp) {
   /**
    * {@inheritdoc}
    */
-  public function getChangedTimeAcrossTranslations()  {
+  public function getChangedTimeAcrossTranslations() {
     $changed = $this->getUntranslated()->getChangedTime();
-    foreach ($this->getTranslationLanguages(FALSE) as $language)    {
-      $translation_changed = $this->getTranslation($language->getId())->getChangedTime();
+    foreach ($this->getTranslationLanguages(FALSE) as $language) {
+      $translation_changed = $this->getTranslation($language->getId())
+        ->getChangedTime();
       $changed = max($translation_changed, $changed);
     }
     return $changed;
@@ -267,6 +268,26 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
       ->setDisplayConfigurable('form', TRUE)
       ->setDisplayConfigurable('view', TRUE);

+    $fields['crosssell'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Cross sell SKU'))
+      ->setDescription(t('Reference to all Cross sell SKUs.'))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => 5,
+      ))
+      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
+      ->setDisplayConfigurable('form', TRUE);
+
+    $fields['upsell'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Up sell SKU'))
+      ->setDescription(t('Reference to all up sell SKUs.'))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => 6,
+      ))
+      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
+      ->setDisplayConfigurable('form', TRUE);
+
     $fields['image'] = BaseFieldDefinition::create('image')
       ->setLabel(t('Image'))
       ->setDescription(t('Product image'))
diff --git a/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index ea9f121..18e4353 100644
--- a/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -7,6 +7,7 @@
 namespace Drupal\acq_sku\Plugin\rest\resource;

 use Drupal\acq_sku\CategoryRepositoryInterface;
+use Drupal\acq_sku\Entity\SKU;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryFactory;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -190,6 +191,12 @@ public function post(array $products = [])
         $sku->price->value = $product['price'];
         $sku->attributes = $this->formatProductAttributes($product['attributes']);

+        // Update upsell linked SKUs.
+        $this->updateLinkedSkus('upsell', $sku, $product['linked']);
+
+        // Update crosssell linked SKUs.
+        $this->updateLinkedSkus('crosssell', $sku, $product['linked']);
+
         $this->logger->info(
           'Updating product SKU @sku.',
           array('@sku' => $product['sku'])
@@ -205,6 +212,12 @@ public function post(array $products = [])
           'attributes' => $this->formatProductAttributes($product['attributes']),
         ));

+        // Update upsell linked SKUs.
+        $this->updateLinkedSkus('upsell', $sku, $product['linked']);
+
+        // Update crosssell linked SKUs.
+        $this->updateLinkedSkus('crosssell', $sku, $product['linked']);
+
         $display = $this->createDisplayNode($product);

         $this->logger->info(
@@ -344,4 +357,47 @@ private function updateNodeCategories(array $nids, array $product)
       }
     }
   }
+
+  /**
+   * updateLinkedSkus
+   *
+   * Prepare the field value for linked type (upsell, crosssell, etc.).
+   * Get the position based on the position coming from API.
+   *
+   * @param string $type
+   * @param SKU $sku
+   * @param array $linked
+   *
+   * @return void
+   */
+  private function updateLinkedSkus($type, SKU &$sku, array $linked) {
+    // Reset the upsell skus to null.
+    $sku->{$type}->setValue([]);
+
+    $fieldData = [];
+
+    foreach ($linked as $link) {
+      if ($link['type'] != $type) {
+        continue;
+      }
+
+      $fieldData[$link['position']] = $link['linked_sku'];
+    }
+
+    // If there is no upsell skus to link, we simply return from here.
+    if (empty($fieldData)) {
+      return;
+    }
+
+    // Sort them based on position.
+    ksort($fieldData);
+
+    // Update the index to sequential values so we can set in field.
+    $fieldData = array_values($fieldData);
+
+    foreach ($fieldData as $delta => $value) {
+      $sku->{$type}->set($delta, $value);
+    }
+  }
+
 }

