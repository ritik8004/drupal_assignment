diff --git a/acq_commerce.module b/acq_commerce.module
index 1f4dab8..21cc932 100644
--- a/acq_commerce.module
+++ b/acq_commerce.module
@@ -6,6 +6,26 @@
  */
 
 /**
+ * For the all.
+ */
+const LINKED_SKU_TYPE_ALL = 'all';
+
+/**
+ * For the upsell.
+ */
+const LINKED_SKU_TYPE_UPSELL = 'upsell';
+
+/**
+ * For the cross_sell.
+ */
+const LINKED_SKU_TYPE_CROSSSELL = 'crosssell';
+
+/**
+ * For the related.
+ */
+const LINKED_SKU_TYPE_RELATED = 'related';
+
+/**
  * Implements hook_page_attachments().
  */
 function acq_commerce_page_attachments(array &$attachments) {
diff --git a/modules/acq_sku/acq_sku.module b/modules/acq_sku/acq_sku.module
index 1817616..0ea8f07 100644
--- a/modules/acq_sku/acq_sku.module
+++ b/modules/acq_sku/acq_sku.module
@@ -10,6 +10,7 @@
 
 use Drupal\acq_sku\Entity\SKU;
 use Drupal\Core\Render\Element;
+use Drupal\acq_commerce\Conductor\ConductorException;
 
 /**
  * Implements hook_theme().
diff --git a/modules/acq_sku/acq_sku.services.yml b/modules/acq_sku/acq_sku.services.yml
index ef07f9d..e508315 100644
--- a/modules/acq_sku/acq_sku.services.yml
+++ b/modules/acq_sku/acq_sku.services.yml
@@ -39,6 +39,15 @@ services:
       - '@theme.manager'
       - '@csrf_token'
 
+  acq_sku.linked_sku:
+      class: Drupal\acq_sku\AcqSkuLinkedSku
+      arguments:
+        - '@acq_commerce.api'
+        - '@cache.default'
+        - '@config.factory'
+        - '@language_manager'
+        - '@logger.factory'
+
   cache.stock:
     class: Drupal\Core\Cache\CacheBackendInterface
     tags:
diff --git a/modules/acq_sku/config/install/acq_sku.settings.yml b/modules/acq_sku/config/install/acq_sku.settings.yml
index b1a4acd..ad0c9bc 100644
--- a/modules/acq_sku/config/install/acq_sku.settings.yml
+++ b/modules/acq_sku/config/install/acq_sku.settings.yml
@@ -1,2 +1,3 @@
 stock_cache_multiplier: 600
-stock_cache_max_lifetime: 7200
\ No newline at end of file
+stock_cache_max_lifetime: 7200
+linked_skus_cache_max_lifetime: 3600
diff --git a/modules/acq_sku/src/AcqSkuLinkedSku.php b/modules/acq_sku/src/AcqSkuLinkedSku.php
new file mode 100644
index 0000000..6c07938
--- /dev/null
+++ b/modules/acq_sku/src/AcqSkuLinkedSku.php
@@ -0,0 +1,137 @@
+<?php
+
+namespace Drupal\acq_sku;
+
+use Drupal\acq_commerce\Conductor\APIWrapper;
+use Drupal\acq_sku\Entity\SKU;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+
+class AcqSkuLinkedSku {
+
+  /**
+   * The conductor api wrapper.
+   *
+   * @var \Drupal\acq_commerce\Conductor\APIWrapper
+   */
+  protected $apiWrapper;
+
+  /**
+   * The cache bin object.
+   *
+   * @var \Drupal\Core\Cache\CacheBackendInterface
+   */
+  protected $cache;
+
+  /**
+   * The config factory object.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
+   * The logger factory.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   */
+  protected $loggerFactory;
+
+  /**
+   * AcqSkuLinkedSku constructor.
+   *
+   * @param \Drupal\acq_commerce\Conductor\APIWrapper $api_wrapper
+   *   The conductor api wrapper.
+   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   *   The cache bin object.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The config factory object.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   The language manager.
+   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   *   The logger factory.
+   */
+  public function __construct(APIWrapper $api_wrapper, CacheBackendInterface $cache, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, LoggerChannelFactoryInterface $logger_factory) {
+    $this->apiWrapper = $api_wrapper;
+    $this->cache = $cache;
+    $this->configFactory = $config_factory;
+    $this->loggerFactory = $logger_factory;
+    $this->languageManager = $language_manager;
+  }
+
+  /**
+   * Get linked skus for a given sku by linked type.
+   *
+   * @param SKU $sku
+   *   The sku entity.
+   * @param string $type
+   *   The linked type. Like - related/crosssell/upsell.
+   *
+   * @return array
+   *   All linked skus of given type.
+   */
+  public function getLinkedSKus(SKU $sku, $type = LINKED_SKU_TYPE_ALL) {
+    $linked_skus = [];
+
+    // Cache key is like - 'acq_sku:linked_skus:123'.
+    $cache_key = 'acq_sku:linked_skus:' . $sku->id();
+
+    // Get cached data.
+    $cache = $this->cache->get($cache_key);
+
+    // If already cached.
+    if ($cache) {
+      // If only for specific type like cross_sell/upsell/related
+      if (isset($cache->data[$type])) {
+        return $cache->data[$type];
+      }
+      elseif ($type == LINKED_SKU_TYPE_ALL && isset($cache->data[LINKED_SKU_TYPE_RELATED]) && isset($cache->data[LINKED_SKU_TYPE_CROSSSELL]) && isset($cache->data[LINKED_SKU_TYPE_UPSELL])) {
+        // Returning everything in case of 'all' and all keys set.
+        return $cache->data;
+      }
+    }
+
+    try {
+      // Get linked skus and set the cache.
+      $linked_skus = $this->apiWrapper->getLinkedskus($sku->getSku(), $type);
+
+      // If cache is set already and we just fetching info of perticular type,
+      // just updating the existing cache.
+      if ($type != LINKED_SKU_TYPE_ALL && $cache) {
+        $cache->data[$type] = $linked_skus[$type];
+        $linked_skus = $cache->data;
+      }
+      elseif ($type != LINKED_SKU_TYPE_ALL && !$cache) {
+        $linked_skus = [$type => $linked_skus[$type]];
+      }
+
+      // Set the cache.
+      $cache_lifetime = $this->configFactory->get('acq_sku.settings')->get('linked_skus_cache_max_lifetime');
+      $this->cache->set($cache_key, $linked_skus, $cache_lifetime);
+
+      // Return the data.
+      return $type != LINKED_SKU_TYPE_ALL ? $linked_skus[$type] : $linked_skus;
+    }
+    catch (\Exception $e) {
+      // If something bad happens, log the error.
+      $this->loggerFactory->get('acq_sku')->emergency('Unable to get the @linked_sku_type linked skus for @sku : @message', [
+        '@linked_sku_type' => $type,
+        '@sku' => $sku->getSku(),
+        '@message' => $e->getMessage(),
+        ]
+      );
+    }
+
+    return $linked_skus;
+  }
+
+}
diff --git a/modules/acq_sku/src/Form/SKUSettingsForm.php b/modules/acq_sku/src/Form/SKUSettingsForm.php
index fa20b40..da3e86e 100644
--- a/modules/acq_sku/src/Form/SKUSettingsForm.php
+++ b/modules/acq_sku/src/Form/SKUSettingsForm.php
@@ -47,6 +47,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
     $sku_settings = $this->config('acq_sku.settings');
     $sku_settings->set('stock_cache_multiplier', $form_state->getValue('stock_cache_multiplier'));
     $sku_settings->set('stock_cache_max_lifetime', $form_state->getValue('stock_cache_max_lifetime'));
+    $sku_settings->set('linked_skus_cache_max_lifetime', $form_state->getValue('linked_skus_cache_max_lifetime'));
     $sku_settings->save();
   }
 
@@ -79,6 +80,13 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#default_value' => $sku_settings->get('stock_cache_max_lifetime'),
     ];
 
+    $form['linked_skus_cache_max_lifetime'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Linked SKUs Cache Max Lifetime'),
+      '#description' => $this->t("Maximum lifetime for linked skus in seconds."),
+      '#default_value' => $sku_settings->get('linked_skus_cache_max_lifetime'),
+    ];
+
     return $form;
   }
 
diff --git a/src/Conductor/APIWrapper.php b/src/Conductor/APIWrapper.php
index 465ed95..f98243a 100644
--- a/src/Conductor/APIWrapper.php
+++ b/src/Conductor/APIWrapper.php
@@ -771,4 +771,36 @@ public function systemWatchdog() {
     return $result;
   }
 
+  /**
+   * Get linked skus for a given sku by linked type.
+   *
+   * @param string $sku
+   *   The sku id.
+   * @param string $type
+   *   Linked type. Like - related/crosssell/upsell.
+   *
+   * @return array|mixed
+   *   All linked skus of given type.
+   *
+   * @throws \Exception
+   */
+  public function getLinkedskus($sku, $type = LINKED_SKU_TYPE_ALL) {
+    $endpoint = $this->apiVersion . "/agent/product/$sku/related/$type";
+
+    $doReq = function ($client, $opt) use ($endpoint) {
+      return ($client->get($endpoint, $opt));
+    };
+
+    $result = [];
+
+    try {
+      $result = $this->tryAgentRequest($doReq, 'linkedSkus', 'related');
+    }
+    catch (ConductorException $e) {
+      throw new \Exception($e->getMessage(), $e->getCode());
+    }
+
+    return $result;
+  }
+
 }
