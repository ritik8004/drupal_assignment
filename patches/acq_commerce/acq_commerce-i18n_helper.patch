diff --git a/docroot/modules/commerce/acq_commerce/acq_commerce.module b/docroot/modules/commerce/acq_commerce/acq_commerce.module
index 636c6fc40..ca52f564b 100644
--- a/docroot/modules/commerce/acq_commerce/acq_commerce.module
+++ b/docroot/modules/commerce/acq_commerce/acq_commerce.module
@@ -84,68 +84,6 @@ function template_preprocess_acq_commerce_price(array &$variables) {
 }
 
 /**
- * Helper function to get mapping between all store ids and language codes.
- *
- * @return array
- *   Mapping array.
- */
-function acq_commerce_get_store_language_mapping() {
-  $mapping = [];
-
-  $languages = \Drupal::languageManager()->getLanguages();
-
-  // Prepare the alternate locale data.
-  foreach ($languages as $lang => $language) {
-    // For default language, we access the config directly.
-    if ($lang == \Drupal::languageManager()->getDefaultLanguage()->getId()) {
-      $config = \Drupal::config('acq_commerce.store');
-    }
-    // We get store id from translated config for other languages.
-    else {
-      $config = \Drupal::languageManager()->getLanguageConfigOverride($lang, 'acq_commerce.store');
-    }
-
-    $mapping[$lang] = $config->get('store_id');
-  }
-
-  return $mapping;
-}
-
-/**
- * Helper function to get store id from language code.
- *
- * @param string $langcode
- *   Language code to convert to store id.
- *
- * @return string|null
- *   Store id if available as string or null.
- */
-function acq_commerce_get_store_id_from_langcode($langcode) {
-  $mapping = acq_commerce_get_store_language_mapping();
-  return !empty($mapping[$langcode]) ? $mapping[$langcode] : NULL;
-}
-
-/**
- * Helper function to get language code from store id.
- *
- * @param string $store_id
- *   Store id to convert to language code.
- *
- * @return string|null
- *   Language code if available or null.
- */
-function acq_commerce_get_langcode_from_store_id($store_id) {
-  $mapping = acq_commerce_get_store_language_mapping();
-  $mapping = array_flip($mapping);
-
-  if (empty($store_id)) {
-    return array_shift($mapping);
-  }
-
-  return !empty($mapping[$store_id]) ? $mapping[$store_id] : NULL;
-}
-
-/**
  * Helper function to check if exception is related to API being down.
  *
  * @param \Exception $e
diff --git a/docroot/modules/commerce/acq_commerce/acq_commerce.services.yml b/docroot/modules/commerce/acq_commerce/acq_commerce.services.yml
index 568693d35..6aee233d3 100644
--- a/docroot/modules/commerce/acq_commerce/acq_commerce.services.yml
+++ b/docroot/modules/commerce/acq_commerce/acq_commerce.services.yml
@@ -5,8 +5,12 @@ services:
 
   acq_commerce.api:
     class: Drupal\acq_commerce\Conductor\APIWrapper
-    arguments: ['@acq_commerce.client_factory', '@config.factory', '@language_manager', '@logger.factory']
+    arguments: ['@acq_commerce.client_factory', '@config.factory', '@language_manager', '@logger.factory', '@acq_commerce.i18n_helper']
 
   acq_commerce.ingest_api:
     class: Drupal\acq_commerce\Conductor\IngestAPIWrapper
     arguments: ['@acq_commerce.client_factory', '@config.factory', '@logger.factory']
+
+  acq_commerce.i18n_helper:
+    class: Drupal\acq_commerce\I18nHelper
+    arguments: ['@config.factory', '@language_manager']
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/acq_promotion.services.yml b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/acq_promotion.services.yml
index 3da381be8..e6f920067 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/acq_promotion.services.yml
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/acq_promotion.services.yml
@@ -10,3 +10,4 @@ services:
       - '@queue'
       - '@config.factory'
       - '@database'
+      - '@acq_commerce.i18n_helper'
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionQueueBase.php b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionQueueBase.php
index ddb0d0ee7..05bddd7f2 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionQueueBase.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionQueueBase.php
@@ -3,6 +3,7 @@
 namespace Drupal\acq_promotion;
 
 use Drupal\acq_commerce\Conductor\IngestAPIWrapper;
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -30,6 +31,13 @@
   protected $logger;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  protected $i18nHelper;
+
+  /**
    * AcqPromotionAttachQueue constructor.
    *
    * @param array $configuration
@@ -42,15 +50,19 @@
    *   IngestAPIWrapper Service object.
    * @param \Drupal\Core\Logger\LoggerChannelFactory $loggerFactory
    *   Logger service.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
   public function __construct(array $configuration,
                               $plugin_id,
                               $plugin_definition,
                               IngestAPIWrapper $ingestApiWrapper,
-                              LoggerChannelFactory $loggerFactory) {
+                              LoggerChannelFactory $loggerFactory,
+                              I18nHelper $i18n_helper) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->ingestApiWrapper = $ingestApiWrapper;
     $this->logger = $loggerFactory->get('acq_sku');
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -74,7 +86,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_id,
       $plugin_definition,
       $container->get('acq_commerce.ingest_api'),
-      $container->get('logger.factory')
+      $container->get('logger.factory'),
+      $container->get('acq_commerce.i18n_helper')
     );
   }
 
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php
index 56c920e65..7a6b1d8de 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/AcqPromotionsManager.php
@@ -3,6 +3,7 @@
 namespace Drupal\acq_promotion;
 
 use Drupal\acq_commerce\Conductor\APIWrapper;
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Driver\mysql\Connection;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -75,6 +76,13 @@ class AcqPromotionsManager {
   protected $connection;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * Constructs a new AcqPromotionsManager object.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
@@ -93,6 +101,8 @@ class AcqPromotionsManager {
    *   Config factory service.
    * @param Connection $connection
    *   Database connection service.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
                               APIWrapper $api_wrapper,
@@ -101,7 +111,8 @@ public function __construct(EntityTypeManagerInterface $entity_type_manager,
                               EntityRepositoryInterface $entityRepository,
                               QueueFactory $queue,
                               ConfigFactory $configFactory,
-                              Connection $connection) {
+                              Connection $connection,
+                              I18nHelper $i18n_helper) {
     $this->nodeStorage = $entity_type_manager->getStorage('node');
     $this->skuStorage = $entity_type_manager->getStorage('acq_sku');
     $this->apiWrapper = $api_wrapper;
@@ -111,6 +122,7 @@ public function __construct(EntityTypeManagerInterface $entity_type_manager,
     $this->queue = $queue;
     $this->configFactory = $configFactory;
     $this->connection = $connection;
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -276,7 +288,7 @@ public function syncPromotionWithMiddlewareResponse(array $promotion,
     $site_default_langcode = $this->languageManager->getDefaultLanguage()->getId();
 
     foreach ($promotions_labels as $promotion_label) {
-      $promotion_label_language = acq_commerce_get_langcode_from_store_id($promotion_label['store_id']);
+      $promotion_label_language = $this->i18nHelper->getLangcodeFromStoreId($promotion_label['store_id']);
 
       // Magento might have stores that what we don't support.
       if (empty($promotion_label_language)) {
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/Plugin/QueueWorker/AcqPromotionDetachQueue.php b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/Plugin/QueueWorker/AcqPromotionDetachQueue.php
index 0adbe01fe..d515f98dd 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/Plugin/QueueWorker/AcqPromotionDetachQueue.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_promotion/src/Plugin/QueueWorker/AcqPromotionDetachQueue.php
@@ -77,7 +77,7 @@ public function processItem($data) {
     // The skus detached from a catalog promotion are not part of those coming back during promotions sync.
     // So their final_price value does not get updated at that time. We thus need to resync these specific skus.
     if ($promotion_type === 'category' && $sku_texts) {
-      foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
+      foreach ($this->i18nHelper->getStoreLanguageMapping() as $langcode => $store_id) {
         $this->ingestApiWrapper->productFullSync($store_id, $langcode, $sku_texts);
       }
     }
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.drush.inc b/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.drush.inc
index 51a6718f5..bc9dd7834 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.drush.inc
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.drush.inc
@@ -109,7 +109,7 @@ function acq_sku_drush_command() {
 function drush_acq_sku_sync_commerce_products($langcode, $page_size) {
   $langcode = strtolower($langcode);
 
-  $store_id = acq_commerce_get_store_id_from_langcode($langcode);
+  $store_id = \Drupal::service('acq_commerce.i18n_helper')->getStoreIdFromLangcode($langcode);
 
   if (empty($store_id)) {
     drush_print(dt("Store id not found for provided language code."));
@@ -564,7 +564,7 @@ function drush_acq_sku_commerce_products_remove_duplicates() {
       '@skus' => $sku_texts,
     ]));
 
-    foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
+    foreach (\Drupal::service('acq_commerce.i18n_helper')->getStoreLanguageMapping() as $langcode => $store_id) {
       // Using very small page size to avoid any issues for skus which already
       // had corrupt data.
       \Drupal::service('acq_commerce.ingest_api')->productFullSync($store_id, $langcode, $sku_texts, 5);
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.services.yml b/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.services.yml
index 354cdad8d..5e1eea097 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.services.yml
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/acq_sku.services.yml
@@ -11,6 +11,7 @@ services:
       - '@acq_commerce.api'
       - '@entity.query'
       - '@logger.factory'
+      - '@acq_commerce.i18n_helper'
 
   acq_sku.product_options_manager:
     class: Drupal\acq_sku\ProductOptionsManager
@@ -18,6 +19,7 @@ services:
       - '@entity_type.manager'
       - '@acq_commerce.api'
       - '@logger.factory'
+      - '@acq_commerce.i18n_helper'
 
   acq_sku.category_repo:
     class: Drupal\acq_sku\ConductorCategoryRepository
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ConductorCategoryManager.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ConductorCategoryManager.php
index 24b8ca53a..46163b362 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ConductorCategoryManager.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ConductorCategoryManager.php
@@ -3,6 +3,7 @@
 namespace Drupal\acq_sku;
 
 use Drupal\acq_commerce\Conductor\APIWrapper;
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\Core\Entity\Query\QueryFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactory;
@@ -58,6 +59,13 @@ class ConductorCategoryManager implements CategoryManagerInterface {
   private $queryFactory;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * Constructor.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
@@ -70,14 +78,17 @@ class ConductorCategoryManager implements CategoryManagerInterface {
    *   Query factory.
    * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
    *   LoggerFactory object.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, ClientFactory $client_factory, APIWrapper $api_wrapper, QueryFactory $query_factory, LoggerChannelFactory $logger_factory) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, ClientFactory $client_factory, APIWrapper $api_wrapper, QueryFactory $query_factory, LoggerChannelFactory $logger_factory, I18nHelper $i18n_helper) {
     $this->termStorage = $entity_type_manager->getStorage('taxonomy_term');
     $this->vocabStorage = $entity_type_manager->getStorage('taxonomy_vocabulary');
     $this->clientFactory = $client_factory;
     $this->apiWrapper = $api_wrapper;
     $this->queryFactory = $query_factory;
     $this->logger = $logger_factory->get('acq_sku');
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -91,7 +102,7 @@ public function synchronizeTree($vocabulary, $remoteRoot = NULL) {
     $debug = $config->get('debug');
     $debug_dir = $config->get('debug_dir');
 
-    foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
+    foreach ($this->i18nHelper->getStoreLanguageMapping() as $langcode => $store_id) {
       if ($store_id) {
         // Load Conductor Category data.
         $categories = [$this->loadCategoryData($store_id)];
@@ -266,7 +277,7 @@ private function syncCategory(array $categories, $parent = NULL) {
         continue;
       }
 
-      $langcode = acq_commerce_get_langcode_from_store_id($category['store_id']);
+      $langcode = $this->i18nHelper->getLangcodeFromStoreId($category['store_id']);
 
       // If lancode is not available, means no mapping of store and language.
       if (!$langcode) {
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Form/ProductSyncForm.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Form/ProductSyncForm.php
index fdfcce8a9..76e0baf07 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Form/ProductSyncForm.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Form/ProductSyncForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acq_sku\Form;
 
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\acq_sku\CategoryManagerInterface;
 use Drupal\acq_commerce\Conductor\IngestAPIWrapper;
 use Drupal\Core\Form\FormBase;
@@ -32,16 +33,26 @@ class ProductSyncForm extends FormBase {
   private $ingestApi;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * ProductSyncForm constructor.
    *
    * @param \Drupal\acq_sku\CategoryManagerInterface $cat_manager
    *   CategoryManagerInterface instance.
    * @param \Drupal\acq_commerce\Conductor\IngestAPIWrapper $api
    *   IngestAPIWrapper object.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
-  public function __construct(CategoryManagerInterface $cat_manager, IngestAPIWrapper $api) {
+  public function __construct(CategoryManagerInterface $cat_manager, IngestAPIWrapper $api, I18nHelper $i18n_helper) {
     $this->catManager = $cat_manager;
     $this->ingestApi = $api;
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -50,7 +61,8 @@ public function __construct(CategoryManagerInterface $cat_manager, IngestAPIWrap
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('acq_sku.category_manager'),
-      $container->get('acq_commerce.ingest_api')
+      $container->get('acq_commerce.ingest_api'),
+      $container->get('acq_commerce.i18n_helper')
     );
   }
 
@@ -110,7 +122,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
         break;
 
       case 'Synchronize Products':
-        foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
+        foreach ($this->i18nHelper->getStoreLanguageMapping() as $langcode => $store_id) {
           $this->ingestApi->productFullSync($store_id, $langcode);
         }
         drupal_set_message('Product Synchronization Processing...', 'status');
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php
index 7d318e662..bc5e9d31a 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductStockSyncResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acq_sku\Plugin\rest\resource;
 
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\acq_sku\Entity\SKU;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -36,6 +37,13 @@ class ProductStockSyncResource extends ResourceBase {
   private $configFactory;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * Construct.
    *
    * @param array $configuration
@@ -50,15 +58,19 @@ class ProductStockSyncResource extends ResourceBase {
    *   The config factory.
    * @param \Psr\Log\LoggerInterface $logger
    *   A logger instance.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
   public function __construct(array $configuration,
                               $plugin_id,
                               $plugin_definition,
                               array $serializer_formats,
                               ConfigFactoryInterface $config_factory,
-                              LoggerInterface $logger) {
+                              LoggerInterface $logger,
+                              I18nHelper $i18n_helper) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);
     $this->configFactory = $config_factory;
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -71,7 +83,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_definition,
       $container->getParameter('serializer.formats'),
       $container->get('config.factory'),
-      $container->get('logger.factory')->get('acq_commerce')
+      $container->get('logger.factory')->get('acq_commerce'),
+      $container->get('acq_commerce.i18n_helper')
     );
   }
 
@@ -115,7 +128,7 @@ public function post(array $stock = []) {
     $langcode = NULL;
 
     if (isset($stock['store_id'])) {
-      $langcode = acq_commerce_get_langcode_from_store_id($stock['store_id']);
+      $langcode = $this->i18nHelper->getLangcodeFromStoreId($stock['store_id']);
 
       if (empty($langcode)) {
         // It could be for a different store/website, don't do anything.
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index c9a711cc3..a37db7f7e 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acq_sku\Plugin\rest\resource;
 
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\acq_sku\CategoryRepositoryInterface;
 use Drupal\acq_sku\Entity\SKU;
 use Drupal\acq_sku\ProductOptionsManager;
@@ -67,6 +68,13 @@ class ProductSyncResource extends ResourceBase {
   private $queryFactory;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * Construct.
    *
    * @param array $configuration
@@ -89,14 +97,17 @@ class ProductSyncResource extends ResourceBase {
    *   Category Repository instance.
    * @param \Drupal\acq_sku\ProductOptionsManager $product_options_manager
    *   Product Options Manager service instance.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, array $serializer_formats, LoggerInterface $logger, ConfigFactoryInterface $config_factory, QueryFactory $query_factory, CategoryRepositoryInterface $cat_repo, ProductOptionsManager $product_options_manager) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, array $serializer_formats, LoggerInterface $logger, ConfigFactoryInterface $config_factory, QueryFactory $query_factory, CategoryRepositoryInterface $cat_repo, ProductOptionsManager $product_options_manager, I18nHelper $i18n_helper) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);
     $this->entityManager = $entity_type_manager;
     $this->configFactory = $config_factory;
     $this->queryFactory = $query_factory;
     $this->categoryRepo = $cat_repo;
     $this->productOptionsManager = $product_options_manager;
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -113,7 +124,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $container->get('config.factory'),
       $container->get('entity.query'),
       $container->get('acq_sku.category_repo'),
-      $container->get('acq_sku.product_options_manager')
+      $container->get('acq_sku.product_options_manager'),
+      $container->get('acq_commerce.i18n_helper')
     );
   }
 
@@ -144,7 +156,7 @@ public function post(array $products = []) {
 
     foreach ($products as $product) {
       try {
-        $langcode = acq_commerce_get_langcode_from_store_id($product['store_id']);
+        $langcode = $this->i18nHelper->getLangcodeFromStoreId($product['store_id']);
 
         // Magento might have stores that what we don't support.
         if (empty($langcode)) {
diff --git a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ProductOptionsManager.php b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ProductOptionsManager.php
index 2955959b0..e70a7420b 100644
--- a/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ProductOptionsManager.php
+++ b/docroot/modules/commerce/acq_commerce/modules/acq_sku/src/ProductOptionsManager.php
@@ -3,6 +3,7 @@
 namespace Drupal\acq_sku;
 
 use Drupal\acq_commerce\Conductor\APIWrapper;
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 
@@ -35,6 +36,13 @@ class ProductOptionsManager {
   private $apiWrapper;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * Constructor.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
@@ -43,11 +51,16 @@ class ProductOptionsManager {
    *   ApiWrapper object.
    * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
    *   LoggerFactory object.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
+   *
+   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, APIWrapper $api_wrapper, LoggerChannelFactoryInterface $logger_factory) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, APIWrapper $api_wrapper, LoggerChannelFactoryInterface $logger_factory, I18nHelper $i18n_helper) {
     $this->termStorage = $entity_type_manager->getStorage('taxonomy_term');
     $this->apiWrapper = $api_wrapper;
     $this->logger = $logger_factory->get('acq_sku');
+    $this->i18nHelper = $i18n_helper;
   }
 
   /**
@@ -159,7 +172,7 @@ protected function createProductOption($langcode, $option_id, $option_value, $at
    * Synchronize all product options.
    */
   public function synchronizeProductOptions() {
-    foreach (acq_commerce_get_store_language_mapping() as $langcode => $store_id) {
+    foreach ($this->i18nHelper->getStoreLanguageMapping() as $langcode => $store_id) {
       $this->apiWrapper->updateStoreContext($store_id);
       $option_sets = $this->apiWrapper->getProductOptions();
 
diff --git a/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php b/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php
index a47966de6..cf8b12f79 100644
--- a/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php
+++ b/docroot/modules/commerce/acq_commerce/src/Conductor/APIWrapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acq_commerce\Conductor;
 
+use Drupal\acq_commerce\I18nHelper;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -27,6 +28,13 @@ class APIWrapper {
   protected $storeId;
 
   /**
+   * I18n Helper.
+   *
+   * @var \Drupal\acq_commerce\I18nHelper
+   */
+  private $i18nHelper;
+
+  /**
    * Constructor.
    *
    * @param ClientFactory $client_factory
@@ -37,16 +45,19 @@ class APIWrapper {
    *   LanguageManagerInterface object.
    * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
    *   LoggerChannelFactory object.
+   * @param \Drupal\acq_commerce\I18nHelper $i18n_helper
+   *   I18nHelper object.
    */
-  public function __construct(ClientFactory $client_factory, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, LoggerChannelFactory $logger_factory) {
+  public function __construct(ClientFactory $client_factory, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, LoggerChannelFactory $logger_factory, I18nHelper $i18n_helper) {
     $this->clientFactory = $client_factory;
     $this->apiVersion = $config_factory->get('acq_commerce.conductor')->get('api_version');
     $this->logger = $logger_factory->get('acq_sku');
+    $this->i18nHelper = $i18n_helper;
 
     // We always use the current language id to get store id. If required
     // function calling the api wrapper will pass different store id to
     // override this one.
-    $this->storeId = acq_commerce_get_store_id_from_langcode($language_manager->getCurrentLanguage()->getId());
+    $this->storeId = $this->i18nHelper->getStoreIdFromLangcode($language_manager->getCurrentLanguage()->getId());
   }
 
   /**
diff --git a/docroot/modules/commerce/acq_commerce/src/I18nHelper.php b/docroot/modules/commerce/acq_commerce/src/I18nHelper.php
new file mode 100644
index 000000000..da983b393
--- /dev/null
+++ b/docroot/modules/commerce/acq_commerce/src/I18nHelper.php
@@ -0,0 +1,102 @@
+<?php
+
+namespace Drupal\acq_commerce;
+
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+
+/**
+ * Class I18nHelper.
+ */
+class I18nHelper {
+
+  /**
+   * Stores the alshaya_api settings config array.
+   *
+   * @var array
+   */
+  protected $config;
+
+  /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
+   * Constructs a new I18nUtility object.
+   *
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The factory for configuration objects.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   The language manager.
+   */
+  public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager) {
+    $this->configFactory = $config_factory;
+    $this->languageManager = $language_manager;
+  }
+
+  /**
+   * Helper method to get mapping of all store ids and language codes.
+   *
+   * @return array
+   *   Mapping array.
+   */
+  public function getStoreLanguageMapping() {
+    $mapping = [];
+
+    $languages = $this->languageManager->getLanguages();
+
+    // Prepare the alternate locale data.
+    foreach ($languages as $lang => $language) {
+      // For default language, we access the config directly.
+      if ($lang == $this->languageManager->getDefaultLanguage()->getId()) {
+        $config = $this->configFactory->get('acq_commerce.store');
+      }
+      // We get store id from translated config for other languages.
+      else {
+        $config = $this->languageManager->getLanguageConfigOverride($lang, 'acq_commerce.store');
+      }
+
+      $mapping[$lang] = $config->get('store_id');
+    }
+
+    return $mapping;
+  }
+
+  /**
+   * Helper method to get store id from language code.
+   *
+   * @param string $langcode
+   *   Language code to convert to store id.
+   *
+   * @return string|null
+   *   Store id if available as string or null.
+   */
+  public function getStoreIdFromLangcode($langcode) {
+    $mapping = $this->getStoreLanguageMapping();
+    return !empty($mapping[$langcode]) ? $mapping[$langcode] : NULL;
+  }
+
+  /**
+   * Helper method to get language code from store id.
+   *
+   * @param string $store_id
+   *   Store id to convert to language code.
+   *
+   * @return string|null
+   *   Language code if available or null.
+   */
+  function getLangcodeFromStoreId($store_id) {
+    $mapping = $this->getStoreLanguageMapping();
+    $mapping = array_flip($mapping);
+
+    if (empty($store_id)) {
+      return array_shift($mapping);
+    }
+
+    return !empty($mapping[$store_id]) ? $mapping[$store_id] : NULL;
+  }
+
+}
\ No newline at end of file
