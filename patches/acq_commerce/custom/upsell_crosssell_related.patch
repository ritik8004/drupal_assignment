diff --git a/modules/acq_sku/src/Entity/SKU.php b/modules/acq_sku/src/Entity/SKU.php
index 0de4ab1..a8232bf 100755
--- a/modules/acq_sku/src/Entity/SKU.php
+++ b/modules/acq_sku/src/Entity/SKU.php
@@ -315,6 +315,36 @@ class SKU extends ContentEntityBase implements SKUInterface {
       ->setLabel(t('Changed'))
       ->setDescription(t('The time that the entity was last edited.'));
 
+    $fields['crosssell'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Cross sell SKU'))
+      ->setDescription(t('Reference to all Cross sell SKUs.'))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => 5,
+      ))
+      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
+      ->setDisplayConfigurable('form', TRUE);
+
+    $fields['upsell'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Up sell SKU'))
+      ->setDescription(t('Reference to all up sell SKUs.'))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => 6,
+      ))
+      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
+      ->setDisplayConfigurable('form', TRUE);
+
+    $fields['related'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Related SKU'))
+      ->setDescription(t('Reference to all related SKUs.'))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => 7,
+      ))
+      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
+      ->setDisplayConfigurable('form', TRUE);
+
     return $fields;
   }
 
diff --git a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Grouped.php b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Grouped.php
index ccdb42f..921a757 100755
--- a/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Grouped.php
+++ b/modules/acq_sku/src/Plugin/AcquiaCommerce/SKUType/Grouped.php
@@ -115,10 +115,14 @@ class Grouped extends SKUPluginBase {
     $sku->field_grouped_skus->setValue([]);
 
     foreach ($product['linked'] as $linked_sku) {
-      $sku->field_grouped_skus->set(
-        $linked_sku['position'],
-        $linked_sku['linked_sku']
-      );
+      // Linked may contain associated, upsell, crosssell and related.
+      // We want only the associated ones for grouped.
+      if ($linked_sku['type'] == 'associated') {
+        $sku->field_grouped_skus->set(
+          $linked_sku['position'],
+          $linked_sku['linked_sku']
+        );
+      }
     }
   }
 
diff --git a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
index 1ce1d0c..13cb360 100755
--- a/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
+++ b/modules/acq_sku/src/Plugin/rest/resource/ProductSyncResource.php
@@ -3,6 +3,7 @@
 namespace Drupal\acq_sku\Plugin\rest\resource;
 
 use Drupal\acq_sku\CategoryRepositoryInterface;
+use Drupal\acq_sku\Entity\SKU;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryFactory;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -231,6 +232,15 @@ class ProductSyncResource extends ResourceBase {
         $created++;
       }
 
+      // Update upsell linked SKUs.
+      $this->updateLinkedSkus('upsell', $sku, $product['linked']);
+
+      // Update crosssell linked SKUs.
+      $this->updateLinkedSkus('crosssell', $sku, $product['linked']);
+
+      // Update related linked SKUs.
+      $this->updateLinkedSkus('related', $sku, $product['linked']);
+
       $plugin_manager = \Drupal::service('plugin.manager.sku');
       $plugin_definition = $plugin_manager->pluginFromSKU($sku);
 
@@ -366,4 +376,47 @@ class ProductSyncResource extends ResourceBase {
     }
   }
 
+  /**
+   * Update linked Skus.
+   *
+   * Prepare the field value for linked type (upsell, crosssell, etc.).
+   * Get the position based on the position coming from API.
+   *
+   * @param string $type
+   *   Type of link.
+   * @param Drupal\acq_sku\Entity\SKU $sku
+   *   Root SKU.
+   * @param array $linked
+   *   Linked SKUs.
+   */
+  private function updateLinkedSkus($type, SKU &$sku, array $linked) {
+    // Reset the upsell skus to null.
+    $sku->{$type}->setValue([]);
+
+    $fieldData = [];
+
+    foreach ($linked as $link) {
+      if ($link['type'] != $type) {
+        continue;
+      }
+
+      $fieldData[$link['position']] = $link['linked_sku'];
+    }
+
+    // If there is no upsell skus to link, we simply return from here.
+    if (empty($fieldData)) {
+      return;
+    }
+
+    // Sort them based on position.
+    ksort($fieldData);
+
+    // Update the index to sequential values so we can set in field.
+    $fieldData = array_values($fieldData);
+
+    foreach ($fieldData as $delta => $value) {
+      $sku->{$type}->set($delta, $value);
+    }
+  }
+
 }
