diff --git a/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/Field/FieldType/SKUFieldType.php b/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/Field/FieldType/SKUFieldType.php
index 21ec92e..931e086 100644
--- a/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/Field/FieldType/SKUFieldType.php
+++ b/modules/commerce/acq_commerce/modules/acq_sku/src/Plugin/Field/FieldType/SKUFieldType.php
@@ -7,13 +7,16 @@

 namespace Drupal\acq_sku\Plugin\Field\FieldType;

+use Drupal\acq_sku\Entity\SKU;
 use Drupal\Component\Utility\Random;
+use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\TypedData\DataDefinition;
+use Drupal\Core\TypedData\DataReferenceDefinition;

 /**
  * Plugin implementation of the 'sku' field type.
@@ -47,12 +50,29 @@ public static function propertyDefinitions(FieldStorageDefinitionInterface $fiel
       ->setSetting('case_sensitive', $field_definition->getSetting('case_sensitive'))
       ->setRequired(TRUE);

+    $properties['entity'] = DataReferenceDefinition::create('entity')
+      ->setLabel('SKU Reference')
+      ->setDescription(new TranslatableMarkup('The referenced entity'))
+      // The entity object is computed out of the SKU.
+      ->setComputed(TRUE)
+      ->setReadOnly(FALSE)
+      ->setRequired(FALSE)
+      ->setTargetDefinition(EntityDataDefinition::create('acq_sku'))
+      ->addConstraint('EntityType', 'acq_sku');
+
     return $properties;
   }

   /**
    * {@inheritdoc}
    */
+  public static function mainPropertyName() {
+    return 'value';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
   public static function schema(FieldStorageDefinitionInterface $field_definition) {
     $schema = [
       'columns' => [
@@ -127,4 +147,17 @@ public function isEmpty() {
     return $value === NULL || $value === '';
   }

+  /**
+   * {@inheritdoc}
+   */
+  public function get($property_name) {
+    // Since we are doing reference in custom way, we load the value here.
+    if ($property_name === 'entity' && !isset($this->values[$property_name])) {
+      $value = $this->values[$property_name] = SKU::loadFromSKU($this->values['value']);
+      $this->properties[$property_name] = $this->getTypedDataManager()->getPropertyInstance($this, $property_name, $value);
+    }
+
+    return parent::get($property_name);
+  }
+
 }

